{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hardi\\\\Downloads\\\\apextrader_ml_full\\\\frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport toast from 'react-hot-toast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [testnet, setTestnet] = useState(true);\n\n  // Configure axios defaults\n  axios.defaults.withCredentials = true;\n  axios.defaults.baseURL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\n  useEffect(() => {\n    // Check if user is already authenticated\n    checkAuthStatus();\n  }, []);\n  const checkAuthStatus = async () => {\n    try {\n      const response = await axios.get('/api/account');\n      if (response.data && !response.data.error) {\n        setIsAuthenticated(true);\n        setUser(response.data);\n      }\n    } catch (error) {\n      // User is not authenticated\n      setIsAuthenticated(false);\n      setUser(null);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const login = async (apiKey, apiSecret, useTestnet = true) => {\n    try {\n      setLoading(true);\n      const response = await axios.post('/api/login', {\n        api_key: apiKey,\n        api_secret: apiSecret,\n        testnet: useTestnet\n      });\n      if (response.data.success) {\n        setIsAuthenticated(true);\n        setUser(response.data.account);\n        setTestnet(useTestnet);\n        toast.success('Login successful!');\n        return {\n          success: true\n        };\n      } else {\n        throw new Error(response.data.error || 'Login failed');\n      }\n    } catch (error) {\n      var _error$response, _error$response$data;\n      const errorMessage = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || error.message || 'Login failed';\n      toast.error(errorMessage);\n      return {\n        success: false,\n        error: errorMessage\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  const logout = async () => {\n    try {\n      await axios.post('/api/logout');\n    } catch (error) {\n      console.error('Logout error:', error);\n    } finally {\n      setIsAuthenticated(false);\n      setUser(null);\n      toast.success('Logged out successfully');\n    }\n  };\n  const value = {\n    isAuthenticated,\n    user,\n    loading,\n    testnet,\n    login,\n    logout,\n    checkAuthStatus\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"uF5j7SwteaGPCtO1Kfc+2L6X798=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","axios","toast","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","isAuthenticated","setIsAuthenticated","user","setUser","loading","setLoading","testnet","setTestnet","defaults","withCredentials","baseURL","process","env","REACT_APP_API_URL","checkAuthStatus","response","get","data","error","login","apiKey","apiSecret","useTestnet","post","api_key","api_secret","success","account","_error$response","_error$response$data","errorMessage","message","logout","console","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/hardi/Downloads/apextrader_ml_full/frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport toast from 'react-hot-toast';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [testnet, setTestnet] = useState(true);\r\n\r\n  // Configure axios defaults\r\n  axios.defaults.withCredentials = true;\r\n  axios.defaults.baseURL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\r\n\r\n  useEffect(() => {\r\n    // Check if user is already authenticated\r\n    checkAuthStatus();\r\n  }, []);\r\n\r\n  const checkAuthStatus = async () => {\r\n    try {\r\n      const response = await axios.get('/api/account');\r\n      if (response.data && !response.data.error) {\r\n        setIsAuthenticated(true);\r\n        setUser(response.data);\r\n      }\r\n    } catch (error) {\r\n      // User is not authenticated\r\n      setIsAuthenticated(false);\r\n      setUser(null);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const login = async (apiKey, apiSecret, useTestnet = true) => {\r\n    try {\r\n      setLoading(true);\r\n      \r\n      const response = await axios.post('/api/login', {\r\n        api_key: apiKey,\r\n        api_secret: apiSecret,\r\n        testnet: useTestnet\r\n      });\r\n\r\n      if (response.data.success) {\r\n        setIsAuthenticated(true);\r\n        setUser(response.data.account);\r\n        setTestnet(useTestnet);\r\n        \r\n        toast.success('Login successful!');\r\n        return { success: true };\r\n      } else {\r\n        throw new Error(response.data.error || 'Login failed');\r\n      }\r\n    } catch (error) {\r\n      const errorMessage = error.response?.data?.error || error.message || 'Login failed';\r\n      toast.error(errorMessage);\r\n      return { success: false, error: errorMessage };\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const logout = async () => {\r\n    try {\r\n      await axios.post('/api/logout');\r\n    } catch (error) {\r\n      console.error('Logout error:', error);\r\n    } finally {\r\n      setIsAuthenticated(false);\r\n      setUser(null);\r\n      toast.success('Logged out successfully');\r\n    }\r\n  };\r\n\r\n  const value = {\r\n    isAuthenticated,\r\n    user,\r\n    loading,\r\n    testnet,\r\n    login,\r\n    logout,\r\n    checkAuthStatus\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}