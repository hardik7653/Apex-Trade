{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hardi\\\\Downloads\\\\apextrader_ml_full\\\\frontend\\\\src\\\\context\\\\TradingContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { io } from 'socket.io-client';\nimport axios from 'axios';\nimport toast from 'react-hot-toast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TradingContext = /*#__PURE__*/createContext();\nexport const useTrading = () => {\n  _s();\n  const context = useContext(TradingContext);\n  if (!context) {\n    throw new Error('useTrading must be used within a TradingProvider');\n  }\n  return context;\n};\n_s(useTrading, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const TradingProvider = ({\n  children\n}) => {\n  _s2();\n  const [socket, setSocket] = useState(null);\n  const [botStatus, setBotStatus] = useState({\n    running: false,\n    symbols: [],\n    last_signal: null,\n    total_trades: 0,\n    win_rate: 0.0,\n    total_pnl: 0.0,\n    current_balance: 0.0\n  });\n  const [signals, setSignals] = useState([]);\n  const [trades, setTrades] = useState([]);\n  const [performance, setPerformance] = useState({});\n  const [marketData, setMarketData] = useState({});\n  const [loading, setLoading] = useState(false);\n  useEffect(() => {\n    // Initialize socket connection\n    const newSocket = io(process.env.REACT_APP_API_URL || 'http://localhost:5000', {\n      withCredentials: true\n    });\n    newSocket.on('connect', () => {\n      console.log('Connected to trading bot');\n    });\n    newSocket.on('disconnect', () => {\n      console.log('Disconnected from trading bot');\n    });\n    newSocket.on('signal_update', data => {\n      console.log('Signal update:', data);\n      setSignals(prev => [...prev, data]);\n      toast.success(`New signal: ${data.signal.signal} for ${data.symbol}`);\n    });\n    newSocket.on('trade_update', data => {\n      console.log('Trade update:', data);\n      setTrades(prev => [...prev, data]);\n      toast.success(`Trade executed: ${data.side} ${data.quantity} ${data.symbol}`);\n    });\n    newSocket.on('bot_status_update', data => {\n      console.log('Bot status update:', data);\n      setBotStatus(data);\n    });\n    setSocket(newSocket);\n    return () => {\n      newSocket.close();\n    };\n  }, []);\n\n  // API Functions\n  const trainModels = async symbols => {\n    try {\n      setLoading(true);\n      const response = await axios.post('/api/train-models', {\n        symbols\n      });\n      if (response.data.success) {\n        toast.success('Models trained successfully');\n        return response.data;\n      } else {\n        throw new Error('Training failed');\n      }\n    } catch (error) {\n      var _error$response, _error$response$data;\n      const errorMessage = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || error.message;\n      toast.error(errorMessage);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const startTrading = async symbols => {\n    try {\n      setLoading(true);\n      const response = await axios.post('/api/start-trading', {\n        symbols\n      });\n      if (response.data.success) {\n        toast.success('Trading bot started');\n        return response.data;\n      } else {\n        throw new Error(response.data.error || 'Failed to start trading');\n      }\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      const errorMessage = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error) || error.message;\n      toast.error(errorMessage);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const stopTrading = async () => {\n    try {\n      setLoading(true);\n      const response = await axios.post('/api/stop-trading');\n      if (response.data.success) {\n        toast.success('Trading bot stopped');\n        return response.data;\n      } else {\n        throw new Error(response.data.error || 'Failed to stop trading');\n      }\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      const errorMessage = ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.error) || error.message;\n      toast.error(errorMessage);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const getBotStatus = async () => {\n    try {\n      const response = await axios.get('/api/bot-status');\n      setBotStatus(response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching bot status:', error);\n    }\n  };\n  const getSignals = async () => {\n    try {\n      const response = await axios.get('/api/signals');\n      setSignals(response.data.signals || []);\n      return response.data.signals;\n    } catch (error) {\n      console.error('Error fetching signals:', error);\n    }\n  };\n  const getTrades = async () => {\n    try {\n      const response = await axios.get('/api/trades');\n      setTrades(response.data.trades || []);\n      return response.data.trades;\n    } catch (error) {\n      console.error('Error fetching trades:', error);\n    }\n  };\n  const getPerformance = async () => {\n    try {\n      const response = await axios.get('/api/performance');\n      setPerformance(response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching performance:', error);\n    }\n  };\n  const getMarketData = async (symbol, interval = '1h', limit = 100) => {\n    try {\n      const response = await axios.get(`/api/market-data/${symbol}`, {\n        params: {\n          interval,\n          limit\n        }\n      });\n      if (response.data.success) {\n        setMarketData(prev => ({\n          ...prev,\n          [symbol]: response.data.data\n        }));\n        return response.data.data;\n      } else {\n        throw new Error(response.data.error);\n      }\n    } catch (error) {\n      console.error('Error fetching market data:', error);\n      throw error;\n    }\n  };\n  const placeOrder = async orderData => {\n    try {\n      setLoading(true);\n      const response = await axios.post('/api/place-order', orderData);\n      if (response.data.success) {\n        toast.success('Order placed successfully');\n        return response.data;\n      } else {\n        throw new Error(response.data.error || 'Failed to place order');\n      }\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      const errorMessage = ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.error) || error.message;\n      toast.error(errorMessage);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const generateSignal = async symbol => {\n    try {\n      const response = await axios.get(`/api/generate-signal/${symbol}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error generating signal:', error);\n      throw error;\n    }\n  };\n\n  // Subscribe to real-time updates\n  const subscribeToUpdates = () => {\n    if (socket) {\n      socket.emit('subscribe_signals');\n    }\n  };\n  const value = {\n    // State\n    botStatus,\n    signals,\n    trades,\n    performance,\n    marketData,\n    loading,\n    // Actions\n    trainModels,\n    startTrading,\n    stopTrading,\n    getBotStatus,\n    getSignals,\n    getTrades,\n    getPerformance,\n    getMarketData,\n    placeOrder,\n    generateSignal,\n    subscribeToUpdates\n  };\n  return /*#__PURE__*/_jsxDEV(TradingContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 254,\n    columnNumber: 5\n  }, this);\n};\n_s2(TradingProvider, \"FDy9aph8IE+neqRTmdFjwtBybEI=\");\n_c = TradingProvider;\nvar _c;\n$RefreshReg$(_c, \"TradingProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","io","axios","toast","jsxDEV","_jsxDEV","TradingContext","useTrading","_s","context","Error","TradingProvider","children","_s2","socket","setSocket","botStatus","setBotStatus","running","symbols","last_signal","total_trades","win_rate","total_pnl","current_balance","signals","setSignals","trades","setTrades","performance","setPerformance","marketData","setMarketData","loading","setLoading","newSocket","process","env","REACT_APP_API_URL","withCredentials","on","console","log","data","prev","success","signal","symbol","side","quantity","close","trainModels","response","post","error","_error$response","_error$response$data","errorMessage","message","startTrading","_error$response2","_error$response2$data","stopTrading","_error$response3","_error$response3$data","getBotStatus","get","getSignals","getTrades","getPerformance","getMarketData","interval","limit","params","placeOrder","orderData","_error$response4","_error$response4$data","generateSignal","subscribeToUpdates","emit","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/hardi/Downloads/apextrader_ml_full/frontend/src/context/TradingContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { io } from 'socket.io-client';\r\nimport axios from 'axios';\r\nimport toast from 'react-hot-toast';\r\n\r\nconst TradingContext = createContext();\r\n\r\nexport const useTrading = () => {\r\n  const context = useContext(TradingContext);\r\n  if (!context) {\r\n    throw new Error('useTrading must be used within a TradingProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const TradingProvider = ({ children }) => {\r\n  const [socket, setSocket] = useState(null);\r\n  const [botStatus, setBotStatus] = useState({\r\n    running: false,\r\n    symbols: [],\r\n    last_signal: null,\r\n    total_trades: 0,\r\n    win_rate: 0.0,\r\n    total_pnl: 0.0,\r\n    current_balance: 0.0\r\n  });\r\n  const [signals, setSignals] = useState([]);\r\n  const [trades, setTrades] = useState([]);\r\n  const [performance, setPerformance] = useState({});\r\n  const [marketData, setMarketData] = useState({});\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // Initialize socket connection\r\n    const newSocket = io(process.env.REACT_APP_API_URL || 'http://localhost:5000', {\r\n      withCredentials: true\r\n    });\r\n\r\n    newSocket.on('connect', () => {\r\n      console.log('Connected to trading bot');\r\n    });\r\n\r\n    newSocket.on('disconnect', () => {\r\n      console.log('Disconnected from trading bot');\r\n    });\r\n\r\n    newSocket.on('signal_update', (data) => {\r\n      console.log('Signal update:', data);\r\n      setSignals(prev => [...prev, data]);\r\n      toast.success(`New signal: ${data.signal.signal} for ${data.symbol}`);\r\n    });\r\n\r\n    newSocket.on('trade_update', (data) => {\r\n      console.log('Trade update:', data);\r\n      setTrades(prev => [...prev, data]);\r\n      toast.success(`Trade executed: ${data.side} ${data.quantity} ${data.symbol}`);\r\n    });\r\n\r\n    newSocket.on('bot_status_update', (data) => {\r\n      console.log('Bot status update:', data);\r\n      setBotStatus(data);\r\n    });\r\n\r\n    setSocket(newSocket);\r\n\r\n    return () => {\r\n      newSocket.close();\r\n    };\r\n  }, []);\r\n\r\n  // API Functions\r\n  const trainModels = async (symbols) => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await axios.post('/api/train-models', { symbols });\r\n      \r\n      if (response.data.success) {\r\n        toast.success('Models trained successfully');\r\n        return response.data;\r\n      } else {\r\n        throw new Error('Training failed');\r\n      }\r\n    } catch (error) {\r\n      const errorMessage = error.response?.data?.error || error.message;\r\n      toast.error(errorMessage);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const startTrading = async (symbols) => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await axios.post('/api/start-trading', { symbols });\r\n      \r\n      if (response.data.success) {\r\n        toast.success('Trading bot started');\r\n        return response.data;\r\n      } else {\r\n        throw new Error(response.data.error || 'Failed to start trading');\r\n      }\r\n    } catch (error) {\r\n      const errorMessage = error.response?.data?.error || error.message;\r\n      toast.error(errorMessage);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const stopTrading = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await axios.post('/api/stop-trading');\r\n      \r\n      if (response.data.success) {\r\n        toast.success('Trading bot stopped');\r\n        return response.data;\r\n      } else {\r\n        throw new Error(response.data.error || 'Failed to stop trading');\r\n      }\r\n    } catch (error) {\r\n      const errorMessage = error.response?.data?.error || error.message;\r\n      toast.error(errorMessage);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const getBotStatus = async () => {\r\n    try {\r\n      const response = await axios.get('/api/bot-status');\r\n      setBotStatus(response.data);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching bot status:', error);\r\n    }\r\n  };\r\n\r\n  const getSignals = async () => {\r\n    try {\r\n      const response = await axios.get('/api/signals');\r\n      setSignals(response.data.signals || []);\r\n      return response.data.signals;\r\n    } catch (error) {\r\n      console.error('Error fetching signals:', error);\r\n    }\r\n  };\r\n\r\n  const getTrades = async () => {\r\n    try {\r\n      const response = await axios.get('/api/trades');\r\n      setTrades(response.data.trades || []);\r\n      return response.data.trades;\r\n    } catch (error) {\r\n      console.error('Error fetching trades:', error);\r\n    }\r\n  };\r\n\r\n  const getPerformance = async () => {\r\n    try {\r\n      const response = await axios.get('/api/performance');\r\n      setPerformance(response.data);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching performance:', error);\r\n    }\r\n  };\r\n\r\n  const getMarketData = async (symbol, interval = '1h', limit = 100) => {\r\n    try {\r\n      const response = await axios.get(`/api/market-data/${symbol}`, {\r\n        params: { interval, limit }\r\n      });\r\n      \r\n      if (response.data.success) {\r\n        setMarketData(prev => ({\r\n          ...prev,\r\n          [symbol]: response.data.data\r\n        }));\r\n        return response.data.data;\r\n      } else {\r\n        throw new Error(response.data.error);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching market data:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const placeOrder = async (orderData) => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await axios.post('/api/place-order', orderData);\r\n      \r\n      if (response.data.success) {\r\n        toast.success('Order placed successfully');\r\n        return response.data;\r\n      } else {\r\n        throw new Error(response.data.error || 'Failed to place order');\r\n      }\r\n    } catch (error) {\r\n      const errorMessage = error.response?.data?.error || error.message;\r\n      toast.error(errorMessage);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const generateSignal = async (symbol) => {\r\n    try {\r\n      const response = await axios.get(`/api/generate-signal/${symbol}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error generating signal:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Subscribe to real-time updates\r\n  const subscribeToUpdates = () => {\r\n    if (socket) {\r\n      socket.emit('subscribe_signals');\r\n    }\r\n  };\r\n\r\n  const value = {\r\n    // State\r\n    botStatus,\r\n    signals,\r\n    trades,\r\n    performance,\r\n    marketData,\r\n    loading,\r\n    \r\n    // Actions\r\n    trainModels,\r\n    startTrading,\r\n    stopTrading,\r\n    getBotStatus,\r\n    getSignals,\r\n    getTrades,\r\n    getPerformance,\r\n    getMarketData,\r\n    placeOrder,\r\n    generateSignal,\r\n    subscribeToUpdates\r\n  };\r\n\r\n  return (\r\n    <TradingContext.Provider value={value}>\r\n      {children}\r\n    </TradingContext.Provider>\r\n  );\r\n};\r\n\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}