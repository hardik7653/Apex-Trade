{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hardi\\\\Downloads\\\\apextrader_ml_full\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Toaster } from 'react-hot-toast';\nimport io from 'socket.io-client';\nimport Header from './components/Header';\nimport ConnectionModal from './components/ConnectionModal';\nimport TradingDashboard from './components/TradingDashboard';\nimport { API_BASE_URL } from './config';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [isConnected, setIsConnected] = useState(false);\n  const [connectionMode, setConnectionMode] = useState(null);\n  const [showConnectionModal, setShowConnectionModal] = useState(true);\n  const [socket, setSocket] = useState(null);\n  const [balances, setBalances] = useState([]);\n  const [orders, setOrders] = useState([]);\n  const [trades, setTrades] = useState([]);\n  const [selectedSymbol, setSelectedSymbol] = useState('BTCUSDT');\n  useEffect(() => {\n    // Check connection status on app load\n    checkConnectionStatus();\n\n    // Initialize WebSocket connection\n    const newSocket = io(API_BASE_URL);\n    setSocket(newSocket);\n    newSocket.on('connect', () => {\n      console.log('Connected to backend');\n    });\n    newSocket.on('order_placed', order => {\n      console.log('Order placed:', order);\n      // Refresh orders and balances\n      fetchOrders();\n      fetchBalances();\n    });\n    newSocket.on('order_cancelled', order => {\n      console.log('Order cancelled:', order);\n      // Refresh orders\n      fetchOrders();\n    });\n    return () => {\n      newSocket.close();\n    };\n  }, []);\n  const checkConnectionStatus = async () => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/status`);\n      const data = await response.json();\n      if (data.connected) {\n        setIsConnected(true);\n        setConnectionMode(data.mode);\n        setShowConnectionModal(false);\n        // Fetch initial data\n        fetchBalances();\n        fetchOrders();\n        fetchTrades();\n      }\n    } catch (error) {\n      console.log('Not connected to any API');\n    }\n  };\n  const fetchBalances = async () => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/balances`);\n      const data = await response.json();\n      if (data.success) {\n        setBalances(data.balances);\n      }\n    } catch (error) {\n      console.error('Error fetching balances:', error);\n    }\n  };\n  const fetchOrders = async () => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/orders`);\n      const data = await response.json();\n      if (Array.isArray(data)) {\n        setOrders(data);\n      }\n    } catch (error) {\n      console.error('Error fetching orders:', error);\n    }\n  };\n  const fetchTrades = async () => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/trades?symbol=${selectedSymbol}&limit=50`);\n      const data = await response.json();\n      if (Array.isArray(data)) {\n        setTrades(data);\n      }\n    } catch (error) {\n      console.error('Error fetching trades:', error);\n    }\n  };\n  const handleConnectionSuccess = mode => {\n    setIsConnected(true);\n    setConnectionMode(mode);\n    setShowConnectionModal(false);\n    // Fetch initial data\n    fetchBalances();\n    fetchOrders();\n    fetchTrades();\n  };\n  const handleDisconnect = () => {\n    setIsConnected(false);\n    setConnectionMode(null);\n    setShowConnectionModal(true);\n    setBalances([]);\n    setOrders([]);\n    setTrades([]);\n  };\n  const handleSymbolChange = symbol => {\n    setSelectedSymbol(symbol);\n    fetchTrades();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-binance-darker text-white\",\n    children: [/*#__PURE__*/_jsxDEV(Toaster, {\n      position: \"top-right\",\n      toastOptions: {\n        duration: 4000,\n        style: {\n          background: '#2A2D35',\n          color: '#fff',\n          border: '1px solid #474A57'\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Header, {\n      isConnected: isConnected,\n      connectionMode: connectionMode,\n      onDisconnect: handleDisconnect,\n      selectedSymbol: selectedSymbol,\n      onSymbolChange: handleSymbolChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this), showConnectionModal ? /*#__PURE__*/_jsxDEV(ConnectionModal, {\n      onConnectionSuccess: handleConnectionSuccess,\n      onClose: () => setShowConnectionModal(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(TradingDashboard, {\n      selectedSymbol: selectedSymbol,\n      balances: balances,\n      orders: orders,\n      trades: trades,\n      onRefreshBalances: fetchBalances,\n      onRefreshOrders: fetchOrders,\n      onRefreshTrades: fetchTrades\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"+db0bBsjyybIL2CAjaJnfC5ttsA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Toaster","io","Header","ConnectionModal","TradingDashboard","API_BASE_URL","jsxDEV","_jsxDEV","App","_s","isConnected","setIsConnected","connectionMode","setConnectionMode","showConnectionModal","setShowConnectionModal","socket","setSocket","balances","setBalances","orders","setOrders","trades","setTrades","selectedSymbol","setSelectedSymbol","checkConnectionStatus","newSocket","on","console","log","order","fetchOrders","fetchBalances","close","response","fetch","data","json","connected","mode","fetchTrades","error","success","Array","isArray","handleConnectionSuccess","handleDisconnect","handleSymbolChange","symbol","className","children","position","toastOptions","duration","style","background","color","border","fileName","_jsxFileName","lineNumber","columnNumber","onDisconnect","onSymbolChange","onConnectionSuccess","onClose","onRefreshBalances","onRefreshOrders","onRefreshTrades","_c","$RefreshReg$"],"sources":["C:/Users/hardi/Downloads/apextrader_ml_full/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Toaster } from 'react-hot-toast';\r\nimport io from 'socket.io-client';\r\nimport Header from './components/Header';\r\nimport ConnectionModal from './components/ConnectionModal';\r\nimport TradingDashboard from './components/TradingDashboard';\r\nimport { API_BASE_URL } from './config';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const [isConnected, setIsConnected] = useState(false);\r\n  const [connectionMode, setConnectionMode] = useState(null);\r\n  const [showConnectionModal, setShowConnectionModal] = useState(true);\r\n  const [socket, setSocket] = useState(null);\r\n  const [balances, setBalances] = useState([]);\r\n  const [orders, setOrders] = useState([]);\r\n  const [trades, setTrades] = useState([]);\r\n  const [selectedSymbol, setSelectedSymbol] = useState('BTCUSDT');\r\n\r\n  useEffect(() => {\r\n    // Check connection status on app load\r\n    checkConnectionStatus();\r\n    \r\n    // Initialize WebSocket connection\r\n    const newSocket = io(API_BASE_URL);\r\n    setSocket(newSocket);\r\n\r\n    newSocket.on('connect', () => {\r\n      console.log('Connected to backend');\r\n    });\r\n\r\n    newSocket.on('order_placed', (order) => {\r\n      console.log('Order placed:', order);\r\n      // Refresh orders and balances\r\n      fetchOrders();\r\n      fetchBalances();\r\n    });\r\n\r\n    newSocket.on('order_cancelled', (order) => {\r\n      console.log('Order cancelled:', order);\r\n      // Refresh orders\r\n      fetchOrders();\r\n    });\r\n\r\n    return () => {\r\n      newSocket.close();\r\n    };\r\n  }, []);\r\n\r\n  const checkConnectionStatus = async () => {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/api/status`);\r\n      const data = await response.json();\r\n      \r\n      if (data.connected) {\r\n        setIsConnected(true);\r\n        setConnectionMode(data.mode);\r\n        setShowConnectionModal(false);\r\n        // Fetch initial data\r\n        fetchBalances();\r\n        fetchOrders();\r\n        fetchTrades();\r\n      }\r\n    } catch (error) {\r\n      console.log('Not connected to any API');\r\n    }\r\n  };\r\n\r\n  const fetchBalances = async () => {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/api/balances`);\r\n      const data = await response.json();\r\n      \r\n      if (data.success) {\r\n        setBalances(data.balances);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching balances:', error);\r\n    }\r\n  };\r\n\r\n  const fetchOrders = async () => {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/api/orders`);\r\n      const data = await response.json();\r\n      \r\n      if (Array.isArray(data)) {\r\n        setOrders(data);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching orders:', error);\r\n    }\r\n  };\r\n\r\n  const fetchTrades = async () => {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/api/trades?symbol=${selectedSymbol}&limit=50`);\r\n      const data = await response.json();\r\n      \r\n      if (Array.isArray(data)) {\r\n        setTrades(data);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching trades:', error);\r\n    }\r\n  };\r\n\r\n  const handleConnectionSuccess = (mode) => {\r\n    setIsConnected(true);\r\n    setConnectionMode(mode);\r\n    setShowConnectionModal(false);\r\n    // Fetch initial data\r\n    fetchBalances();\r\n    fetchOrders();\r\n    fetchTrades();\r\n  };\r\n\r\n  const handleDisconnect = () => {\r\n    setIsConnected(false);\r\n    setConnectionMode(null);\r\n    setShowConnectionModal(true);\r\n    setBalances([]);\r\n    setOrders([]);\r\n    setTrades([]);\r\n  };\r\n\r\n  const handleSymbolChange = (symbol) => {\r\n    setSelectedSymbol(symbol);\r\n    fetchTrades();\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-binance-darker text-white\">\r\n      <Toaster \r\n        position=\"top-right\"\r\n        toastOptions={{\r\n          duration: 4000,\r\n          style: {\r\n            background: '#2A2D35',\r\n            color: '#fff',\r\n            border: '1px solid #474A57',\r\n          },\r\n        }}\r\n      />\r\n      \r\n      <Header \r\n        isConnected={isConnected}\r\n        connectionMode={connectionMode}\r\n        onDisconnect={handleDisconnect}\r\n        selectedSymbol={selectedSymbol}\r\n        onSymbolChange={handleSymbolChange}\r\n      />\r\n\r\n      {showConnectionModal ? (\r\n        <ConnectionModal \r\n          onConnectionSuccess={handleConnectionSuccess}\r\n          onClose={() => setShowConnectionModal(false)}\r\n        />\r\n      ) : (\r\n        <TradingDashboard\r\n          selectedSymbol={selectedSymbol}\r\n          balances={balances}\r\n          orders={orders}\r\n          trades={trades}\r\n          onRefreshBalances={fetchBalances}\r\n          onRefreshOrders={fetchOrders}\r\n          onRefreshTrades={fetchTrades}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}