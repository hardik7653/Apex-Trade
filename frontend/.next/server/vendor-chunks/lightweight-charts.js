"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/lightweight-charts";
exports.ids = ["vendor-chunks/lightweight-charts"];
exports.modules = {

/***/ "(ssr)/./node_modules/lightweight-charts/dist/lightweight-charts.production.mjs":
/*!********************************************************************************!*\
  !*** ./node_modules/lightweight-charts/dist/lightweight-charts.production.mjs ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ColorType: () => (/* binding */ In),\n/* harmony export */   CrosshairMode: () => (/* binding */ at),\n/* harmony export */   LastPriceAnimationMode: () => (/* binding */ Bn),\n/* harmony export */   LineStyle: () => (/* binding */ d),\n/* harmony export */   LineType: () => (/* binding */ c),\n/* harmony export */   MismatchDirection: () => (/* binding */ Li),\n/* harmony export */   PriceLineSource: () => (/* binding */ An),\n/* harmony export */   PriceScaleMode: () => (/* binding */ pn),\n/* harmony export */   TickMarkType: () => (/* binding */ zn),\n/* harmony export */   TrackingModeExitMode: () => (/* binding */ On),\n/* harmony export */   createChart: () => (/* binding */ Ve),\n/* harmony export */   createChartEx: () => (/* binding */ De),\n/* harmony export */   customSeriesDefaultOptions: () => (/* binding */ Be),\n/* harmony export */   defaultHorzScaleBehavior: () => (/* binding */ Oe),\n/* harmony export */   isBusinessDay: () => (/* binding */ En),\n/* harmony export */   isUTCTimestamp: () => (/* binding */ Nn),\n/* harmony export */   version: () => (/* binding */ Ae)\n/* harmony export */ });\n/* harmony import */ var fancy_canvas__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fancy-canvas */ \"(ssr)/./node_modules/fancy-canvas/index.mjs\");\n/*!\n * @license\n * TradingView Lightweight Chartsâ„¢ v4.2.3\n * Copyright (c) 2025 TradingView, Inc.\n * Licensed under Apache License 2.0 https://www.apache.org/licenses/LICENSE-2.0\n */ \nconst e = {\n    upColor: \"#26a69a\",\n    downColor: \"#ef5350\",\n    wickVisible: !0,\n    borderVisible: !0,\n    borderColor: \"#378658\",\n    borderUpColor: \"#26a69a\",\n    borderDownColor: \"#ef5350\",\n    wickColor: \"#737375\",\n    wickUpColor: \"#26a69a\",\n    wickDownColor: \"#ef5350\"\n}, r = {\n    upColor: \"#26a69a\",\n    downColor: \"#ef5350\",\n    openVisible: !0,\n    thinBars: !0\n}, h = {\n    color: \"#2196f3\",\n    lineStyle: 0,\n    lineWidth: 3,\n    lineType: 0,\n    lineVisible: !0,\n    crosshairMarkerVisible: !0,\n    crosshairMarkerRadius: 4,\n    crosshairMarkerBorderColor: \"\",\n    crosshairMarkerBorderWidth: 2,\n    crosshairMarkerBackgroundColor: \"\",\n    lastPriceAnimation: 0,\n    pointMarkersVisible: !1\n}, l = {\n    topColor: \"rgba( 46, 220, 135, 0.4)\",\n    bottomColor: \"rgba( 40, 221, 100, 0)\",\n    invertFilledArea: !1,\n    lineColor: \"#33D778\",\n    lineStyle: 0,\n    lineWidth: 3,\n    lineType: 0,\n    lineVisible: !0,\n    crosshairMarkerVisible: !0,\n    crosshairMarkerRadius: 4,\n    crosshairMarkerBorderColor: \"\",\n    crosshairMarkerBorderWidth: 2,\n    crosshairMarkerBackgroundColor: \"\",\n    lastPriceAnimation: 0,\n    pointMarkersVisible: !1\n}, a = {\n    baseValue: {\n        type: \"price\",\n        price: 0\n    },\n    topFillColor1: \"rgba(38, 166, 154, 0.28)\",\n    topFillColor2: \"rgba(38, 166, 154, 0.05)\",\n    topLineColor: \"rgba(38, 166, 154, 1)\",\n    bottomFillColor1: \"rgba(239, 83, 80, 0.05)\",\n    bottomFillColor2: \"rgba(239, 83, 80, 0.28)\",\n    bottomLineColor: \"rgba(239, 83, 80, 1)\",\n    lineWidth: 3,\n    lineStyle: 0,\n    lineType: 0,\n    lineVisible: !0,\n    crosshairMarkerVisible: !0,\n    crosshairMarkerRadius: 4,\n    crosshairMarkerBorderColor: \"\",\n    crosshairMarkerBorderWidth: 2,\n    crosshairMarkerBackgroundColor: \"\",\n    lastPriceAnimation: 0,\n    pointMarkersVisible: !1\n}, o = {\n    color: \"#26a69a\",\n    base: 0\n}, _ = {\n    color: \"#2196f3\"\n}, u = {\n    title: \"\",\n    visible: !0,\n    lastValueVisible: !0,\n    priceLineVisible: !0,\n    priceLineSource: 0,\n    priceLineWidth: 1,\n    priceLineColor: \"\",\n    priceLineStyle: 2,\n    baseLineVisible: !0,\n    baseLineWidth: 1,\n    baseLineColor: \"#B2B5BE\",\n    baseLineStyle: 0,\n    priceFormat: {\n        type: \"price\",\n        precision: 2,\n        minMove: .01\n    }\n};\nvar c, d;\nfunction f(t, i) {\n    const n = {\n        0: [],\n        1: [\n            t.lineWidth,\n            t.lineWidth\n        ],\n        2: [\n            2 * t.lineWidth,\n            2 * t.lineWidth\n        ],\n        3: [\n            6 * t.lineWidth,\n            6 * t.lineWidth\n        ],\n        4: [\n            t.lineWidth,\n            4 * t.lineWidth\n        ]\n    }[i];\n    t.setLineDash(n);\n}\nfunction v(t, i, n, s) {\n    t.beginPath();\n    const e = t.lineWidth % 2 ? .5 : 0;\n    t.moveTo(n, i + e), t.lineTo(s, i + e), t.stroke();\n}\nfunction p(t, i) {\n    if (!t) throw new Error(\"Assertion failed\" + (i ? \": \" + i : \"\"));\n}\nfunction m(t) {\n    if (void 0 === t) throw new Error(\"Value is undefined\");\n    return t;\n}\nfunction b(t) {\n    if (null === t) throw new Error(\"Value is null\");\n    return t;\n}\nfunction w(t) {\n    return b(m(t));\n}\n!function(t) {\n    t[t.Simple = 0] = \"Simple\", t[t.WithSteps = 1] = \"WithSteps\", t[t.Curved = 2] = \"Curved\";\n}(c || (c = {})), function(t) {\n    t[t.Solid = 0] = \"Solid\", t[t.Dotted = 1] = \"Dotted\", t[t.Dashed = 2] = \"Dashed\", t[t.LargeDashed = 3] = \"LargeDashed\", t[t.SparseDotted = 4] = \"SparseDotted\";\n}(d || (d = {}));\nconst g = {\n    khaki: \"#f0e68c\",\n    azure: \"#f0ffff\",\n    aliceblue: \"#f0f8ff\",\n    ghostwhite: \"#f8f8ff\",\n    gold: \"#ffd700\",\n    goldenrod: \"#daa520\",\n    gainsboro: \"#dcdcdc\",\n    gray: \"#808080\",\n    green: \"#008000\",\n    honeydew: \"#f0fff0\",\n    floralwhite: \"#fffaf0\",\n    lightblue: \"#add8e6\",\n    lightcoral: \"#f08080\",\n    lemonchiffon: \"#fffacd\",\n    hotpink: \"#ff69b4\",\n    lightyellow: \"#ffffe0\",\n    greenyellow: \"#adff2f\",\n    lightgoldenrodyellow: \"#fafad2\",\n    limegreen: \"#32cd32\",\n    linen: \"#faf0e6\",\n    lightcyan: \"#e0ffff\",\n    magenta: \"#f0f\",\n    maroon: \"#800000\",\n    olive: \"#808000\",\n    orange: \"#ffa500\",\n    oldlace: \"#fdf5e6\",\n    mediumblue: \"#0000cd\",\n    transparent: \"#0000\",\n    lime: \"#0f0\",\n    lightpink: \"#ffb6c1\",\n    mistyrose: \"#ffe4e1\",\n    moccasin: \"#ffe4b5\",\n    midnightblue: \"#191970\",\n    orchid: \"#da70d6\",\n    mediumorchid: \"#ba55d3\",\n    mediumturquoise: \"#48d1cc\",\n    orangered: \"#ff4500\",\n    royalblue: \"#4169e1\",\n    powderblue: \"#b0e0e6\",\n    red: \"#f00\",\n    coral: \"#ff7f50\",\n    turquoise: \"#40e0d0\",\n    white: \"#fff\",\n    whitesmoke: \"#f5f5f5\",\n    wheat: \"#f5deb3\",\n    teal: \"#008080\",\n    steelblue: \"#4682b4\",\n    bisque: \"#ffe4c4\",\n    aquamarine: \"#7fffd4\",\n    aqua: \"#0ff\",\n    sienna: \"#a0522d\",\n    silver: \"#c0c0c0\",\n    springgreen: \"#00ff7f\",\n    antiquewhite: \"#faebd7\",\n    burlywood: \"#deb887\",\n    brown: \"#a52a2a\",\n    beige: \"#f5f5dc\",\n    chocolate: \"#d2691e\",\n    chartreuse: \"#7fff00\",\n    cornflowerblue: \"#6495ed\",\n    cornsilk: \"#fff8dc\",\n    crimson: \"#dc143c\",\n    cadetblue: \"#5f9ea0\",\n    tomato: \"#ff6347\",\n    fuchsia: \"#f0f\",\n    blue: \"#00f\",\n    salmon: \"#fa8072\",\n    blanchedalmond: \"#ffebcd\",\n    slateblue: \"#6a5acd\",\n    slategray: \"#708090\",\n    thistle: \"#d8bfd8\",\n    tan: \"#d2b48c\",\n    cyan: \"#0ff\",\n    darkblue: \"#00008b\",\n    darkcyan: \"#008b8b\",\n    darkgoldenrod: \"#b8860b\",\n    darkgray: \"#a9a9a9\",\n    blueviolet: \"#8a2be2\",\n    black: \"#000\",\n    darkmagenta: \"#8b008b\",\n    darkslateblue: \"#483d8b\",\n    darkkhaki: \"#bdb76b\",\n    darkorchid: \"#9932cc\",\n    darkorange: \"#ff8c00\",\n    darkgreen: \"#006400\",\n    darkred: \"#8b0000\",\n    dodgerblue: \"#1e90ff\",\n    darkslategray: \"#2f4f4f\",\n    dimgray: \"#696969\",\n    deepskyblue: \"#00bfff\",\n    firebrick: \"#b22222\",\n    forestgreen: \"#228b22\",\n    indigo: \"#4b0082\",\n    ivory: \"#fffff0\",\n    lavenderblush: \"#fff0f5\",\n    feldspar: \"#d19275\",\n    indianred: \"#cd5c5c\",\n    lightgreen: \"#90ee90\",\n    lightgrey: \"#d3d3d3\",\n    lightskyblue: \"#87cefa\",\n    lightslategray: \"#789\",\n    lightslateblue: \"#8470ff\",\n    snow: \"#fffafa\",\n    lightseagreen: \"#20b2aa\",\n    lightsalmon: \"#ffa07a\",\n    darksalmon: \"#e9967a\",\n    darkviolet: \"#9400d3\",\n    mediumpurple: \"#9370d8\",\n    mediumaquamarine: \"#66cdaa\",\n    skyblue: \"#87ceeb\",\n    lavender: \"#e6e6fa\",\n    lightsteelblue: \"#b0c4de\",\n    mediumvioletred: \"#c71585\",\n    mintcream: \"#f5fffa\",\n    navajowhite: \"#ffdead\",\n    navy: \"#000080\",\n    olivedrab: \"#6b8e23\",\n    palevioletred: \"#d87093\",\n    violetred: \"#d02090\",\n    yellow: \"#ff0\",\n    yellowgreen: \"#9acd32\",\n    lawngreen: \"#7cfc00\",\n    pink: \"#ffc0cb\",\n    paleturquoise: \"#afeeee\",\n    palegoldenrod: \"#eee8aa\",\n    darkolivegreen: \"#556b2f\",\n    darkseagreen: \"#8fbc8f\",\n    darkturquoise: \"#00ced1\",\n    peachpuff: \"#ffdab9\",\n    deeppink: \"#ff1493\",\n    violet: \"#ee82ee\",\n    palegreen: \"#98fb98\",\n    mediumseagreen: \"#3cb371\",\n    peru: \"#cd853f\",\n    saddlebrown: \"#8b4513\",\n    sandybrown: \"#f4a460\",\n    rosybrown: \"#bc8f8f\",\n    purple: \"#800080\",\n    seagreen: \"#2e8b57\",\n    seashell: \"#fff5ee\",\n    papayawhip: \"#ffefd5\",\n    mediumslateblue: \"#7b68ee\",\n    plum: \"#dda0dd\",\n    mediumspringgreen: \"#00fa9a\"\n};\nfunction M(t) {\n    return t < 0 ? 0 : t > 255 ? 255 : Math.round(t) || 0;\n}\nfunction x(t) {\n    return t <= 0 || t > 1 ? Math.min(Math.max(t, 0), 1) : Math.round(1e4 * t) / 1e4;\n}\nconst S = /^#([0-9a-f])([0-9a-f])([0-9a-f])([0-9a-f])?$/i, k = /^#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})?$/i, y = /^rgb\\(\\s*(-?\\d{1,10})\\s*,\\s*(-?\\d{1,10})\\s*,\\s*(-?\\d{1,10})\\s*\\)$/, C = /^rgba\\(\\s*(-?\\d{1,10})\\s*,\\s*(-?\\d{1,10})\\s*,\\s*(-?\\d{1,10})\\s*,\\s*(-?\\d*\\.?\\d+)\\s*\\)$/;\nfunction T(t) {\n    (t = t.toLowerCase()) in g && (t = g[t]);\n    {\n        const i = C.exec(t) || y.exec(t);\n        if (i) return [\n            M(parseInt(i[1], 10)),\n            M(parseInt(i[2], 10)),\n            M(parseInt(i[3], 10)),\n            x(i.length < 5 ? 1 : parseFloat(i[4]))\n        ];\n    }\n    {\n        const i = k.exec(t);\n        if (i) return [\n            M(parseInt(i[1], 16)),\n            M(parseInt(i[2], 16)),\n            M(parseInt(i[3], 16)),\n            1\n        ];\n    }\n    {\n        const i = S.exec(t);\n        if (i) return [\n            M(17 * parseInt(i[1], 16)),\n            M(17 * parseInt(i[2], 16)),\n            M(17 * parseInt(i[3], 16)),\n            1\n        ];\n    }\n    throw new Error(`Cannot parse color: ${t}`);\n}\nfunction P(t) {\n    return .199 * t[0] + .687 * t[1] + .114 * t[2];\n}\nfunction R(t) {\n    const i = T(t);\n    return {\n        t: `rgb(${i[0]}, ${i[1]}, ${i[2]})`,\n        i: P(i) > 160 ? \"black\" : \"white\"\n    };\n}\nclass D {\n    constructor(){\n        this.h = [];\n    }\n    l(t, i, n) {\n        const s = {\n            o: t,\n            _: i,\n            u: !0 === n\n        };\n        this.h.push(s);\n    }\n    v(t) {\n        const i = this.h.findIndex((i)=>t === i.o);\n        i > -1 && this.h.splice(i, 1);\n    }\n    p(t) {\n        this.h = this.h.filter((i)=>i._ !== t);\n    }\n    m(t, i, n) {\n        const s = [\n            ...this.h\n        ];\n        this.h = this.h.filter((t)=>!t.u), s.forEach((s)=>s.o(t, i, n));\n    }\n    M() {\n        return this.h.length > 0;\n    }\n    S() {\n        this.h = [];\n    }\n}\nfunction V(t, ...i) {\n    for (const n of i)for(const i in n)void 0 !== n[i] && Object.prototype.hasOwnProperty.call(n, i) && ![\n        \"__proto__\",\n        \"constructor\",\n        \"prototype\"\n    ].includes(i) && (\"object\" != typeof n[i] || void 0 === t[i] || Array.isArray(n[i]) ? t[i] = n[i] : V(t[i], n[i]));\n    return t;\n}\nfunction O(t) {\n    return \"number\" == typeof t && isFinite(t);\n}\nfunction B(t) {\n    return \"number\" == typeof t && t % 1 == 0;\n}\nfunction A(t) {\n    return \"string\" == typeof t;\n}\nfunction I(t) {\n    return \"boolean\" == typeof t;\n}\nfunction z(t) {\n    const i = t;\n    if (!i || \"object\" != typeof i) return i;\n    let n, s, e;\n    for(s in n = Array.isArray(i) ? [] : {}, i)i.hasOwnProperty(s) && (e = i[s], n[s] = e && \"object\" == typeof e ? z(e) : e);\n    return n;\n}\nfunction L(t) {\n    return null !== t;\n}\nfunction E(t) {\n    return null === t ? void 0 : t;\n}\nconst N = \"-apple-system, BlinkMacSystemFont, 'Trebuchet MS', Roboto, Ubuntu, sans-serif\";\nfunction F(t, i, n) {\n    return void 0 === i && (i = N), `${n = void 0 !== n ? `${n} ` : \"\"}${t}px ${i}`;\n}\nclass W {\n    constructor(t){\n        this.k = {\n            C: 1,\n            T: 5,\n            P: NaN,\n            R: \"\",\n            D: \"\",\n            V: \"\",\n            O: \"\",\n            B: 0,\n            A: 0,\n            I: 0,\n            L: 0,\n            N: 0\n        }, this.F = t;\n    }\n    W() {\n        const t = this.k, i = this.j(), n = this.H();\n        return t.P === i && t.D === n || (t.P = i, t.D = n, t.R = F(i, n), t.L = 2.5 / 12 * i, t.B = t.L, t.A = i / 12 * t.T, t.I = i / 12 * t.T, t.N = 0), t.V = this.$(), t.O = this.U(), this.k;\n    }\n    $() {\n        return this.F.W().layout.textColor;\n    }\n    U() {\n        return this.F.q();\n    }\n    j() {\n        return this.F.W().layout.fontSize;\n    }\n    H() {\n        return this.F.W().layout.fontFamily;\n    }\n}\nclass j {\n    constructor(){\n        this.Y = [];\n    }\n    Z(t) {\n        this.Y = t;\n    }\n    X(t, i, n) {\n        this.Y.forEach((s)=>{\n            s.X(t, i, n);\n        });\n    }\n}\nclass H {\n    X(t, i, n) {\n        t.useBitmapCoordinateSpace((t)=>this.K(t, i, n));\n    }\n}\nclass $ extends H {\n    constructor(){\n        super(...arguments), this.G = null;\n    }\n    J(t) {\n        this.G = t;\n    }\n    K({ context: t, horizontalPixelRatio: i, verticalPixelRatio: n }) {\n        if (null === this.G || null === this.G.tt) return;\n        const s = this.G.tt, e = this.G, r = Math.max(1, Math.floor(i)) % 2 / 2, h = (h)=>{\n            t.beginPath();\n            for(let l = s.to - 1; l >= s.from; --l){\n                const s = e.it[l], a = Math.round(s.nt * i) + r, o = s.st * n, _ = h * n + r;\n                t.moveTo(a, o), t.arc(a, o, _, 0, 2 * Math.PI);\n            }\n            t.fill();\n        };\n        e.et > 0 && (t.fillStyle = e.rt, h(e.ht + e.et)), t.fillStyle = e.lt, h(e.ht);\n    }\n}\nfunction U() {\n    return {\n        it: [\n            {\n                nt: 0,\n                st: 0,\n                ot: 0,\n                _t: 0\n            }\n        ],\n        lt: \"\",\n        rt: \"\",\n        ht: 0,\n        et: 0,\n        tt: null\n    };\n}\nconst q = {\n    from: 0,\n    to: 1\n};\nclass Y {\n    constructor(t, i){\n        this.ut = new j, this.ct = [], this.dt = [], this.ft = !0, this.F = t, this.vt = i, this.ut.Z(this.ct);\n    }\n    bt(t) {\n        const i = this.F.wt();\n        i.length !== this.ct.length && (this.dt = i.map(U), this.ct = this.dt.map((t)=>{\n            const i = new $;\n            return i.J(t), i;\n        }), this.ut.Z(this.ct)), this.ft = !0;\n    }\n    gt() {\n        return this.ft && (this.Mt(), this.ft = !1), this.ut;\n    }\n    Mt() {\n        const t = 2 === this.vt.W().mode, i = this.F.wt(), n = this.vt.xt(), s = this.F.St();\n        i.forEach((i, e)=>{\n            var r;\n            const h = this.dt[e], l = i.kt(n);\n            if (t || null === l || !i.yt()) return void (h.tt = null);\n            const a = b(i.Ct());\n            h.lt = l.Tt, h.ht = l.ht, h.et = l.Pt, h.it[0]._t = l._t, h.it[0].st = i.Dt().Rt(l._t, a.Vt), h.rt = null !== (r = l.Ot) && void 0 !== r ? r : this.F.Bt(h.it[0].st / i.Dt().At()), h.it[0].ot = n, h.it[0].nt = s.It(n), h.tt = q;\n        });\n    }\n}\nclass Z extends H {\n    constructor(t){\n        super(), this.zt = t;\n    }\n    K({ context: t, bitmapSize: i, horizontalPixelRatio: n, verticalPixelRatio: s }) {\n        if (null === this.zt) return;\n        const e = this.zt.Lt.yt, r = this.zt.Et.yt;\n        if (!e && !r) return;\n        const h = Math.round(this.zt.nt * n), l = Math.round(this.zt.st * s);\n        t.lineCap = \"butt\", e && h >= 0 && (t.lineWidth = Math.floor(this.zt.Lt.et * n), t.strokeStyle = this.zt.Lt.V, t.fillStyle = this.zt.Lt.V, f(t, this.zt.Lt.Nt), function(t, i, n, s) {\n            t.beginPath();\n            const e = t.lineWidth % 2 ? .5 : 0;\n            t.moveTo(i + e, n), t.lineTo(i + e, s), t.stroke();\n        }(t, h, 0, i.height)), r && l >= 0 && (t.lineWidth = Math.floor(this.zt.Et.et * s), t.strokeStyle = this.zt.Et.V, t.fillStyle = this.zt.Et.V, f(t, this.zt.Et.Nt), v(t, l, 0, i.width));\n    }\n}\nclass X {\n    constructor(t){\n        this.ft = !0, this.Ft = {\n            Lt: {\n                et: 1,\n                Nt: 0,\n                V: \"\",\n                yt: !1\n            },\n            Et: {\n                et: 1,\n                Nt: 0,\n                V: \"\",\n                yt: !1\n            },\n            nt: 0,\n            st: 0\n        }, this.Wt = new Z(this.Ft), this.jt = t;\n    }\n    bt() {\n        this.ft = !0;\n    }\n    gt() {\n        return this.ft && (this.Mt(), this.ft = !1), this.Wt;\n    }\n    Mt() {\n        const t = this.jt.yt(), i = b(this.jt.Ht()), n = i.$t().W().crosshair, s = this.Ft;\n        if (2 === n.mode) return s.Et.yt = !1, void (s.Lt.yt = !1);\n        s.Et.yt = t && this.jt.Ut(i), s.Lt.yt = t && this.jt.qt(), s.Et.et = n.horzLine.width, s.Et.Nt = n.horzLine.style, s.Et.V = n.horzLine.color, s.Lt.et = n.vertLine.width, s.Lt.Nt = n.vertLine.style, s.Lt.V = n.vertLine.color, s.nt = this.jt.Yt(), s.st = this.jt.Zt();\n    }\n}\nfunction K(t, i, n, s, e, r) {\n    t.fillRect(i + r, n, s - 2 * r, r), t.fillRect(i + r, n + e - r, s - 2 * r, r), t.fillRect(i, n, r, e), t.fillRect(i + s - r, n, r, e);\n}\nfunction G(t, i, n, s, e, r) {\n    t.save(), t.globalCompositeOperation = \"copy\", t.fillStyle = r, t.fillRect(i, n, s, e), t.restore();\n}\nfunction J(t, i, n, s, e, r) {\n    t.beginPath(), t.roundRect ? t.roundRect(i, n, s, e, r) : (t.lineTo(i + s - r[1], n), 0 !== r[1] && t.arcTo(i + s, n, i + s, n + r[1], r[1]), t.lineTo(i + s, n + e - r[2]), 0 !== r[2] && t.arcTo(i + s, n + e, i + s - r[2], n + e, r[2]), t.lineTo(i + r[3], n + e), 0 !== r[3] && t.arcTo(i, n + e, i, n + e - r[3], r[3]), t.lineTo(i, n + r[0]), 0 !== r[0] && t.arcTo(i, n, i + r[0], n, r[0]));\n}\nfunction Q(t, i, n, s, e, r, h = 0, l = [\n    0,\n    0,\n    0,\n    0\n], a = \"\") {\n    if (t.save(), !h || !a || a === r) return J(t, i, n, s, e, l), t.fillStyle = r, t.fill(), void t.restore();\n    const o = h / 2;\n    var _;\n    J(t, i + o, n + o, s - h, e - h, (_ = -o, l.map((t)=>0 === t ? t : t + _))), \"transparent\" !== r && (t.fillStyle = r, t.fill()), \"transparent\" !== a && (t.lineWidth = h, t.strokeStyle = a, t.closePath(), t.stroke()), t.restore();\n}\nfunction tt(t, i, n, s, e, r, h) {\n    t.save(), t.globalCompositeOperation = \"copy\";\n    const l = t.createLinearGradient(0, 0, 0, e);\n    l.addColorStop(0, r), l.addColorStop(1, h), t.fillStyle = l, t.fillRect(i, n, s, e), t.restore();\n}\nclass it {\n    constructor(t, i){\n        this.J(t, i);\n    }\n    J(t, i) {\n        this.zt = t, this.Xt = i;\n    }\n    At(t, i) {\n        return this.zt.yt ? t.P + t.L + t.B : 0;\n    }\n    X(t, i, n, s) {\n        if (!this.zt.yt || 0 === this.zt.Kt.length) return;\n        const e = this.zt.V, r = this.Xt.t, h = t.useBitmapCoordinateSpace((t)=>{\n            const h = t.context;\n            h.font = i.R;\n            const l = this.Gt(t, i, n, s), a = l.Jt;\n            return l.Qt ? Q(h, a.ti, a.ii, a.ni, a.si, r, a.ei, [\n                a.ht,\n                0,\n                0,\n                a.ht\n            ], r) : Q(h, a.ri, a.ii, a.ni, a.si, r, a.ei, [\n                0,\n                a.ht,\n                a.ht,\n                0\n            ], r), this.zt.hi && (h.fillStyle = e, h.fillRect(a.ri, a.li, a.ai - a.ri, a.oi)), this.zt._i && (h.fillStyle = i.O, h.fillRect(l.Qt ? a.ui - a.ei : 0, a.ii, a.ei, a.ci - a.ii)), l;\n        });\n        t.useMediaCoordinateSpace(({ context: t })=>{\n            const n = h.di;\n            t.font = i.R, t.textAlign = h.Qt ? \"right\" : \"left\", t.textBaseline = \"middle\", t.fillStyle = e, t.fillText(this.zt.Kt, n.fi, (n.ii + n.ci) / 2 + n.pi);\n        });\n    }\n    Gt(t, i, n, s) {\n        var e;\n        const { context: r, bitmapSize: h, mediaSize: l, horizontalPixelRatio: a, verticalPixelRatio: o } = t, _ = this.zt.hi || !this.zt.mi ? i.T : 0, u = this.zt.bi ? i.C : 0, c = i.L + this.Xt.wi, d = i.B + this.Xt.gi, f = i.A, v = i.I, p = this.zt.Kt, m = i.P, b = n.Mi(r, p), w = Math.ceil(n.xi(r, p)), g = m + c + d, M = i.C + f + v + w + _, x = Math.max(1, Math.floor(o));\n        let S = Math.round(g * o);\n        S % 2 != x % 2 && (S += 1);\n        const k = u > 0 ? Math.max(1, Math.floor(u * a)) : 0, y = Math.round(M * a), C = Math.round(_ * a), T = null !== (e = this.Xt.Si) && void 0 !== e ? e : this.Xt.ki, P = Math.round(T * o) - Math.floor(.5 * o), R = Math.floor(P + x / 2 - S / 2), D = R + S, V = \"right\" === s, O = V ? l.width - u : u, B = V ? h.width - k : k;\n        let A, I, z;\n        return V ? (A = B - y, I = B - C, z = O - _ - f - u) : (A = B + y, I = B + C, z = O + _ + f), {\n            Qt: V,\n            Jt: {\n                ii: R,\n                li: P,\n                ci: D,\n                ni: y,\n                si: S,\n                ht: 2 * a,\n                ei: k,\n                ti: A,\n                ri: B,\n                ai: I,\n                oi: x,\n                ui: h.width\n            },\n            di: {\n                ii: R / o,\n                ci: D / o,\n                fi: z,\n                pi: b\n            }\n        };\n    }\n}\nclass nt {\n    constructor(t){\n        this.yi = {\n            ki: 0,\n            t: \"#000\",\n            gi: 0,\n            wi: 0\n        }, this.Ci = {\n            Kt: \"\",\n            yt: !1,\n            hi: !0,\n            mi: !1,\n            Ot: \"\",\n            V: \"#FFF\",\n            _i: !1,\n            bi: !1\n        }, this.Ti = {\n            Kt: \"\",\n            yt: !1,\n            hi: !1,\n            mi: !0,\n            Ot: \"\",\n            V: \"#FFF\",\n            _i: !0,\n            bi: !0\n        }, this.ft = !0, this.Pi = new (t || it)(this.Ci, this.yi), this.Ri = new (t || it)(this.Ti, this.yi);\n    }\n    Kt() {\n        return this.Di(), this.Ci.Kt;\n    }\n    ki() {\n        return this.Di(), this.yi.ki;\n    }\n    bt() {\n        this.ft = !0;\n    }\n    At(t, i = !1) {\n        return Math.max(this.Pi.At(t, i), this.Ri.At(t, i));\n    }\n    Vi() {\n        return this.yi.Si || 0;\n    }\n    Oi(t) {\n        this.yi.Si = t;\n    }\n    Bi() {\n        return this.Di(), this.Ci.yt || this.Ti.yt;\n    }\n    Ai() {\n        return this.Di(), this.Ci.yt;\n    }\n    gt(t) {\n        return this.Di(), this.Ci.hi = this.Ci.hi && t.W().ticksVisible, this.Ti.hi = this.Ti.hi && t.W().ticksVisible, this.Pi.J(this.Ci, this.yi), this.Ri.J(this.Ti, this.yi), this.Pi;\n    }\n    Ii() {\n        return this.Di(), this.Pi.J(this.Ci, this.yi), this.Ri.J(this.Ti, this.yi), this.Ri;\n    }\n    Di() {\n        this.ft && (this.Ci.hi = !0, this.Ti.hi = !1, this.zi(this.Ci, this.Ti, this.yi));\n    }\n}\nclass st extends nt {\n    constructor(t, i, n){\n        super(), this.jt = t, this.Li = i, this.Ei = n;\n    }\n    zi(t, i, n) {\n        if (t.yt = !1, 2 === this.jt.W().mode) return;\n        const s = this.jt.W().horzLine;\n        if (!s.labelVisible) return;\n        const e = this.Li.Ct();\n        if (!this.jt.yt() || this.Li.Ni() || null === e) return;\n        const r = R(s.labelBackgroundColor);\n        n.t = r.t, t.V = r.i;\n        const h = 2 / 12 * this.Li.P();\n        n.wi = h, n.gi = h;\n        const l = this.Ei(this.Li);\n        n.ki = l.ki, t.Kt = this.Li.Fi(l._t, e), t.yt = !0;\n    }\n}\nconst et = /[1-9]/g;\nclass rt {\n    constructor(){\n        this.zt = null;\n    }\n    J(t) {\n        this.zt = t;\n    }\n    X(t, i) {\n        if (null === this.zt || !1 === this.zt.yt || 0 === this.zt.Kt.length) return;\n        const n = t.useMediaCoordinateSpace(({ context: t })=>(t.font = i.R, Math.round(i.Wi.xi(t, b(this.zt).Kt, et))));\n        if (n <= 0) return;\n        const s = i.ji, e = n + 2 * s, r = e / 2, h = this.zt.Hi;\n        let l = this.zt.ki, a = Math.floor(l - r) + .5;\n        a < 0 ? (l += Math.abs(0 - a), a = Math.floor(l - r) + .5) : a + e > h && (l -= Math.abs(h - (a + e)), a = Math.floor(l - r) + .5);\n        const o = a + e, _ = Math.ceil(0 + i.C + i.T + i.L + i.P + i.B);\n        t.useBitmapCoordinateSpace(({ context: t, horizontalPixelRatio: n, verticalPixelRatio: s })=>{\n            const e = b(this.zt);\n            t.fillStyle = e.t;\n            const r = Math.round(a * n), h = Math.round(0 * s), l = Math.round(o * n), u = Math.round(_ * s), c = Math.round(2 * n);\n            if (t.beginPath(), t.moveTo(r, h), t.lineTo(r, u - c), t.arcTo(r, u, r + c, u, c), t.lineTo(l - c, u), t.arcTo(l, u, l, u - c, c), t.lineTo(l, h), t.fill(), e.hi) {\n                const r = Math.round(e.ki * n), l = h, a = Math.round((l + i.T) * s);\n                t.fillStyle = e.V;\n                const o = Math.max(1, Math.floor(n)), _ = Math.floor(.5 * n);\n                t.fillRect(r - _, l, o, a - l);\n            }\n        }), t.useMediaCoordinateSpace(({ context: t })=>{\n            const n = b(this.zt), e = 0 + i.C + i.T + i.L + i.P / 2;\n            t.font = i.R, t.textAlign = \"left\", t.textBaseline = \"middle\", t.fillStyle = n.V;\n            const r = i.Wi.Mi(t, \"Apr0\");\n            t.translate(a + s, e + r), t.fillText(n.Kt, 0, 0);\n        });\n    }\n}\nclass ht {\n    constructor(t, i, n){\n        this.ft = !0, this.Wt = new rt, this.Ft = {\n            yt: !1,\n            t: \"#4c525e\",\n            V: \"white\",\n            Kt: \"\",\n            Hi: 0,\n            ki: NaN,\n            hi: !0\n        }, this.vt = t, this.$i = i, this.Ei = n;\n    }\n    bt() {\n        this.ft = !0;\n    }\n    gt() {\n        return this.ft && (this.Mt(), this.ft = !1), this.Wt.J(this.Ft), this.Wt;\n    }\n    Mt() {\n        const t = this.Ft;\n        if (t.yt = !1, 2 === this.vt.W().mode) return;\n        const i = this.vt.W().vertLine;\n        if (!i.labelVisible) return;\n        const n = this.$i.St();\n        if (n.Ni()) return;\n        t.Hi = n.Hi();\n        const s = this.Ei();\n        if (null === s) return;\n        t.ki = s.ki;\n        const e = n.Ui(this.vt.xt());\n        t.Kt = n.qi(b(e)), t.yt = !0;\n        const r = R(i.labelBackgroundColor);\n        t.t = r.t, t.V = r.i, t.hi = n.W().ticksVisible;\n    }\n}\nclass lt {\n    constructor(){\n        this.Yi = null, this.Zi = 0;\n    }\n    Xi() {\n        return this.Zi;\n    }\n    Ki(t) {\n        this.Zi = t;\n    }\n    Dt() {\n        return this.Yi;\n    }\n    Gi(t) {\n        this.Yi = t;\n    }\n    Ji(t) {\n        return [];\n    }\n    Qi() {\n        return [];\n    }\n    yt() {\n        return !0;\n    }\n}\nvar at;\n!function(t) {\n    t[t.Normal = 0] = \"Normal\", t[t.Magnet = 1] = \"Magnet\", t[t.Hidden = 2] = \"Hidden\";\n}(at || (at = {}));\nclass ot extends lt {\n    constructor(t, i){\n        super(), this.tn = null, this.nn = NaN, this.sn = 0, this.en = !0, this.rn = new Map, this.hn = !1, this.ln = NaN, this.an = NaN, this._n = NaN, this.un = NaN, this.$i = t, this.cn = i, this.dn = new Y(t, this);\n        this.fn = ((t, i)=>(n)=>{\n                const s = i(), e = t();\n                if (n === b(this.tn).vn()) return {\n                    _t: e,\n                    ki: s\n                };\n                {\n                    const t = b(n.Ct());\n                    return {\n                        _t: n.pn(s, t),\n                        ki: s\n                    };\n                }\n            })(()=>this.nn, ()=>this.an);\n        const n = ((t, i)=>()=>{\n                const n = this.$i.St().mn(t()), s = i();\n                return n && Number.isFinite(s) ? {\n                    ot: n,\n                    ki: s\n                } : null;\n            })(()=>this.sn, ()=>this.Yt());\n        this.bn = new ht(this, t, n), this.wn = new X(this);\n    }\n    W() {\n        return this.cn;\n    }\n    gn(t, i) {\n        this._n = t, this.un = i;\n    }\n    Mn() {\n        this._n = NaN, this.un = NaN;\n    }\n    xn() {\n        return this._n;\n    }\n    Sn() {\n        return this.un;\n    }\n    kn(t, i, n) {\n        this.hn || (this.hn = !0), this.en = !0, this.yn(t, i, n);\n    }\n    xt() {\n        return this.sn;\n    }\n    Yt() {\n        return this.ln;\n    }\n    Zt() {\n        return this.an;\n    }\n    yt() {\n        return this.en;\n    }\n    Cn() {\n        this.en = !1, this.Tn(), this.nn = NaN, this.ln = NaN, this.an = NaN, this.tn = null, this.Mn();\n    }\n    Pn(t) {\n        return null !== this.tn ? [\n            this.wn,\n            this.dn\n        ] : [];\n    }\n    Ut(t) {\n        return t === this.tn && this.cn.horzLine.visible;\n    }\n    qt() {\n        return this.cn.vertLine.visible;\n    }\n    Rn(t, i) {\n        this.en && this.tn === t || this.rn.clear();\n        const n = [];\n        return this.tn === t && n.push(this.Dn(this.rn, i, this.fn)), n;\n    }\n    Qi() {\n        return this.en ? [\n            this.bn\n        ] : [];\n    }\n    Ht() {\n        return this.tn;\n    }\n    Vn() {\n        this.wn.bt(), this.rn.forEach((t)=>t.bt()), this.bn.bt(), this.dn.bt();\n    }\n    On(t) {\n        return t && !t.vn().Ni() ? t.vn() : null;\n    }\n    yn(t, i, n) {\n        this.Bn(t, i, n) && this.Vn();\n    }\n    Bn(t, i, n) {\n        const s = this.ln, e = this.an, r = this.nn, h = this.sn, l = this.tn, a = this.On(n);\n        this.sn = t, this.ln = isNaN(t) ? NaN : this.$i.St().It(t), this.tn = n;\n        const o = null !== a ? a.Ct() : null;\n        return null !== a && null !== o ? (this.nn = i, this.an = a.Rt(i, o)) : (this.nn = NaN, this.an = NaN), s !== this.ln || e !== this.an || h !== this.sn || r !== this.nn || l !== this.tn;\n    }\n    Tn() {\n        const t = this.$i.wt().map((t)=>t.In().An()).filter(L), i = 0 === t.length ? null : Math.max(...t);\n        this.sn = null !== i ? i : NaN;\n    }\n    Dn(t, i, n) {\n        let s = t.get(i);\n        return void 0 === s && (s = new st(this, i, n), t.set(i, s)), s;\n    }\n}\nfunction _t(t) {\n    return \"left\" === t || \"right\" === t;\n}\nclass ut {\n    constructor(t){\n        this.zn = new Map, this.Ln = [], this.En = t;\n    }\n    Nn(t, i) {\n        const n = function(t, i) {\n            return void 0 === t ? i : {\n                Fn: Math.max(t.Fn, i.Fn),\n                Wn: t.Wn || i.Wn\n            };\n        }(this.zn.get(t), i);\n        this.zn.set(t, n);\n    }\n    jn() {\n        return this.En;\n    }\n    Hn(t) {\n        const i = this.zn.get(t);\n        return void 0 === i ? {\n            Fn: this.En\n        } : {\n            Fn: Math.max(this.En, i.Fn),\n            Wn: i.Wn\n        };\n    }\n    $n() {\n        this.Un(), this.Ln = [\n            {\n                qn: 0\n            }\n        ];\n    }\n    Yn(t) {\n        this.Un(), this.Ln = [\n            {\n                qn: 1,\n                Vt: t\n            }\n        ];\n    }\n    Zn(t) {\n        this.Xn(), this.Ln.push({\n            qn: 5,\n            Vt: t\n        });\n    }\n    Un() {\n        this.Xn(), this.Ln.push({\n            qn: 6\n        });\n    }\n    Kn() {\n        this.Un(), this.Ln = [\n            {\n                qn: 4\n            }\n        ];\n    }\n    Gn(t) {\n        this.Un(), this.Ln.push({\n            qn: 2,\n            Vt: t\n        });\n    }\n    Jn(t) {\n        this.Un(), this.Ln.push({\n            qn: 3,\n            Vt: t\n        });\n    }\n    Qn() {\n        return this.Ln;\n    }\n    ts(t) {\n        for (const i of t.Ln)this.ns(i);\n        this.En = Math.max(this.En, t.En), t.zn.forEach((t, i)=>{\n            this.Nn(i, t);\n        });\n    }\n    static ss() {\n        return new ut(2);\n    }\n    static es() {\n        return new ut(3);\n    }\n    ns(t) {\n        switch(t.qn){\n            case 0:\n                this.$n();\n                break;\n            case 1:\n                this.Yn(t.Vt);\n                break;\n            case 2:\n                this.Gn(t.Vt);\n                break;\n            case 3:\n                this.Jn(t.Vt);\n                break;\n            case 4:\n                this.Kn();\n                break;\n            case 5:\n                this.Zn(t.Vt);\n                break;\n            case 6:\n                this.Xn();\n        }\n    }\n    Xn() {\n        const t = this.Ln.findIndex((t)=>5 === t.qn);\n        -1 !== t && this.Ln.splice(t, 1);\n    }\n}\nconst ct = \".\";\nfunction dt(t, i) {\n    if (!O(t)) return \"n/a\";\n    if (!B(i)) throw new TypeError(\"invalid length\");\n    if (i < 0 || i > 16) throw new TypeError(\"invalid length\");\n    if (0 === i) return t.toString();\n    return (\"0000000000000000\" + t.toString()).slice(-i);\n}\nclass ft {\n    constructor(t, i){\n        if (i || (i = 1), O(t) && B(t) || (t = 100), t < 0) throw new TypeError(\"invalid base\");\n        this.Li = t, this.rs = i, this.hs();\n    }\n    format(t) {\n        const i = t < 0 ? \"âˆ’\" : \"\";\n        return t = Math.abs(t), i + this.ls(t);\n    }\n    hs() {\n        if (this._s = 0, this.Li > 0 && this.rs > 0) {\n            let t = this.Li;\n            for(; t > 1;)t /= 10, this._s++;\n        }\n    }\n    ls(t) {\n        const i = this.Li / this.rs;\n        let n = Math.floor(t), s = \"\";\n        const e = void 0 !== this._s ? this._s : NaN;\n        if (i > 1) {\n            let r = +(Math.round(t * i) - n * i).toFixed(this._s);\n            r >= i && (r -= i, n += 1), s = ct + dt(+r.toFixed(this._s) * this.rs, e);\n        } else n = Math.round(n * i) / i, e > 0 && (s = ct + dt(0, e));\n        return n.toFixed(0) + s;\n    }\n}\nclass vt extends ft {\n    constructor(t = 100){\n        super(t);\n    }\n    format(t) {\n        return `${super.format(t)}%`;\n    }\n}\nclass pt {\n    constructor(t){\n        this.us = t;\n    }\n    format(t) {\n        let i = \"\";\n        return t < 0 && (i = \"-\", t = -t), t < 995 ? i + this.cs(t) : t < 999995 ? i + this.cs(t / 1e3) + \"K\" : t < 999999995 ? (t = 1e3 * Math.round(t / 1e3), i + this.cs(t / 1e6) + \"M\") : (t = 1e6 * Math.round(t / 1e6), i + this.cs(t / 1e9) + \"B\");\n    }\n    cs(t) {\n        let i;\n        const n = Math.pow(10, this.us);\n        return i = (t = Math.round(t * n) / n) >= 1e-15 && t < 1 ? t.toFixed(this.us).replace(/\\.?0+$/, \"\") : String(t), i.replace(/(\\.[1-9]*)0+$/, (t, i)=>i);\n    }\n}\nfunction mt(t, i, n, s, e, r, h) {\n    if (0 === i.length || s.from >= i.length || s.to <= 0) return;\n    const { context: l, horizontalPixelRatio: a, verticalPixelRatio: o } = t, _ = i[s.from];\n    let u = r(t, _), c = _;\n    if (s.to - s.from < 2) {\n        const i = e / 2;\n        l.beginPath();\n        const n = {\n            nt: _.nt - i,\n            st: _.st\n        }, s = {\n            nt: _.nt + i,\n            st: _.st\n        };\n        l.moveTo(n.nt * a, n.st * o), l.lineTo(s.nt * a, s.st * o), h(t, u, n, s);\n    } else {\n        const e = (i, n)=>{\n            h(t, u, c, n), l.beginPath(), u = i, c = n;\n        };\n        let d = c;\n        l.beginPath(), l.moveTo(_.nt * a, _.st * o);\n        for(let h = s.from + 1; h < s.to; ++h){\n            d = i[h];\n            const s = r(t, d);\n            switch(n){\n                case 0:\n                    l.lineTo(d.nt * a, d.st * o);\n                    break;\n                case 1:\n                    l.lineTo(d.nt * a, i[h - 1].st * o), s !== u && (e(s, d), l.lineTo(d.nt * a, i[h - 1].st * o)), l.lineTo(d.nt * a, d.st * o);\n                    break;\n                case 2:\n                    {\n                        const [t, n] = Mt(i, h - 1, h);\n                        l.bezierCurveTo(t.nt * a, t.st * o, n.nt * a, n.st * o, d.nt * a, d.st * o);\n                        break;\n                    }\n            }\n            1 !== n && s !== u && (e(s, d), l.moveTo(d.nt * a, d.st * o));\n        }\n        (c !== d || c === d && 1 === n) && h(t, u, c, d);\n    }\n}\nconst bt = 6;\nfunction wt(t, i) {\n    return {\n        nt: t.nt - i.nt,\n        st: t.st - i.st\n    };\n}\nfunction gt(t, i) {\n    return {\n        nt: t.nt / i,\n        st: t.st / i\n    };\n}\nfunction Mt(t, i, n) {\n    const s = Math.max(0, i - 1), e = Math.min(t.length - 1, n + 1);\n    var r, h;\n    return [\n        (r = t[i], h = gt(wt(t[n], t[s]), bt), {\n            nt: r.nt + h.nt,\n            st: r.st + h.st\n        }),\n        wt(t[n], gt(wt(t[e], t[i]), bt))\n    ];\n}\nfunction xt(t, i, n, s, e) {\n    const { context: r, horizontalPixelRatio: h, verticalPixelRatio: l } = i;\n    r.lineTo(e.nt * h, t * l), r.lineTo(s.nt * h, t * l), r.closePath(), r.fillStyle = n, r.fill();\n}\nclass St extends H {\n    constructor(){\n        super(...arguments), this.G = null;\n    }\n    J(t) {\n        this.G = t;\n    }\n    K(t) {\n        var i;\n        if (null === this.G) return;\n        const { it: n, tt: s, ds: e, et: r, Nt: h, fs: l } = this.G, a = null !== (i = this.G.vs) && void 0 !== i ? i : this.G.ps ? 0 : t.mediaSize.height;\n        if (null === s) return;\n        const o = t.context;\n        o.lineCap = \"butt\", o.lineJoin = \"round\", o.lineWidth = r, f(o, h), o.lineWidth = 1, mt(t, n, l, s, e, this.bs.bind(this), xt.bind(null, a));\n    }\n}\nfunction kt(t, i, n) {\n    return Math.min(Math.max(t, i), n);\n}\nfunction yt(t, i, n) {\n    return i - t <= n;\n}\nfunction Ct(t) {\n    const i = Math.ceil(t);\n    return i % 2 == 0 ? i - 1 : i;\n}\nclass Tt {\n    ws(t, i) {\n        const n = this.gs, { Ms: s, xs: e, Ss: r, ks: h, ys: l, vs: a } = i;\n        if (void 0 === this.Cs || void 0 === n || n.Ms !== s || n.xs !== e || n.Ss !== r || n.ks !== h || n.vs !== a || n.ys !== l) {\n            const n = t.context.createLinearGradient(0, 0, 0, l);\n            if (n.addColorStop(0, s), null != a) {\n                const i = kt(a * t.verticalPixelRatio / l, 0, 1);\n                n.addColorStop(i, e), n.addColorStop(i, r);\n            }\n            n.addColorStop(1, h), this.Cs = n, this.gs = i;\n        }\n        return this.Cs;\n    }\n}\nclass Pt extends St {\n    constructor(){\n        super(...arguments), this.Ts = new Tt;\n    }\n    bs(t, i) {\n        return this.Ts.ws(t, {\n            Ms: i.Ps,\n            xs: \"\",\n            Ss: \"\",\n            ks: i.Rs,\n            ys: t.bitmapSize.height\n        });\n    }\n}\nfunction Rt(t, i) {\n    const n = t.context;\n    n.strokeStyle = i, n.stroke();\n}\nclass Dt extends H {\n    constructor(){\n        super(...arguments), this.G = null;\n    }\n    J(t) {\n        this.G = t;\n    }\n    K(t) {\n        if (null === this.G) return;\n        const { it: i, tt: n, ds: s, fs: e, et: r, Nt: h, Ds: l } = this.G;\n        if (null === n) return;\n        const a = t.context;\n        a.lineCap = \"butt\", a.lineWidth = r * t.verticalPixelRatio, f(a, h), a.lineJoin = \"round\";\n        const o = this.Vs.bind(this);\n        void 0 !== e && mt(t, i, e, n, s, o, Rt), l && function(t, i, n, s, e) {\n            const { horizontalPixelRatio: r, verticalPixelRatio: h, context: l } = t;\n            let a = null;\n            const o = Math.max(1, Math.floor(r)) % 2 / 2, _ = n * h + o;\n            for(let n = s.to - 1; n >= s.from; --n){\n                const s = i[n];\n                if (s) {\n                    const i = e(t, s);\n                    i !== a && (l.beginPath(), null !== a && l.fill(), l.fillStyle = i, a = i);\n                    const n = Math.round(s.nt * r) + o, u = s.st * h;\n                    l.moveTo(n, u), l.arc(n, u, _, 0, 2 * Math.PI);\n                }\n            }\n            l.fill();\n        }(t, i, l, n, o);\n    }\n}\nclass Vt extends Dt {\n    Vs(t, i) {\n        return i.lt;\n    }\n}\nfunction Ot(t, i, n, s, e = 0, r = i.length) {\n    let h = r - e;\n    for(; 0 < h;){\n        const r = h >> 1, l = e + r;\n        s(i[l], n) === t ? (e = l + 1, h -= r + 1) : h = r;\n    }\n    return e;\n}\nconst Bt = Ot.bind(null, !0), At = Ot.bind(null, !1);\nfunction It(t, i) {\n    return t.ot < i;\n}\nfunction zt(t, i) {\n    return i < t.ot;\n}\nfunction Lt(t, i, n) {\n    const s = i.Os(), e = i.ui(), r = Bt(t, s, It), h = At(t, e, zt);\n    if (!n) return {\n        from: r,\n        to: h\n    };\n    let l = r, a = h;\n    return r > 0 && r < t.length && t[r].ot >= s && (l = r - 1), h > 0 && h < t.length && t[h - 1].ot <= e && (a = h + 1), {\n        from: l,\n        to: a\n    };\n}\nclass Et {\n    constructor(t, i, n){\n        this.Bs = !0, this.As = !0, this.Is = !0, this.zs = [], this.Ls = null, this.Es = t, this.Ns = i, this.Fs = n;\n    }\n    bt(t) {\n        this.Bs = !0, \"data\" === t && (this.As = !0), \"options\" === t && (this.Is = !0);\n    }\n    gt() {\n        return this.Es.yt() ? (this.Ws(), null === this.Ls ? null : this.js) : null;\n    }\n    Hs() {\n        this.zs = this.zs.map((t)=>Object.assign(Object.assign({}, t), this.Es.Us().$s(t.ot)));\n    }\n    qs() {\n        this.Ls = null;\n    }\n    Ws() {\n        this.As && (this.Ys(), this.As = !1), this.Is && (this.Hs(), this.Is = !1), this.Bs && (this.Zs(), this.Bs = !1);\n    }\n    Zs() {\n        const t = this.Es.Dt(), i = this.Ns.St();\n        if (this.qs(), i.Ni() || t.Ni()) return;\n        const n = i.Xs();\n        if (null === n) return;\n        if (0 === this.Es.In().Ks()) return;\n        const s = this.Es.Ct();\n        null !== s && (this.Ls = Lt(this.zs, n, this.Fs), this.Gs(t, i, s.Vt), this.Js());\n    }\n}\nclass Nt extends Et {\n    constructor(t, i){\n        super(t, i, !0);\n    }\n    Gs(t, i, n) {\n        i.Qs(this.zs, E(this.Ls)), t.te(this.zs, n, E(this.Ls));\n    }\n    ie(t, i) {\n        return {\n            ot: t,\n            _t: i,\n            nt: NaN,\n            st: NaN\n        };\n    }\n    Ys() {\n        const t = this.Es.Us();\n        this.zs = this.Es.In().ne().map((i)=>{\n            const n = i.Vt[3];\n            return this.se(i.ee, n, t);\n        });\n    }\n}\nclass Ft extends Nt {\n    constructor(t, i){\n        super(t, i), this.js = new j, this.re = new Pt, this.he = new Vt, this.js.Z([\n            this.re,\n            this.he\n        ]);\n    }\n    se(t, i, n) {\n        return Object.assign(Object.assign({}, this.ie(t, i)), n.$s(t));\n    }\n    Js() {\n        const t = this.Es.W();\n        this.re.J({\n            fs: t.lineType,\n            it: this.zs,\n            Nt: t.lineStyle,\n            et: t.lineWidth,\n            vs: null,\n            ps: t.invertFilledArea,\n            tt: this.Ls,\n            ds: this.Ns.St().le()\n        }), this.he.J({\n            fs: t.lineVisible ? t.lineType : void 0,\n            it: this.zs,\n            Nt: t.lineStyle,\n            et: t.lineWidth,\n            tt: this.Ls,\n            ds: this.Ns.St().le(),\n            Ds: t.pointMarkersVisible ? t.pointMarkersRadius || t.lineWidth / 2 + 2 : void 0\n        });\n    }\n}\nclass Wt extends H {\n    constructor(){\n        super(...arguments), this.zt = null, this.ae = 0, this.oe = 0;\n    }\n    J(t) {\n        this.zt = t;\n    }\n    K({ context: t, horizontalPixelRatio: i, verticalPixelRatio: n }) {\n        if (null === this.zt || 0 === this.zt.In.length || null === this.zt.tt) return;\n        if (this.ae = this._e(i), this.ae >= 2) {\n            Math.max(1, Math.floor(i)) % 2 != this.ae % 2 && this.ae--;\n        }\n        this.oe = this.zt.ue ? Math.min(this.ae, Math.floor(i)) : this.ae;\n        let s = null;\n        const e = this.oe <= this.ae && this.zt.le >= Math.floor(1.5 * i);\n        for(let r = this.zt.tt.from; r < this.zt.tt.to; ++r){\n            const h = this.zt.In[r];\n            s !== h.ce && (t.fillStyle = h.ce, s = h.ce);\n            const l = Math.floor(.5 * this.oe), a = Math.round(h.nt * i), o = a - l, _ = this.oe, u = o + _ - 1, c = Math.min(h.de, h.fe), d = Math.max(h.de, h.fe), f = Math.round(c * n) - l, v = Math.round(d * n) + l, p = Math.max(v - f, this.oe);\n            t.fillRect(o, f, _, p);\n            const m = Math.ceil(1.5 * this.ae);\n            if (e) {\n                if (this.zt.ve) {\n                    const i = a - m;\n                    let s = Math.max(f, Math.round(h.pe * n) - l), e = s + _ - 1;\n                    e > f + p - 1 && (e = f + p - 1, s = e - _ + 1), t.fillRect(i, s, o - i, e - s + 1);\n                }\n                const i = a + m;\n                let s = Math.max(f, Math.round(h.me * n) - l), e = s + _ - 1;\n                e > f + p - 1 && (e = f + p - 1, s = e - _ + 1), t.fillRect(u + 1, s, i - u, e - s + 1);\n            }\n        }\n    }\n    _e(t) {\n        const i = Math.floor(t);\n        return Math.max(i, Math.floor(function(t, i) {\n            return Math.floor(.3 * t * i);\n        }(b(this.zt).le, t)));\n    }\n}\nclass jt extends Et {\n    constructor(t, i){\n        super(t, i, !1);\n    }\n    Gs(t, i, n) {\n        i.Qs(this.zs, E(this.Ls)), t.be(this.zs, n, E(this.Ls));\n    }\n    we(t, i, n) {\n        return {\n            ot: t,\n            ge: i.Vt[0],\n            Me: i.Vt[1],\n            xe: i.Vt[2],\n            Se: i.Vt[3],\n            nt: NaN,\n            pe: NaN,\n            de: NaN,\n            fe: NaN,\n            me: NaN\n        };\n    }\n    Ys() {\n        const t = this.Es.Us();\n        this.zs = this.Es.In().ne().map((i)=>this.se(i.ee, i, t));\n    }\n}\nclass Ht extends jt {\n    constructor(){\n        super(...arguments), this.js = new Wt;\n    }\n    se(t, i, n) {\n        return Object.assign(Object.assign({}, this.we(t, i, n)), n.$s(t));\n    }\n    Js() {\n        const t = this.Es.W();\n        this.js.J({\n            In: this.zs,\n            le: this.Ns.St().le(),\n            ve: t.openVisible,\n            ue: t.thinBars,\n            tt: this.Ls\n        });\n    }\n}\nclass $t extends St {\n    constructor(){\n        super(...arguments), this.Ts = new Tt;\n    }\n    bs(t, i) {\n        const n = this.G;\n        return this.Ts.ws(t, {\n            Ms: i.ke,\n            xs: i.ye,\n            Ss: i.Ce,\n            ks: i.Te,\n            ys: t.bitmapSize.height,\n            vs: n.vs\n        });\n    }\n}\nclass Ut extends Dt {\n    constructor(){\n        super(...arguments), this.Pe = new Tt;\n    }\n    Vs(t, i) {\n        const n = this.G;\n        return this.Pe.ws(t, {\n            Ms: i.Re,\n            xs: i.Re,\n            Ss: i.De,\n            ks: i.De,\n            ys: t.bitmapSize.height,\n            vs: n.vs\n        });\n    }\n}\nclass qt extends Nt {\n    constructor(t, i){\n        super(t, i), this.js = new j, this.Ve = new $t, this.Oe = new Ut, this.js.Z([\n            this.Ve,\n            this.Oe\n        ]);\n    }\n    se(t, i, n) {\n        return Object.assign(Object.assign({}, this.ie(t, i)), n.$s(t));\n    }\n    Js() {\n        const t = this.Es.Ct();\n        if (null === t) return;\n        const i = this.Es.W(), n = this.Es.Dt().Rt(i.baseValue.price, t.Vt), s = this.Ns.St().le();\n        this.Ve.J({\n            it: this.zs,\n            et: i.lineWidth,\n            Nt: i.lineStyle,\n            fs: i.lineType,\n            vs: n,\n            ps: !1,\n            tt: this.Ls,\n            ds: s\n        }), this.Oe.J({\n            it: this.zs,\n            et: i.lineWidth,\n            Nt: i.lineStyle,\n            fs: i.lineVisible ? i.lineType : void 0,\n            Ds: i.pointMarkersVisible ? i.pointMarkersRadius || i.lineWidth / 2 + 2 : void 0,\n            vs: n,\n            tt: this.Ls,\n            ds: s\n        });\n    }\n}\nclass Yt extends H {\n    constructor(){\n        super(...arguments), this.zt = null, this.ae = 0;\n    }\n    J(t) {\n        this.zt = t;\n    }\n    K(t) {\n        if (null === this.zt || 0 === this.zt.In.length || null === this.zt.tt) return;\n        const { horizontalPixelRatio: i } = t;\n        if (this.ae = function(t, i) {\n            if (t >= 2.5 && t <= 4) return Math.floor(3 * i);\n            const n = 1 - .2 * Math.atan(Math.max(4, t) - 4) / (.5 * Math.PI), s = Math.floor(t * n * i), e = Math.floor(t * i), r = Math.min(s, e);\n            return Math.max(Math.floor(i), r);\n        }(this.zt.le, i), this.ae >= 2) {\n            Math.floor(i) % 2 != this.ae % 2 && this.ae--;\n        }\n        const n = this.zt.In;\n        this.zt.Be && this.Ae(t, n, this.zt.tt), this.zt._i && this.Ie(t, n, this.zt.tt);\n        const s = this.ze(i);\n        (!this.zt._i || this.ae > 2 * s) && this.Le(t, n, this.zt.tt);\n    }\n    Ae(t, i, n) {\n        if (null === this.zt) return;\n        const { context: s, horizontalPixelRatio: e, verticalPixelRatio: r } = t;\n        let h = \"\", l = Math.min(Math.floor(e), Math.floor(this.zt.le * e));\n        l = Math.max(Math.floor(e), Math.min(l, this.ae));\n        const a = Math.floor(.5 * l);\n        let o = null;\n        for(let t = n.from; t < n.to; t++){\n            const n = i[t];\n            n.Ee !== h && (s.fillStyle = n.Ee, h = n.Ee);\n            const _ = Math.round(Math.min(n.pe, n.me) * r), u = Math.round(Math.max(n.pe, n.me) * r), c = Math.round(n.de * r), d = Math.round(n.fe * r);\n            let f = Math.round(e * n.nt) - a;\n            const v = f + l - 1;\n            null !== o && (f = Math.max(o + 1, f), f = Math.min(f, v));\n            const p = v - f + 1;\n            s.fillRect(f, c, p, _ - c), s.fillRect(f, u + 1, p, d - u), o = v;\n        }\n    }\n    ze(t) {\n        let i = Math.floor(1 * t);\n        this.ae <= 2 * i && (i = Math.floor(.5 * (this.ae - 1)));\n        const n = Math.max(Math.floor(t), i);\n        return this.ae <= 2 * n ? Math.max(Math.floor(t), Math.floor(1 * t)) : n;\n    }\n    Ie(t, i, n) {\n        if (null === this.zt) return;\n        const { context: s, horizontalPixelRatio: e, verticalPixelRatio: r } = t;\n        let h = \"\";\n        const l = this.ze(e);\n        let a = null;\n        for(let t = n.from; t < n.to; t++){\n            const n = i[t];\n            n.Ne !== h && (s.fillStyle = n.Ne, h = n.Ne);\n            let o = Math.round(n.nt * e) - Math.floor(.5 * this.ae);\n            const _ = o + this.ae - 1, u = Math.round(Math.min(n.pe, n.me) * r), c = Math.round(Math.max(n.pe, n.me) * r);\n            if (null !== a && (o = Math.max(a + 1, o), o = Math.min(o, _)), this.zt.le * e > 2 * l) K(s, o, u, _ - o + 1, c - u + 1, l);\n            else {\n                const t = _ - o + 1;\n                s.fillRect(o, u, t, c - u + 1);\n            }\n            a = _;\n        }\n    }\n    Le(t, i, n) {\n        if (null === this.zt) return;\n        const { context: s, horizontalPixelRatio: e, verticalPixelRatio: r } = t;\n        let h = \"\";\n        const l = this.ze(e);\n        for(let t = n.from; t < n.to; t++){\n            const n = i[t];\n            let a = Math.round(Math.min(n.pe, n.me) * r), o = Math.round(Math.max(n.pe, n.me) * r), _ = Math.round(n.nt * e) - Math.floor(.5 * this.ae), u = _ + this.ae - 1;\n            if (n.ce !== h) {\n                const t = n.ce;\n                s.fillStyle = t, h = t;\n            }\n            this.zt._i && (_ += l, a += l, u -= l, o -= l), a > o || s.fillRect(_, a, u - _ + 1, o - a + 1);\n        }\n    }\n}\nclass Zt extends jt {\n    constructor(){\n        super(...arguments), this.js = new Yt;\n    }\n    se(t, i, n) {\n        return Object.assign(Object.assign({}, this.we(t, i, n)), n.$s(t));\n    }\n    Js() {\n        const t = this.Es.W();\n        this.js.J({\n            In: this.zs,\n            le: this.Ns.St().le(),\n            Be: t.wickVisible,\n            _i: t.borderVisible,\n            tt: this.Ls\n        });\n    }\n}\nclass Xt {\n    constructor(t, i){\n        this.Fe = t, this.Li = i;\n    }\n    X(t, i, n) {\n        this.Fe.draw(t, this.Li, i, n);\n    }\n}\nclass Kt extends Et {\n    constructor(t, i, n){\n        super(t, i, !1), this.wn = n, this.js = new Xt(this.wn.renderer(), (i)=>{\n            const n = t.Ct();\n            return null === n ? null : t.Dt().Rt(i, n.Vt);\n        });\n    }\n    We(t) {\n        return this.wn.priceValueBuilder(t);\n    }\n    je(t) {\n        return this.wn.isWhitespace(t);\n    }\n    Ys() {\n        const t = this.Es.Us();\n        this.zs = this.Es.In().ne().map((i)=>Object.assign(Object.assign({\n                ot: i.ee,\n                nt: NaN\n            }, t.$s(i.ee)), {\n                He: i.$e\n            }));\n    }\n    Gs(t, i) {\n        i.Qs(this.zs, E(this.Ls));\n    }\n    Js() {\n        this.wn.update({\n            bars: this.zs.map(Gt),\n            barSpacing: this.Ns.St().le(),\n            visibleRange: this.Ls\n        }, this.Es.W());\n    }\n}\nfunction Gt(t) {\n    return {\n        x: t.nt,\n        time: t.ot,\n        originalData: t.He,\n        barColor: t.ce\n    };\n}\nclass Jt extends H {\n    constructor(){\n        super(...arguments), this.zt = null, this.Ue = [];\n    }\n    J(t) {\n        this.zt = t, this.Ue = [];\n    }\n    K({ context: t, horizontalPixelRatio: i, verticalPixelRatio: n }) {\n        if (null === this.zt || 0 === this.zt.it.length || null === this.zt.tt) return;\n        this.Ue.length || this.qe(i);\n        const s = Math.max(1, Math.floor(n)), e = Math.round(this.zt.Ye * n) - Math.floor(s / 2), r = e + s;\n        for(let i = this.zt.tt.from; i < this.zt.tt.to; i++){\n            const h = this.zt.it[i], l = this.Ue[i - this.zt.tt.from], a = Math.round(h.st * n);\n            let o, _;\n            t.fillStyle = h.ce, a <= e ? (o = a, _ = r) : (o = e, _ = a - Math.floor(s / 2) + s), t.fillRect(l.Os, o, l.ui - l.Os + 1, _ - o);\n        }\n    }\n    qe(t) {\n        if (null === this.zt || 0 === this.zt.it.length || null === this.zt.tt) return void (this.Ue = []);\n        const i = Math.ceil(this.zt.le * t) <= 1 ? 0 : Math.max(1, Math.floor(t)), n = Math.round(this.zt.le * t) - i;\n        this.Ue = new Array(this.zt.tt.to - this.zt.tt.from);\n        for(let i = this.zt.tt.from; i < this.zt.tt.to; i++){\n            const s = this.zt.it[i], e = Math.round(s.nt * t);\n            let r, h;\n            if (n % 2) {\n                const t = (n - 1) / 2;\n                r = e - t, h = e + t;\n            } else {\n                const t = n / 2;\n                r = e - t, h = e + t - 1;\n            }\n            this.Ue[i - this.zt.tt.from] = {\n                Os: r,\n                ui: h,\n                Ze: e,\n                Xe: s.nt * t,\n                ot: s.ot\n            };\n        }\n        for(let t = this.zt.tt.from + 1; t < this.zt.tt.to; t++){\n            const n = this.Ue[t - this.zt.tt.from], s = this.Ue[t - this.zt.tt.from - 1];\n            n.ot === s.ot + 1 && n.Os - s.ui !== i + 1 && (s.Ze > s.Xe ? s.ui = n.Os - i - 1 : n.Os = s.ui + i + 1);\n        }\n        let s = Math.ceil(this.zt.le * t);\n        for(let t = this.zt.tt.from; t < this.zt.tt.to; t++){\n            const i = this.Ue[t - this.zt.tt.from];\n            i.ui < i.Os && (i.ui = i.Os);\n            const n = i.ui - i.Os + 1;\n            s = Math.min(n, s);\n        }\n        if (i > 0 && s < 4) for(let t = this.zt.tt.from; t < this.zt.tt.to; t++){\n            const i = this.Ue[t - this.zt.tt.from];\n            i.ui - i.Os + 1 > s && (i.Ze > i.Xe ? i.ui -= 1 : i.Os += 1);\n        }\n    }\n}\nclass Qt extends Nt {\n    constructor(){\n        super(...arguments), this.js = new Jt;\n    }\n    se(t, i, n) {\n        return Object.assign(Object.assign({}, this.ie(t, i)), n.$s(t));\n    }\n    Js() {\n        const t = {\n            it: this.zs,\n            le: this.Ns.St().le(),\n            tt: this.Ls,\n            Ye: this.Es.Dt().Rt(this.Es.W().base, b(this.Es.Ct()).Vt)\n        };\n        this.js.J(t);\n    }\n}\nclass ti extends Nt {\n    constructor(){\n        super(...arguments), this.js = new Vt;\n    }\n    se(t, i, n) {\n        return Object.assign(Object.assign({}, this.ie(t, i)), n.$s(t));\n    }\n    Js() {\n        const t = this.Es.W(), i = {\n            it: this.zs,\n            Nt: t.lineStyle,\n            fs: t.lineVisible ? t.lineType : void 0,\n            et: t.lineWidth,\n            Ds: t.pointMarkersVisible ? t.pointMarkersRadius || t.lineWidth / 2 + 2 : void 0,\n            tt: this.Ls,\n            ds: this.Ns.St().le()\n        };\n        this.js.J(i);\n    }\n}\nconst ii = /[2-9]/g;\nclass ni {\n    constructor(t = 50){\n        this.Ke = 0, this.Ge = 1, this.Je = 1, this.Qe = {}, this.tr = new Map, this.ir = t;\n    }\n    nr() {\n        this.Ke = 0, this.tr.clear(), this.Ge = 1, this.Je = 1, this.Qe = {};\n    }\n    xi(t, i, n) {\n        return this.sr(t, i, n).width;\n    }\n    Mi(t, i, n) {\n        const s = this.sr(t, i, n);\n        return ((s.actualBoundingBoxAscent || 0) - (s.actualBoundingBoxDescent || 0)) / 2;\n    }\n    sr(t, i, n) {\n        const s = n || ii, e = String(i).replace(s, \"0\");\n        if (this.tr.has(e)) return m(this.tr.get(e)).er;\n        if (this.Ke === this.ir) {\n            const t = this.Qe[this.Je];\n            delete this.Qe[this.Je], this.tr.delete(t), this.Je++, this.Ke--;\n        }\n        t.save(), t.textBaseline = \"middle\";\n        const r = t.measureText(e);\n        return t.restore(), 0 === r.width && i.length || (this.tr.set(e, {\n            er: r,\n            rr: this.Ge\n        }), this.Qe[this.Ge] = e, this.Ke++, this.Ge++), r;\n    }\n}\nclass si {\n    constructor(t){\n        this.hr = null, this.k = null, this.lr = \"right\", this.ar = t;\n    }\n    _r(t, i, n) {\n        this.hr = t, this.k = i, this.lr = n;\n    }\n    X(t) {\n        null !== this.k && null !== this.hr && this.hr.X(t, this.k, this.ar, this.lr);\n    }\n}\nclass ei {\n    constructor(t, i, n){\n        this.ur = t, this.ar = new ni(50), this.cr = i, this.F = n, this.j = -1, this.Wt = new si(this.ar);\n    }\n    gt() {\n        const t = this.F.dr(this.cr);\n        if (null === t) return null;\n        const i = t.vr(this.cr) ? t.pr() : this.cr.Dt();\n        if (null === i) return null;\n        const n = t.mr(i);\n        if (\"overlay\" === n) return null;\n        const s = this.F.br();\n        return s.P !== this.j && (this.j = s.P, this.ar.nr()), this.Wt._r(this.ur.Ii(), s, n), this.Wt;\n    }\n}\nclass ri extends H {\n    constructor(){\n        super(...arguments), this.zt = null;\n    }\n    J(t) {\n        this.zt = t;\n    }\n    wr(t, i) {\n        var n;\n        if (!(null === (n = this.zt) || void 0 === n ? void 0 : n.yt)) return null;\n        const { st: s, et: e, gr: r } = this.zt;\n        return i >= s - e - 7 && i <= s + e + 7 ? {\n            Mr: this.zt,\n            gr: r\n        } : null;\n    }\n    K({ context: t, bitmapSize: i, horizontalPixelRatio: n, verticalPixelRatio: s }) {\n        if (null === this.zt) return;\n        if (!1 === this.zt.yt) return;\n        const e = Math.round(this.zt.st * s);\n        e < 0 || e > i.height || (t.lineCap = \"butt\", t.strokeStyle = this.zt.V, t.lineWidth = Math.floor(this.zt.et * n), f(t, this.zt.Nt), v(t, e, 0, i.width));\n    }\n}\nclass hi {\n    constructor(t){\n        this.Sr = {\n            st: 0,\n            V: \"rgba(0, 0, 0, 0)\",\n            et: 1,\n            Nt: 0,\n            yt: !1\n        }, this.kr = new ri, this.ft = !0, this.Es = t, this.Ns = t.$t(), this.kr.J(this.Sr);\n    }\n    bt() {\n        this.ft = !0;\n    }\n    gt() {\n        return this.Es.yt() ? (this.ft && (this.yr(), this.ft = !1), this.kr) : null;\n    }\n}\nclass li extends hi {\n    constructor(t){\n        super(t);\n    }\n    yr() {\n        this.Sr.yt = !1;\n        const t = this.Es.Dt(), i = t.Cr().Cr;\n        if (2 !== i && 3 !== i) return;\n        const n = this.Es.W();\n        if (!n.baseLineVisible || !this.Es.yt()) return;\n        const s = this.Es.Ct();\n        null !== s && (this.Sr.yt = !0, this.Sr.st = t.Rt(s.Vt, s.Vt), this.Sr.V = n.baseLineColor, this.Sr.et = n.baseLineWidth, this.Sr.Nt = n.baseLineStyle);\n    }\n}\nclass ai extends H {\n    constructor(){\n        super(...arguments), this.zt = null;\n    }\n    J(t) {\n        this.zt = t;\n    }\n    $e() {\n        return this.zt;\n    }\n    K({ context: t, horizontalPixelRatio: i, verticalPixelRatio: n }) {\n        const s = this.zt;\n        if (null === s) return;\n        const e = Math.max(1, Math.floor(i)), r = e % 2 / 2, h = Math.round(s.Xe.x * i) + r, l = s.Xe.y * n;\n        t.fillStyle = s.Tr, t.beginPath();\n        const a = Math.max(2, 1.5 * s.Pr) * i;\n        t.arc(h, l, a, 0, 2 * Math.PI, !1), t.fill(), t.fillStyle = s.Rr, t.beginPath(), t.arc(h, l, s.ht * i, 0, 2 * Math.PI, !1), t.fill(), t.lineWidth = e, t.strokeStyle = s.Dr, t.beginPath(), t.arc(h, l, s.ht * i + e / 2, 0, 2 * Math.PI, !1), t.stroke();\n    }\n}\nconst oi = [\n    {\n        Vr: 0,\n        Or: .25,\n        Br: 4,\n        Ar: 10,\n        Ir: .25,\n        zr: 0,\n        Lr: .4,\n        Er: .8\n    },\n    {\n        Vr: .25,\n        Or: .525,\n        Br: 10,\n        Ar: 14,\n        Ir: 0,\n        zr: 0,\n        Lr: .8,\n        Er: 0\n    },\n    {\n        Vr: .525,\n        Or: 1,\n        Br: 14,\n        Ar: 14,\n        Ir: 0,\n        zr: 0,\n        Lr: 0,\n        Er: 0\n    }\n];\nfunction _i(t, i, n, s) {\n    return function(t, i) {\n        if (\"transparent\" === t) return t;\n        const n = T(t), s = n[3];\n        return `rgba(${n[0]}, ${n[1]}, ${n[2]}, ${i * s})`;\n    }(t, n + (s - n) * i);\n}\nfunction ui(t, i) {\n    const n = t % 2600 / 2600;\n    let s;\n    for (const t of oi)if (n >= t.Vr && n <= t.Or) {\n        s = t;\n        break;\n    }\n    p(void 0 !== s, \"Last price animation internal logic error\");\n    const e = (n - s.Vr) / (s.Or - s.Vr);\n    return {\n        Rr: _i(i, e, s.Ir, s.zr),\n        Dr: _i(i, e, s.Lr, s.Er),\n        ht: (r = e, h = s.Br, l = s.Ar, h + (l - h) * r)\n    };\n    var r, h, l;\n}\nclass ci {\n    constructor(t){\n        this.Wt = new ai, this.ft = !0, this.Nr = !0, this.Fr = performance.now(), this.Wr = this.Fr - 1, this.jr = t;\n    }\n    Hr() {\n        this.Wr = this.Fr - 1, this.bt();\n    }\n    $r() {\n        if (this.bt(), 2 === this.jr.W().lastPriceAnimation) {\n            const t = performance.now(), i = this.Wr - t;\n            if (i > 0) return void (i < 650 && (this.Wr += 2600));\n            this.Fr = t, this.Wr = t + 2600;\n        }\n    }\n    bt() {\n        this.ft = !0;\n    }\n    Ur() {\n        this.Nr = !0;\n    }\n    yt() {\n        return 0 !== this.jr.W().lastPriceAnimation;\n    }\n    qr() {\n        switch(this.jr.W().lastPriceAnimation){\n            case 0:\n                return !1;\n            case 1:\n                return !0;\n            case 2:\n                return performance.now() <= this.Wr;\n        }\n    }\n    gt() {\n        return this.ft ? (this.Mt(), this.ft = !1, this.Nr = !1) : this.Nr && (this.Yr(), this.Nr = !1), this.Wt;\n    }\n    Mt() {\n        this.Wt.J(null);\n        const t = this.jr.$t().St(), i = t.Xs(), n = this.jr.Ct();\n        if (null === i || null === n) return;\n        const s = this.jr.Zr(!0);\n        if (s.Xr || !i.Kr(s.ee)) return;\n        const e = {\n            x: t.It(s.ee),\n            y: this.jr.Dt().Rt(s._t, n.Vt)\n        }, r = s.V, h = this.jr.W().lineWidth, l = ui(this.Gr(), r);\n        this.Wt.J({\n            Tr: r,\n            Pr: h,\n            Rr: l.Rr,\n            Dr: l.Dr,\n            ht: l.ht,\n            Xe: e\n        });\n    }\n    Yr() {\n        const t = this.Wt.$e();\n        if (null !== t) {\n            const i = ui(this.Gr(), t.Tr);\n            t.Rr = i.Rr, t.Dr = i.Dr, t.ht = i.ht;\n        }\n    }\n    Gr() {\n        return this.qr() ? performance.now() - this.Fr : 2599;\n    }\n}\nfunction di(t, i) {\n    return Ct(Math.min(Math.max(t, 12), 30) * i);\n}\nfunction fi(t, i) {\n    switch(t){\n        case \"arrowDown\":\n        case \"arrowUp\":\n            return di(i, 1);\n        case \"circle\":\n            return di(i, .8);\n        case \"square\":\n            return di(i, .7);\n    }\n}\nfunction vi(t) {\n    return function(t) {\n        const i = Math.ceil(t);\n        return i % 2 != 0 ? i - 1 : i;\n    }(di(t, 1));\n}\nfunction pi(t) {\n    return Math.max(di(t, .1), 3);\n}\nfunction mi(t, i, n) {\n    return i ? t : n ? Math.ceil(t / 2) : 0;\n}\nfunction bi(t, i, n, s, e) {\n    const r = fi(\"square\", n), h = (r - 1) / 2, l = t - h, a = i - h;\n    return s >= l && s <= l + r && e >= a && e <= a + r;\n}\nfunction wi(t, i, n, s) {\n    const e = (fi(\"arrowUp\", s) - 1) / 2 * n.Jr, r = (Ct(s / 2) - 1) / 2 * n.Jr;\n    i.beginPath(), t ? (i.moveTo(n.nt - e, n.st), i.lineTo(n.nt, n.st - e), i.lineTo(n.nt + e, n.st), i.lineTo(n.nt + r, n.st), i.lineTo(n.nt + r, n.st + e), i.lineTo(n.nt - r, n.st + e), i.lineTo(n.nt - r, n.st)) : (i.moveTo(n.nt - e, n.st), i.lineTo(n.nt, n.st + e), i.lineTo(n.nt + e, n.st), i.lineTo(n.nt + r, n.st), i.lineTo(n.nt + r, n.st - e), i.lineTo(n.nt - r, n.st - e), i.lineTo(n.nt - r, n.st)), i.fill();\n}\nfunction gi(t, i, n, s, e, r) {\n    return bi(i, n, s, e, r);\n}\nclass Mi extends H {\n    constructor(){\n        super(...arguments), this.zt = null, this.ar = new ni, this.j = -1, this.H = \"\", this.Qr = \"\";\n    }\n    J(t) {\n        this.zt = t;\n    }\n    _r(t, i) {\n        this.j === t && this.H === i || (this.j = t, this.H = i, this.Qr = F(t, i), this.ar.nr());\n    }\n    wr(t, i) {\n        if (null === this.zt || null === this.zt.tt) return null;\n        for(let n = this.zt.tt.from; n < this.zt.tt.to; n++){\n            const s = this.zt.it[n];\n            if (Si(s, t, i)) return {\n                Mr: s.th,\n                gr: s.gr\n            };\n        }\n        return null;\n    }\n    K({ context: t, horizontalPixelRatio: i, verticalPixelRatio: n }, s, e) {\n        if (null !== this.zt && null !== this.zt.tt) {\n            t.textBaseline = \"middle\", t.font = this.Qr;\n            for(let s = this.zt.tt.from; s < this.zt.tt.to; s++){\n                const e = this.zt.it[s];\n                void 0 !== e.Kt && (e.Kt.Hi = this.ar.xi(t, e.Kt.ih), e.Kt.At = this.j, e.Kt.nt = e.nt - e.Kt.Hi / 2), xi(e, t, i, n);\n            }\n        }\n    }\n}\nfunction xi(t, i, n, s) {\n    i.fillStyle = t.V, void 0 !== t.Kt && function(t, i, n, s, e, r) {\n        t.save(), t.scale(e, r), t.fillText(i, n, s), t.restore();\n    }(i, t.Kt.ih, t.Kt.nt, t.Kt.st, n, s), function(t, i, n) {\n        if (0 === t.Ks) return;\n        switch(t.nh){\n            case \"arrowDown\":\n                return void wi(!1, i, n, t.Ks);\n            case \"arrowUp\":\n                return void wi(!0, i, n, t.Ks);\n            case \"circle\":\n                return void function(t, i, n) {\n                    const s = (fi(\"circle\", n) - 1) / 2;\n                    t.beginPath(), t.arc(i.nt, i.st, s * i.Jr, 0, 2 * Math.PI, !1), t.fill();\n                }(i, n, t.Ks);\n            case \"square\":\n                return void function(t, i, n) {\n                    const s = fi(\"square\", n), e = (s - 1) * i.Jr / 2, r = i.nt - e, h = i.st - e;\n                    t.fillRect(r, h, s * i.Jr, s * i.Jr);\n                }(i, n, t.Ks);\n        }\n        t.nh;\n    }(t, i, function(t, i, n) {\n        const s = Math.max(1, Math.floor(i)) % 2 / 2;\n        return {\n            nt: Math.round(t.nt * i) + s,\n            st: t.st * n,\n            Jr: i\n        };\n    }(t, n, s));\n}\nfunction Si(t, i, n) {\n    return !(void 0 === t.Kt || !function(t, i, n, s, e, r) {\n        const h = s / 2;\n        return e >= t && e <= t + n && r >= i - h && r <= i + h;\n    }(t.Kt.nt, t.Kt.st, t.Kt.Hi, t.Kt.At, i, n)) || function(t, i, n) {\n        if (0 === t.Ks) return !1;\n        switch(t.nh){\n            case \"arrowDown\":\n            case \"arrowUp\":\n                return gi(0, t.nt, t.st, t.Ks, i, n);\n            case \"circle\":\n                return function(t, i, n, s, e) {\n                    const r = 2 + fi(\"circle\", n) / 2, h = t - s, l = i - e;\n                    return Math.sqrt(h * h + l * l) <= r;\n                }(t.nt, t.st, t.Ks, i, n);\n            case \"square\":\n                return bi(t.nt, t.st, t.Ks, i, n);\n        }\n    }(t, i, n);\n}\nfunction ki(t, i, n, s, e, r, h, l, a) {\n    const o = O(n) ? n : n.Se, _ = O(n) ? n : n.Me, u = O(n) ? n : n.xe, c = O(i.size) ? Math.max(i.size, 0) : 1, d = vi(l.le()) * c, f = d / 2;\n    switch(t.Ks = d, i.position){\n        case \"inBar\":\n            return t.st = h.Rt(o, a), void (void 0 !== t.Kt && (t.Kt.st = t.st + f + r + .6 * e));\n        case \"aboveBar\":\n            return t.st = h.Rt(_, a) - f - s.sh, void 0 !== t.Kt && (t.Kt.st = t.st - f - .6 * e, s.sh += 1.2 * e), void (s.sh += d + r);\n        case \"belowBar\":\n            return t.st = h.Rt(u, a) + f + s.eh, void 0 !== t.Kt && (t.Kt.st = t.st + f + r + .6 * e, s.eh += 1.2 * e), void (s.eh += d + r);\n    }\n    i.position;\n}\nclass yi {\n    constructor(t, i){\n        this.ft = !0, this.rh = !0, this.hh = !0, this.ah = null, this.oh = null, this.Wt = new Mi, this.jr = t, this.$i = i, this.zt = {\n            it: [],\n            tt: null\n        };\n    }\n    bt(t) {\n        this.ft = !0, this.hh = !0, \"data\" === t && (this.rh = !0, this.oh = null);\n    }\n    gt(t) {\n        if (!this.jr.yt()) return null;\n        this.ft && this._h();\n        const i = this.$i.W().layout;\n        return this.Wt._r(i.fontSize, i.fontFamily), this.Wt.J(this.zt), this.Wt;\n    }\n    uh() {\n        if (this.hh) {\n            if (this.jr.dh().length > 0) {\n                const t = this.$i.St().le(), i = pi(t), n = 1.5 * vi(t) + 2 * i, s = this.fh();\n                this.ah = {\n                    above: mi(n, s.aboveBar, s.inBar),\n                    below: mi(n, s.belowBar, s.inBar)\n                };\n            } else this.ah = null;\n            this.hh = !1;\n        }\n        return this.ah;\n    }\n    fh() {\n        return null === this.oh && (this.oh = this.jr.dh().reduce((t, i)=>(t[i.position] || (t[i.position] = !0), t), {\n            inBar: !1,\n            aboveBar: !1,\n            belowBar: !1\n        })), this.oh;\n    }\n    _h() {\n        const t = this.jr.Dt(), i = this.$i.St(), n = this.jr.dh();\n        this.rh && (this.zt.it = n.map((t)=>({\n                ot: t.time,\n                nt: 0,\n                st: 0,\n                Ks: 0,\n                nh: t.shape,\n                V: t.color,\n                th: t.th,\n                gr: t.id,\n                Kt: void 0\n            })), this.rh = !1);\n        const s = this.$i.W().layout;\n        this.zt.tt = null;\n        const e = i.Xs();\n        if (null === e) return;\n        const r = this.jr.Ct();\n        if (null === r) return;\n        if (0 === this.zt.it.length) return;\n        let h = NaN;\n        const l = pi(i.le()), a = {\n            sh: l,\n            eh: l\n        };\n        this.zt.tt = Lt(this.zt.it, e, !0);\n        for(let e = this.zt.tt.from; e < this.zt.tt.to; e++){\n            const o = n[e];\n            o.time !== h && (a.sh = l, a.eh = l, h = o.time);\n            const _ = this.zt.it[e];\n            _.nt = i.It(o.time), void 0 !== o.text && o.text.length > 0 && (_.Kt = {\n                ih: o.text,\n                nt: 0,\n                st: 0,\n                Hi: 0,\n                At: 0\n            });\n            const u = this.jr.ph(o.time);\n            null !== u && ki(_, o, u, a, s.fontSize, l, t, i, r.Vt);\n        }\n        this.ft = !1;\n    }\n}\nclass Ci extends hi {\n    constructor(t){\n        super(t);\n    }\n    yr() {\n        const t = this.Sr;\n        t.yt = !1;\n        const i = this.Es.W();\n        if (!i.priceLineVisible || !this.Es.yt()) return;\n        const n = this.Es.Zr(0 === i.priceLineSource);\n        n.Xr || (t.yt = !0, t.st = n.ki, t.V = this.Es.mh(n.V), t.et = i.priceLineWidth, t.Nt = i.priceLineStyle);\n    }\n}\nclass Ti extends nt {\n    constructor(t){\n        super(), this.jt = t;\n    }\n    zi(t, i, n) {\n        t.yt = !1, i.yt = !1;\n        const s = this.jt;\n        if (!s.yt()) return;\n        const e = s.W(), r = e.lastValueVisible, h = \"\" !== s.bh(), l = 0 === e.seriesLastValueMode, a = s.Zr(!1);\n        if (a.Xr) return;\n        r && (t.Kt = this.wh(a, r, l), t.yt = 0 !== t.Kt.length), (h || l) && (i.Kt = this.gh(a, r, h, l), i.yt = i.Kt.length > 0);\n        const o = s.mh(a.V), _ = R(o);\n        n.t = _.t, n.ki = a.ki, i.Ot = s.$t().Bt(a.ki / s.Dt().At()), t.Ot = o, t.V = _.i, i.V = _.i;\n    }\n    gh(t, i, n, s) {\n        let e = \"\";\n        const r = this.jt.bh();\n        return n && 0 !== r.length && (e += `${r} `), i && s && (e += this.jt.Dt().Mh() ? t.xh : t.Sh), e.trim();\n    }\n    wh(t, i, n) {\n        return i ? n ? this.jt.Dt().Mh() ? t.Sh : t.xh : t.Kt : \"\";\n    }\n}\nfunction Pi(t, i, n, s) {\n    const e = Number.isFinite(i), r = Number.isFinite(n);\n    return e && r ? t(i, n) : e || r ? e ? i : n : s;\n}\nclass Ri {\n    constructor(t, i){\n        this.kh = t, this.yh = i;\n    }\n    Ch(t) {\n        return null !== t && this.kh === t.kh && this.yh === t.yh;\n    }\n    Th() {\n        return new Ri(this.kh, this.yh);\n    }\n    Ph() {\n        return this.kh;\n    }\n    Rh() {\n        return this.yh;\n    }\n    Dh() {\n        return this.yh - this.kh;\n    }\n    Ni() {\n        return this.yh === this.kh || Number.isNaN(this.yh) || Number.isNaN(this.kh);\n    }\n    ts(t) {\n        return null === t ? this : new Ri(Pi(Math.min, this.Ph(), t.Ph(), -1 / 0), Pi(Math.max, this.Rh(), t.Rh(), 1 / 0));\n    }\n    Vh(t) {\n        if (!O(t)) return;\n        if (0 === this.yh - this.kh) return;\n        const i = .5 * (this.yh + this.kh);\n        let n = this.yh - i, s = this.kh - i;\n        n *= t, s *= t, this.yh = i + n, this.kh = i + s;\n    }\n    Oh(t) {\n        O(t) && (this.yh += t, this.kh += t);\n    }\n    Bh() {\n        return {\n            minValue: this.kh,\n            maxValue: this.yh\n        };\n    }\n    static Ah(t) {\n        return null === t ? null : new Ri(t.minValue, t.maxValue);\n    }\n}\nclass Di {\n    constructor(t, i){\n        this.Ih = t, this.zh = i || null;\n    }\n    Lh() {\n        return this.Ih;\n    }\n    Eh() {\n        return this.zh;\n    }\n    Bh() {\n        return null === this.Ih ? null : {\n            priceRange: this.Ih.Bh(),\n            margins: this.zh || void 0\n        };\n    }\n    static Ah(t) {\n        return null === t ? null : new Di(Ri.Ah(t.priceRange), t.margins);\n    }\n}\nclass Vi extends hi {\n    constructor(t, i){\n        super(t), this.Nh = i;\n    }\n    yr() {\n        const t = this.Sr;\n        t.yt = !1;\n        const i = this.Nh.W();\n        if (!this.Es.yt() || !i.lineVisible) return;\n        const n = this.Nh.Fh();\n        null !== n && (t.yt = !0, t.st = n, t.V = i.color, t.et = i.lineWidth, t.Nt = i.lineStyle, t.gr = this.Nh.W().id);\n    }\n}\nclass Oi extends nt {\n    constructor(t, i){\n        super(), this.jr = t, this.Nh = i;\n    }\n    zi(t, i, n) {\n        t.yt = !1, i.yt = !1;\n        const s = this.Nh.W(), e = s.axisLabelVisible, r = \"\" !== s.title, h = this.jr;\n        if (!e || !h.yt()) return;\n        const l = this.Nh.Fh();\n        if (null === l) return;\n        r && (i.Kt = s.title, i.yt = !0), i.Ot = h.$t().Bt(l / h.Dt().At()), t.Kt = this.Wh(s.price), t.yt = !0;\n        const a = R(s.axisLabelColor || s.color);\n        n.t = a.t;\n        const o = s.axisLabelTextColor || a.i;\n        t.V = o, i.V = o, n.ki = l;\n    }\n    Wh(t) {\n        const i = this.jr.Ct();\n        return null === i ? \"\" : this.jr.Dt().Fi(t, i.Vt);\n    }\n}\nclass Bi {\n    constructor(t, i){\n        this.jr = t, this.cn = i, this.jh = new Vi(t, this), this.ur = new Oi(t, this), this.Hh = new ei(this.ur, t, t.$t());\n    }\n    $h(t) {\n        V(this.cn, t), this.bt(), this.jr.$t().Uh();\n    }\n    W() {\n        return this.cn;\n    }\n    qh() {\n        return this.jh;\n    }\n    Yh() {\n        return this.Hh;\n    }\n    Zh() {\n        return this.ur;\n    }\n    bt() {\n        this.jh.bt(), this.ur.bt();\n    }\n    Fh() {\n        const t = this.jr, i = t.Dt();\n        if (t.$t().St().Ni() || i.Ni()) return null;\n        const n = t.Ct();\n        return null === n ? null : i.Rt(this.cn.price, n.Vt);\n    }\n}\nclass Ai extends lt {\n    constructor(t){\n        super(), this.$i = t;\n    }\n    $t() {\n        return this.$i;\n    }\n}\nconst Ii = {\n    Bar: (t, i, n, s)=>{\n        var e;\n        const r = i.upColor, h = i.downColor, l = b(t(n, s)), a = w(l.Vt[0]) <= w(l.Vt[3]);\n        return {\n            ce: null !== (e = l.V) && void 0 !== e ? e : a ? r : h\n        };\n    },\n    Candlestick: (t, i, n, s)=>{\n        var e, r, h;\n        const l = i.upColor, a = i.downColor, o = i.borderUpColor, _ = i.borderDownColor, u = i.wickUpColor, c = i.wickDownColor, d = b(t(n, s)), f = w(d.Vt[0]) <= w(d.Vt[3]);\n        return {\n            ce: null !== (e = d.V) && void 0 !== e ? e : f ? l : a,\n            Ne: null !== (r = d.Ot) && void 0 !== r ? r : f ? o : _,\n            Ee: null !== (h = d.Xh) && void 0 !== h ? h : f ? u : c\n        };\n    },\n    Custom: (t, i, n, s)=>{\n        var e;\n        return {\n            ce: null !== (e = b(t(n, s)).V) && void 0 !== e ? e : i.color\n        };\n    },\n    Area: (t, i, n, s)=>{\n        var e, r, h, l;\n        const a = b(t(n, s));\n        return {\n            ce: null !== (e = a.lt) && void 0 !== e ? e : i.lineColor,\n            lt: null !== (r = a.lt) && void 0 !== r ? r : i.lineColor,\n            Ps: null !== (h = a.Ps) && void 0 !== h ? h : i.topColor,\n            Rs: null !== (l = a.Rs) && void 0 !== l ? l : i.bottomColor\n        };\n    },\n    Baseline: (t, i, n, s)=>{\n        var e, r, h, l, a, o;\n        const _ = b(t(n, s));\n        return {\n            ce: _.Vt[3] >= i.baseValue.price ? i.topLineColor : i.bottomLineColor,\n            Re: null !== (e = _.Re) && void 0 !== e ? e : i.topLineColor,\n            De: null !== (r = _.De) && void 0 !== r ? r : i.bottomLineColor,\n            ke: null !== (h = _.ke) && void 0 !== h ? h : i.topFillColor1,\n            ye: null !== (l = _.ye) && void 0 !== l ? l : i.topFillColor2,\n            Ce: null !== (a = _.Ce) && void 0 !== a ? a : i.bottomFillColor1,\n            Te: null !== (o = _.Te) && void 0 !== o ? o : i.bottomFillColor2\n        };\n    },\n    Line: (t, i, n, s)=>{\n        var e, r;\n        const h = b(t(n, s));\n        return {\n            ce: null !== (e = h.V) && void 0 !== e ? e : i.color,\n            lt: null !== (r = h.V) && void 0 !== r ? r : i.color\n        };\n    },\n    Histogram: (t, i, n, s)=>{\n        var e;\n        return {\n            ce: null !== (e = b(t(n, s)).V) && void 0 !== e ? e : i.color\n        };\n    }\n};\nclass zi {\n    constructor(t){\n        this.Kh = (t, i)=>void 0 !== i ? i.Vt : this.jr.In().Gh(t), this.jr = t, this.Jh = Ii[t.Qh()];\n    }\n    $s(t, i) {\n        return this.Jh(this.Kh, this.jr.W(), t, i);\n    }\n}\nvar Li;\n!function(t) {\n    t[t.NearestLeft = -1] = \"NearestLeft\", t[t.None = 0] = \"None\", t[t.NearestRight = 1] = \"NearestRight\";\n}(Li || (Li = {}));\nconst Ei = 30;\nclass Ni {\n    constructor(){\n        this.tl = [], this.il = new Map, this.nl = new Map;\n    }\n    sl() {\n        return this.Ks() > 0 ? this.tl[this.tl.length - 1] : null;\n    }\n    el() {\n        return this.Ks() > 0 ? this.rl(0) : null;\n    }\n    An() {\n        return this.Ks() > 0 ? this.rl(this.tl.length - 1) : null;\n    }\n    Ks() {\n        return this.tl.length;\n    }\n    Ni() {\n        return 0 === this.Ks();\n    }\n    Kr(t) {\n        return null !== this.hl(t, 0);\n    }\n    Gh(t) {\n        return this.ll(t);\n    }\n    ll(t, i = 0) {\n        const n = this.hl(t, i);\n        return null === n ? null : Object.assign(Object.assign({}, this.al(n)), {\n            ee: this.rl(n)\n        });\n    }\n    ne() {\n        return this.tl;\n    }\n    ol(t, i, n) {\n        if (this.Ni()) return null;\n        let s = null;\n        for (const e of n){\n            s = Fi(s, this._l(t, i, e));\n        }\n        return s;\n    }\n    J(t) {\n        this.nl.clear(), this.il.clear(), this.tl = t;\n    }\n    rl(t) {\n        return this.tl[t].ee;\n    }\n    al(t) {\n        return this.tl[t];\n    }\n    hl(t, i) {\n        const n = this.ul(t);\n        if (null === n && 0 !== i) switch(i){\n            case -1:\n                return this.cl(t);\n            case 1:\n                return this.dl(t);\n            default:\n                throw new TypeError(\"Unknown search mode\");\n        }\n        return n;\n    }\n    cl(t) {\n        let i = this.fl(t);\n        return i > 0 && (i -= 1), i !== this.tl.length && this.rl(i) < t ? i : null;\n    }\n    dl(t) {\n        const i = this.vl(t);\n        return i !== this.tl.length && t < this.rl(i) ? i : null;\n    }\n    ul(t) {\n        const i = this.fl(t);\n        return i === this.tl.length || t < this.tl[i].ee ? null : i;\n    }\n    fl(t) {\n        return Bt(this.tl, t, (t, i)=>t.ee < i);\n    }\n    vl(t) {\n        return At(this.tl, t, (t, i)=>t.ee > i);\n    }\n    pl(t, i, n) {\n        let s = null;\n        for(let e = t; e < i; e++){\n            const t = this.tl[e].Vt[n];\n            Number.isNaN(t) || (null === s ? s = {\n                ml: t,\n                bl: t\n            } : (t < s.ml && (s.ml = t), t > s.bl && (s.bl = t)));\n        }\n        return s;\n    }\n    _l(t, i, n) {\n        if (this.Ni()) return null;\n        let s = null;\n        const e = b(this.el()), r = b(this.An()), h = Math.max(t, e), l = Math.min(i, r), a = Math.ceil(h / Ei) * Ei, o = Math.max(a, Math.floor(l / Ei) * Ei);\n        {\n            const t = this.fl(h), e = this.vl(Math.min(l, a, i));\n            s = Fi(s, this.pl(t, e, n));\n        }\n        let _ = this.il.get(n);\n        void 0 === _ && (_ = new Map, this.il.set(n, _));\n        for(let t = Math.max(a + 1, h); t < o; t += Ei){\n            const i = Math.floor(t / Ei);\n            let e = _.get(i);\n            if (void 0 === e) {\n                const t = this.fl(i * Ei), s = this.vl((i + 1) * Ei - 1);\n                e = this.pl(t, s, n), _.set(i, e);\n            }\n            s = Fi(s, e);\n        }\n        {\n            const t = this.fl(o), i = this.vl(l);\n            s = Fi(s, this.pl(t, i, n));\n        }\n        return s;\n    }\n}\nfunction Fi(t, i) {\n    if (null === t) return i;\n    if (null === i) return t;\n    return {\n        ml: Math.min(t.ml, i.ml),\n        bl: Math.max(t.bl, i.bl)\n    };\n}\nclass Wi {\n    constructor(t){\n        this.wl = t;\n    }\n    X(t, i, n) {\n        this.wl.draw(t);\n    }\n    gl(t, i, n) {\n        var s, e;\n        null === (e = (s = this.wl).drawBackground) || void 0 === e || e.call(s, t);\n    }\n}\nclass ji {\n    constructor(t){\n        this.tr = null, this.wn = t;\n    }\n    gt() {\n        var t;\n        const i = this.wn.renderer();\n        if (null === i) return null;\n        if ((null === (t = this.tr) || void 0 === t ? void 0 : t.Ml) === i) return this.tr.xl;\n        const n = new Wi(i);\n        return this.tr = {\n            Ml: i,\n            xl: n\n        }, n;\n    }\n    Sl() {\n        var t, i, n;\n        return null !== (n = null === (i = (t = this.wn).zOrder) || void 0 === i ? void 0 : i.call(t)) && void 0 !== n ? n : \"normal\";\n    }\n}\nfunction Hi(t) {\n    var i, n, s, e, r;\n    return {\n        Kt: t.text(),\n        ki: t.coordinate(),\n        Si: null === (i = t.fixedCoordinate) || void 0 === i ? void 0 : i.call(t),\n        V: t.textColor(),\n        t: t.backColor(),\n        yt: null === (s = null === (n = t.visible) || void 0 === n ? void 0 : n.call(t)) || void 0 === s || s,\n        hi: null === (r = null === (e = t.tickVisible) || void 0 === e ? void 0 : e.call(t)) || void 0 === r || r\n    };\n}\nclass $i {\n    constructor(t, i){\n        this.Wt = new rt, this.kl = t, this.yl = i;\n    }\n    gt() {\n        return this.Wt.J(Object.assign({\n            Hi: this.yl.Hi()\n        }, Hi(this.kl))), this.Wt;\n    }\n}\nclass Ui extends nt {\n    constructor(t, i){\n        super(), this.kl = t, this.Li = i;\n    }\n    zi(t, i, n) {\n        const s = Hi(this.kl);\n        n.t = s.t, t.V = s.V;\n        const e = 2 / 12 * this.Li.P();\n        n.wi = e, n.gi = e, n.ki = s.ki, n.Si = s.Si, t.Kt = s.Kt, t.yt = s.yt, t.hi = s.hi;\n    }\n}\nclass qi {\n    constructor(t, i){\n        this.Cl = null, this.Tl = null, this.Pl = null, this.Rl = null, this.Dl = null, this.Vl = t, this.jr = i;\n    }\n    Ol() {\n        return this.Vl;\n    }\n    Vn() {\n        var t, i;\n        null === (i = (t = this.Vl).updateAllViews) || void 0 === i || i.call(t);\n    }\n    Pn() {\n        var t, i, n, s;\n        const e = null !== (n = null === (i = (t = this.Vl).paneViews) || void 0 === i ? void 0 : i.call(t)) && void 0 !== n ? n : [];\n        if ((null === (s = this.Cl) || void 0 === s ? void 0 : s.Ml) === e) return this.Cl.xl;\n        const r = e.map((t)=>new ji(t));\n        return this.Cl = {\n            Ml: e,\n            xl: r\n        }, r;\n    }\n    Qi() {\n        var t, i, n, s;\n        const e = null !== (n = null === (i = (t = this.Vl).timeAxisViews) || void 0 === i ? void 0 : i.call(t)) && void 0 !== n ? n : [];\n        if ((null === (s = this.Tl) || void 0 === s ? void 0 : s.Ml) === e) return this.Tl.xl;\n        const r = this.jr.$t().St(), h = e.map((t)=>new $i(t, r));\n        return this.Tl = {\n            Ml: e,\n            xl: h\n        }, h;\n    }\n    Rn() {\n        var t, i, n, s;\n        const e = null !== (n = null === (i = (t = this.Vl).priceAxisViews) || void 0 === i ? void 0 : i.call(t)) && void 0 !== n ? n : [];\n        if ((null === (s = this.Pl) || void 0 === s ? void 0 : s.Ml) === e) return this.Pl.xl;\n        const r = this.jr.Dt(), h = e.map((t)=>new Ui(t, r));\n        return this.Pl = {\n            Ml: e,\n            xl: h\n        }, h;\n    }\n    Bl() {\n        var t, i, n, s;\n        const e = null !== (n = null === (i = (t = this.Vl).priceAxisPaneViews) || void 0 === i ? void 0 : i.call(t)) && void 0 !== n ? n : [];\n        if ((null === (s = this.Rl) || void 0 === s ? void 0 : s.Ml) === e) return this.Rl.xl;\n        const r = e.map((t)=>new ji(t));\n        return this.Rl = {\n            Ml: e,\n            xl: r\n        }, r;\n    }\n    Al() {\n        var t, i, n, s;\n        const e = null !== (n = null === (i = (t = this.Vl).timeAxisPaneViews) || void 0 === i ? void 0 : i.call(t)) && void 0 !== n ? n : [];\n        if ((null === (s = this.Dl) || void 0 === s ? void 0 : s.Ml) === e) return this.Dl.xl;\n        const r = e.map((t)=>new ji(t));\n        return this.Dl = {\n            Ml: e,\n            xl: r\n        }, r;\n    }\n    Il(t, i) {\n        var n, s, e;\n        return null !== (e = null === (s = (n = this.Vl).autoscaleInfo) || void 0 === s ? void 0 : s.call(n, t, i)) && void 0 !== e ? e : null;\n    }\n    wr(t, i) {\n        var n, s, e;\n        return null !== (e = null === (s = (n = this.Vl).hitTest) || void 0 === s ? void 0 : s.call(n, t, i)) && void 0 !== e ? e : null;\n    }\n}\nfunction Yi(t, i, n, s) {\n    t.forEach((t)=>{\n        i(t).forEach((t)=>{\n            t.Sl() === n && s.push(t);\n        });\n    });\n}\nfunction Zi(t) {\n    return t.Pn();\n}\nfunction Xi(t) {\n    return t.Bl();\n}\nfunction Ki(t) {\n    return t.Al();\n}\nclass Gi extends Ai {\n    constructor(t, i, n, s, e){\n        super(t), this.zt = new Ni, this.jh = new Ci(this), this.zl = [], this.Ll = new li(this), this.El = null, this.Nl = null, this.Fl = [], this.Wl = [], this.jl = null, this.Hl = [], this.cn = i, this.$l = n;\n        const r = new Ti(this);\n        this.rn = [\n            r\n        ], this.Hh = new ei(r, this, t), \"Area\" !== n && \"Line\" !== n && \"Baseline\" !== n || (this.El = new ci(this)), this.Ul(), this.ql(e);\n    }\n    S() {\n        null !== this.jl && clearTimeout(this.jl);\n    }\n    mh(t) {\n        return this.cn.priceLineColor || t;\n    }\n    Zr(t) {\n        const i = {\n            Xr: !0\n        }, n = this.Dt();\n        if (this.$t().St().Ni() || n.Ni() || this.zt.Ni()) return i;\n        const s = this.$t().St().Xs(), e = this.Ct();\n        if (null === s || null === e) return i;\n        let r, h;\n        if (t) {\n            const t = this.zt.sl();\n            if (null === t) return i;\n            r = t, h = t.ee;\n        } else {\n            const t = this.zt.ll(s.ui(), -1);\n            if (null === t) return i;\n            if (r = this.zt.Gh(t.ee), null === r) return i;\n            h = t.ee;\n        }\n        const l = r.Vt[3], a = this.Us().$s(h, {\n            Vt: r\n        }), o = n.Rt(l, e.Vt);\n        return {\n            Xr: !1,\n            _t: l,\n            Kt: n.Fi(l, e.Vt),\n            xh: n.Yl(l),\n            Sh: n.Zl(l, e.Vt),\n            V: a.ce,\n            ki: o,\n            ee: h\n        };\n    }\n    Us() {\n        return null !== this.Nl || (this.Nl = new zi(this)), this.Nl;\n    }\n    W() {\n        return this.cn;\n    }\n    $h(t) {\n        const i = t.priceScaleId;\n        void 0 !== i && i !== this.cn.priceScaleId && this.$t().Xl(this, i), V(this.cn, t), void 0 !== t.priceFormat && (this.Ul(), this.$t().Kl()), this.$t().Gl(this), this.$t().Jl(), this.wn.bt(\"options\");\n    }\n    J(t, i) {\n        this.zt.J(t), this.Ql(), this.wn.bt(\"data\"), this.dn.bt(\"data\"), null !== this.El && (i && i.ta ? this.El.$r() : 0 === t.length && this.El.Hr());\n        const n = this.$t().dr(this);\n        this.$t().ia(n), this.$t().Gl(this), this.$t().Jl(), this.$t().Uh();\n    }\n    na(t) {\n        this.Fl = t, this.Ql();\n        const i = this.$t().dr(this);\n        this.dn.bt(\"data\"), this.$t().ia(i), this.$t().Gl(this), this.$t().Jl(), this.$t().Uh();\n    }\n    sa() {\n        return this.Fl;\n    }\n    dh() {\n        return this.Wl;\n    }\n    ea(t) {\n        const i = new Bi(this, t);\n        return this.zl.push(i), this.$t().Gl(this), i;\n    }\n    ra(t) {\n        const i = this.zl.indexOf(t);\n        -1 !== i && this.zl.splice(i, 1), this.$t().Gl(this);\n    }\n    Qh() {\n        return this.$l;\n    }\n    Ct() {\n        const t = this.ha();\n        return null === t ? null : {\n            Vt: t.Vt[3],\n            la: t.ot\n        };\n    }\n    ha() {\n        const t = this.$t().St().Xs();\n        if (null === t) return null;\n        const i = t.Os();\n        return this.zt.ll(i, 1);\n    }\n    In() {\n        return this.zt;\n    }\n    ph(t) {\n        const i = this.zt.Gh(t);\n        return null === i ? null : \"Bar\" === this.$l || \"Candlestick\" === this.$l || \"Custom\" === this.$l ? {\n            ge: i.Vt[0],\n            Me: i.Vt[1],\n            xe: i.Vt[2],\n            Se: i.Vt[3]\n        } : i.Vt[3];\n    }\n    aa(t) {\n        const i = [];\n        Yi(this.Hl, Zi, \"top\", i);\n        const n = this.El;\n        return null !== n && n.yt() ? (null === this.jl && n.qr() && (this.jl = setTimeout(()=>{\n            this.jl = null, this.$t().oa();\n        }, 0)), n.Ur(), i.unshift(n), i) : i;\n    }\n    Pn() {\n        const t = [];\n        this._a() || t.push(this.Ll), t.push(this.wn, this.jh, this.dn);\n        const i = this.zl.map((t)=>t.qh());\n        return t.push(...i), Yi(this.Hl, Zi, \"normal\", t), t;\n    }\n    ua() {\n        return this.ca(Zi, \"bottom\");\n    }\n    da(t) {\n        return this.ca(Xi, t);\n    }\n    fa(t) {\n        return this.ca(Ki, t);\n    }\n    va(t, i) {\n        return this.Hl.map((n)=>n.wr(t, i)).filter((t)=>null !== t);\n    }\n    Ji(t) {\n        return [\n            this.Hh,\n            ...this.zl.map((t)=>t.Yh())\n        ];\n    }\n    Rn(t, i) {\n        if (i !== this.Yi && !this._a()) return [];\n        const n = [\n            ...this.rn\n        ];\n        for (const t of this.zl)n.push(t.Zh());\n        return this.Hl.forEach((t)=>{\n            n.push(...t.Rn());\n        }), n;\n    }\n    Qi() {\n        const t = [];\n        return this.Hl.forEach((i)=>{\n            t.push(...i.Qi());\n        }), t;\n    }\n    Il(t, i) {\n        if (void 0 !== this.cn.autoscaleInfoProvider) {\n            const n = this.cn.autoscaleInfoProvider(()=>{\n                const n = this.pa(t, i);\n                return null === n ? null : n.Bh();\n            });\n            return Di.Ah(n);\n        }\n        return this.pa(t, i);\n    }\n    ma() {\n        return this.cn.priceFormat.minMove;\n    }\n    ba() {\n        return this.wa;\n    }\n    Vn() {\n        var t;\n        this.wn.bt(), this.dn.bt();\n        for (const t of this.rn)t.bt();\n        for (const t of this.zl)t.bt();\n        this.jh.bt(), this.Ll.bt(), null === (t = this.El) || void 0 === t || t.bt(), this.Hl.forEach((t)=>t.Vn());\n    }\n    Dt() {\n        return b(super.Dt());\n    }\n    kt(t) {\n        if (!((\"Line\" === this.$l || \"Area\" === this.$l || \"Baseline\" === this.$l) && this.cn.crosshairMarkerVisible)) return null;\n        const i = this.zt.Gh(t);\n        if (null === i) return null;\n        return {\n            _t: i.Vt[3],\n            ht: this.ga(),\n            Ot: this.Ma(),\n            Pt: this.xa(),\n            Tt: this.Sa(t)\n        };\n    }\n    bh() {\n        return this.cn.title;\n    }\n    yt() {\n        return this.cn.visible;\n    }\n    ka(t) {\n        this.Hl.push(new qi(t, this));\n    }\n    ya(t) {\n        this.Hl = this.Hl.filter((i)=>i.Ol() !== t);\n    }\n    Ca() {\n        if (this.wn instanceof Kt != !1) return (t)=>this.wn.We(t);\n    }\n    Ta() {\n        if (this.wn instanceof Kt != !1) return (t)=>this.wn.je(t);\n    }\n    _a() {\n        return !_t(this.Dt().Pa());\n    }\n    pa(t, i) {\n        if (!B(t) || !B(i) || this.zt.Ni()) return null;\n        const n = \"Line\" === this.$l || \"Area\" === this.$l || \"Baseline\" === this.$l || \"Histogram\" === this.$l ? [\n            3\n        ] : [\n            2,\n            1\n        ], s = this.zt.ol(t, i, n);\n        let e = null !== s ? new Ri(s.ml, s.bl) : null;\n        if (\"Histogram\" === this.Qh()) {\n            const t = this.cn.base, i = new Ri(t, t);\n            e = null !== e ? e.ts(i) : i;\n        }\n        let r = this.dn.uh();\n        return this.Hl.forEach((n)=>{\n            const s = n.Il(t, i);\n            if (null == s ? void 0 : s.priceRange) {\n                const t = new Ri(s.priceRange.minValue, s.priceRange.maxValue);\n                e = null !== e ? e.ts(t) : t;\n            }\n            var h, l, a, o;\n            (null == s ? void 0 : s.margins) && (h = r, l = s.margins, r = {\n                above: Math.max(null !== (a = null == h ? void 0 : h.above) && void 0 !== a ? a : 0, l.above),\n                below: Math.max(null !== (o = null == h ? void 0 : h.below) && void 0 !== o ? o : 0, l.below)\n            });\n        }), new Di(e, r);\n    }\n    ga() {\n        switch(this.$l){\n            case \"Line\":\n            case \"Area\":\n            case \"Baseline\":\n                return this.cn.crosshairMarkerRadius;\n        }\n        return 0;\n    }\n    Ma() {\n        switch(this.$l){\n            case \"Line\":\n            case \"Area\":\n            case \"Baseline\":\n                {\n                    const t = this.cn.crosshairMarkerBorderColor;\n                    if (0 !== t.length) return t;\n                }\n        }\n        return null;\n    }\n    xa() {\n        switch(this.$l){\n            case \"Line\":\n            case \"Area\":\n            case \"Baseline\":\n                return this.cn.crosshairMarkerBorderWidth;\n        }\n        return 0;\n    }\n    Sa(t) {\n        switch(this.$l){\n            case \"Line\":\n            case \"Area\":\n            case \"Baseline\":\n                {\n                    const t = this.cn.crosshairMarkerBackgroundColor;\n                    if (0 !== t.length) return t;\n                }\n        }\n        return this.Us().$s(t).ce;\n    }\n    Ul() {\n        switch(this.cn.priceFormat.type){\n            case \"custom\":\n                this.wa = {\n                    format: this.cn.priceFormat.formatter\n                };\n                break;\n            case \"volume\":\n                this.wa = new pt(this.cn.priceFormat.precision);\n                break;\n            case \"percent\":\n                this.wa = new vt(this.cn.priceFormat.precision);\n                break;\n            default:\n                {\n                    const t = Math.pow(10, this.cn.priceFormat.precision);\n                    this.wa = new ft(t, this.cn.priceFormat.minMove * t);\n                }\n        }\n        null !== this.Yi && this.Yi.Ra();\n    }\n    Ql() {\n        const t = this.$t().St();\n        if (!t.Da() || this.zt.Ni()) return void (this.Wl = []);\n        const i = b(this.zt.el());\n        this.Wl = this.Fl.map((n, s)=>{\n            const e = b(t.Va(n.time, !0)), r = e < i ? 1 : -1;\n            return {\n                time: b(this.zt.ll(e, r)).ee,\n                position: n.position,\n                shape: n.shape,\n                color: n.color,\n                id: n.id,\n                th: s,\n                text: n.text,\n                size: n.size,\n                originalTime: n.originalTime\n            };\n        });\n    }\n    ql(t) {\n        switch(this.dn = new yi(this, this.$t()), this.$l){\n            case \"Bar\":\n                this.wn = new Ht(this, this.$t());\n                break;\n            case \"Candlestick\":\n                this.wn = new Zt(this, this.$t());\n                break;\n            case \"Line\":\n                this.wn = new ti(this, this.$t());\n                break;\n            case \"Custom\":\n                this.wn = new Kt(this, this.$t(), m(t));\n                break;\n            case \"Area\":\n                this.wn = new Ft(this, this.$t());\n                break;\n            case \"Baseline\":\n                this.wn = new qt(this, this.$t());\n                break;\n            case \"Histogram\":\n                this.wn = new Qt(this, this.$t());\n                break;\n            default:\n                throw Error(\"Unknown chart style assigned: \" + this.$l);\n        }\n    }\n    ca(t, i) {\n        const n = [];\n        return Yi(this.Hl, t, i, n), n;\n    }\n}\nclass Ji {\n    constructor(t){\n        this.cn = t;\n    }\n    Oa(t, i, n) {\n        let s = t;\n        if (0 === this.cn.mode) return s;\n        const e = n.vn(), r = e.Ct();\n        if (null === r) return s;\n        const h = e.Rt(t, r), l = n.Ba().filter((t)=>t instanceof Gi).reduce((t, s)=>{\n            if (n.vr(s) || !s.yt()) return t;\n            const e = s.Dt(), r = s.In();\n            if (e.Ni() || !r.Kr(i)) return t;\n            const h = r.Gh(i);\n            if (null === h) return t;\n            const l = w(s.Ct());\n            return t.concat([\n                e.Rt(h.Vt[3], l.Vt)\n            ]);\n        }, []);\n        if (0 === l.length) return s;\n        l.sort((t, i)=>Math.abs(t - h) - Math.abs(i - h));\n        const a = l[0];\n        return s = e.pn(a, r), s;\n    }\n}\nclass Qi extends H {\n    constructor(){\n        super(...arguments), this.zt = null;\n    }\n    J(t) {\n        this.zt = t;\n    }\n    K({ context: t, bitmapSize: i, horizontalPixelRatio: n, verticalPixelRatio: s }) {\n        if (null === this.zt) return;\n        const e = Math.max(1, Math.floor(n));\n        t.lineWidth = e, function(t, i) {\n            t.save(), t.lineWidth % 2 && t.translate(.5, .5), i(), t.restore();\n        }(t, ()=>{\n            const r = b(this.zt);\n            if (r.Aa) {\n                t.strokeStyle = r.Ia, f(t, r.za), t.beginPath();\n                for (const s of r.La){\n                    const r = Math.round(s.Ea * n);\n                    t.moveTo(r, -e), t.lineTo(r, i.height + e);\n                }\n                t.stroke();\n            }\n            if (r.Na) {\n                t.strokeStyle = r.Fa, f(t, r.Wa), t.beginPath();\n                for (const n of r.ja){\n                    const r = Math.round(n.Ea * s);\n                    t.moveTo(-e, r), t.lineTo(i.width + e, r);\n                }\n                t.stroke();\n            }\n        });\n    }\n}\nclass tn {\n    constructor(t){\n        this.Wt = new Qi, this.ft = !0, this.tn = t;\n    }\n    bt() {\n        this.ft = !0;\n    }\n    gt() {\n        if (this.ft) {\n            const t = this.tn.$t().W().grid, i = {\n                Na: t.horzLines.visible,\n                Aa: t.vertLines.visible,\n                Fa: t.horzLines.color,\n                Ia: t.vertLines.color,\n                Wa: t.horzLines.style,\n                za: t.vertLines.style,\n                ja: this.tn.vn().Ha(),\n                La: (this.tn.$t().St().Ha() || []).map((t)=>({\n                        Ea: t.coord\n                    }))\n            };\n            this.Wt.J(i), this.ft = !1;\n        }\n        return this.Wt;\n    }\n}\nclass nn {\n    constructor(t){\n        this.wn = new tn(t);\n    }\n    qh() {\n        return this.wn;\n    }\n}\nconst sn = {\n    $a: 4,\n    Ua: 1e-4\n};\nfunction en(t, i) {\n    const n = 100 * (t - i) / i;\n    return i < 0 ? -n : n;\n}\nfunction rn(t, i) {\n    const n = en(t.Ph(), i), s = en(t.Rh(), i);\n    return new Ri(n, s);\n}\nfunction hn(t, i) {\n    const n = 100 * (t - i) / i + 100;\n    return i < 0 ? -n : n;\n}\nfunction ln(t, i) {\n    const n = hn(t.Ph(), i), s = hn(t.Rh(), i);\n    return new Ri(n, s);\n}\nfunction an(t, i) {\n    const n = Math.abs(t);\n    if (n < 1e-15) return 0;\n    const s = Math.log10(n + i.Ua) + i.$a;\n    return t < 0 ? -s : s;\n}\nfunction on(t, i) {\n    const n = Math.abs(t);\n    if (n < 1e-15) return 0;\n    const s = Math.pow(10, n - i.$a) - i.Ua;\n    return t < 0 ? -s : s;\n}\nfunction _n(t, i) {\n    if (null === t) return null;\n    const n = an(t.Ph(), i), s = an(t.Rh(), i);\n    return new Ri(n, s);\n}\nfunction un(t, i) {\n    if (null === t) return null;\n    const n = on(t.Ph(), i), s = on(t.Rh(), i);\n    return new Ri(n, s);\n}\nfunction cn(t) {\n    if (null === t) return sn;\n    const i = Math.abs(t.Rh() - t.Ph());\n    if (i >= 1 || i < 1e-15) return sn;\n    const n = Math.ceil(Math.abs(Math.log10(i))), s = sn.$a + n;\n    return {\n        $a: s,\n        Ua: 1 / Math.pow(10, s)\n    };\n}\nclass dn {\n    constructor(t, i){\n        if (this.qa = t, this.Ya = i, function(t) {\n            if (t < 0) return !1;\n            for(let i = t; i > 1; i /= 10)if (i % 10 != 0) return !1;\n            return !0;\n        }(this.qa)) this.Za = [\n            2,\n            2.5,\n            2\n        ];\n        else {\n            this.Za = [];\n            for(let t = this.qa; 1 !== t;){\n                if (t % 2 == 0) this.Za.push(2), t /= 2;\n                else {\n                    if (t % 5 != 0) throw new Error(\"unexpected base\");\n                    this.Za.push(2, 2.5), t /= 5;\n                }\n                if (this.Za.length > 100) throw new Error(\"something wrong with base\");\n            }\n        }\n    }\n    Xa(t, i, n) {\n        const s = 0 === this.qa ? 0 : 1 / this.qa;\n        let e = Math.pow(10, Math.max(0, Math.ceil(Math.log10(t - i)))), r = 0, h = this.Ya[0];\n        for(;;){\n            const t = yt(e, s, 1e-14) && e > s + 1e-14, i = yt(e, n * h, 1e-14), l = yt(e, 1, 1e-14);\n            if (!(t && i && l)) break;\n            e /= h, h = this.Ya[++r % this.Ya.length];\n        }\n        if (e <= s + 1e-14 && (e = s), e = Math.max(1, e), this.Za.length > 0 && (l = e, a = 1, o = 1e-14, Math.abs(l - a) < o)) for(r = 0, h = this.Za[0]; yt(e, n * h, 1e-14) && e > s + 1e-14;)e /= h, h = this.Za[++r % this.Za.length];\n        var l, a, o;\n        return e;\n    }\n}\nclass fn {\n    constructor(t, i, n, s){\n        this.Ka = [], this.Li = t, this.qa = i, this.Ga = n, this.Ja = s;\n    }\n    Xa(t, i) {\n        if (t < i) throw new Error(\"high < low\");\n        const n = this.Li.At(), s = (t - i) * this.Qa() / n, e = new dn(this.qa, [\n            2,\n            2.5,\n            2\n        ]), r = new dn(this.qa, [\n            2,\n            2,\n            2.5\n        ]), h = new dn(this.qa, [\n            2.5,\n            2,\n            2\n        ]), l = [];\n        return l.push(e.Xa(t, i, s), r.Xa(t, i, s), h.Xa(t, i, s)), function(t) {\n            if (t.length < 1) throw Error(\"array is empty\");\n            let i = t[0];\n            for(let n = 1; n < t.length; ++n)t[n] < i && (i = t[n]);\n            return i;\n        }(l);\n    }\n    io() {\n        const t = this.Li, i = t.Ct();\n        if (null === i) return void (this.Ka = []);\n        const n = t.At(), s = this.Ga(n - 1, i), e = this.Ga(0, i), r = this.Li.W().entireTextOnly ? this.no() / 2 : 0, h = r, l = n - 1 - r, a = Math.max(s, e), o = Math.min(s, e);\n        if (a === o) return void (this.Ka = []);\n        let _ = this.Xa(a, o), u = a % _;\n        u += u < 0 ? _ : 0;\n        const c = a >= o ? 1 : -1;\n        let d = null, f = 0;\n        for(let n = a - u; n > o; n -= _){\n            const s = this.Ja(n, i, !0);\n            null !== d && Math.abs(s - d) < this.Qa() || s < h || s > l || (f < this.Ka.length ? (this.Ka[f].Ea = s, this.Ka[f].so = t.eo(n)) : this.Ka.push({\n                Ea: s,\n                so: t.eo(n)\n            }), f++, d = s, t.ro() && (_ = this.Xa(n * c, o)));\n        }\n        this.Ka.length = f;\n    }\n    Ha() {\n        return this.Ka;\n    }\n    no() {\n        return this.Li.P();\n    }\n    Qa() {\n        return Math.ceil(2.5 * this.no());\n    }\n}\nfunction vn(t) {\n    return t.slice().sort((t, i)=>b(t.Xi()) - b(i.Xi()));\n}\nvar pn;\n!function(t) {\n    t[t.Normal = 0] = \"Normal\", t[t.Logarithmic = 1] = \"Logarithmic\", t[t.Percentage = 2] = \"Percentage\", t[t.IndexedTo100 = 3] = \"IndexedTo100\";\n}(pn || (pn = {}));\nconst mn = new vt, bn = new ft(100, 1);\nclass wn {\n    constructor(t, i, n, s){\n        this.ho = 0, this.lo = null, this.Ih = null, this.ao = null, this.oo = {\n            _o: !1,\n            uo: null\n        }, this.co = 0, this.do = 0, this.fo = new D, this.vo = new D, this.po = [], this.mo = null, this.bo = null, this.wo = null, this.Mo = null, this.wa = bn, this.xo = cn(null), this.So = t, this.cn = i, this.ko = n, this.yo = s, this.Co = new fn(this, 100, this.To.bind(this), this.Po.bind(this));\n    }\n    Pa() {\n        return this.So;\n    }\n    W() {\n        return this.cn;\n    }\n    $h(t) {\n        if (V(this.cn, t), this.Ra(), void 0 !== t.mode && this.Ro({\n            Cr: t.mode\n        }), void 0 !== t.scaleMargins) {\n            const i = m(t.scaleMargins.top), n = m(t.scaleMargins.bottom);\n            if (i < 0 || i > 1) throw new Error(`Invalid top margin - expect value between 0 and 1, given=${i}`);\n            if (n < 0 || n > 1) throw new Error(`Invalid bottom margin - expect value between 0 and 1, given=${n}`);\n            if (i + n > 1) throw new Error(`Invalid margins - sum of margins must be less than 1, given=${i + n}`);\n            this.Do(), this.bo = null;\n        }\n    }\n    Vo() {\n        return this.cn.autoScale;\n    }\n    ro() {\n        return 1 === this.cn.mode;\n    }\n    Mh() {\n        return 2 === this.cn.mode;\n    }\n    Oo() {\n        return 3 === this.cn.mode;\n    }\n    Cr() {\n        return {\n            Wn: this.cn.autoScale,\n            Bo: this.cn.invertScale,\n            Cr: this.cn.mode\n        };\n    }\n    Ro(t) {\n        const i = this.Cr();\n        let n = null;\n        void 0 !== t.Wn && (this.cn.autoScale = t.Wn), void 0 !== t.Cr && (this.cn.mode = t.Cr, 2 !== t.Cr && 3 !== t.Cr || (this.cn.autoScale = !0), this.oo._o = !1), 1 === i.Cr && t.Cr !== i.Cr && (!function(t, i) {\n            if (null === t) return !1;\n            const n = on(t.Ph(), i), s = on(t.Rh(), i);\n            return isFinite(n) && isFinite(s);\n        }(this.Ih, this.xo) ? this.cn.autoScale = !0 : (n = un(this.Ih, this.xo), null !== n && this.Ao(n))), 1 === t.Cr && t.Cr !== i.Cr && (n = _n(this.Ih, this.xo), null !== n && this.Ao(n));\n        const s = i.Cr !== this.cn.mode;\n        s && (2 === i.Cr || this.Mh()) && this.Ra(), s && (3 === i.Cr || this.Oo()) && this.Ra(), void 0 !== t.Bo && i.Bo !== t.Bo && (this.cn.invertScale = t.Bo, this.Io()), this.vo.m(i, this.Cr());\n    }\n    zo() {\n        return this.vo;\n    }\n    P() {\n        return this.ko.fontSize;\n    }\n    At() {\n        return this.ho;\n    }\n    Lo(t) {\n        this.ho !== t && (this.ho = t, this.Do(), this.bo = null);\n    }\n    Eo() {\n        if (this.lo) return this.lo;\n        const t = this.At() - this.No() - this.Fo();\n        return this.lo = t, t;\n    }\n    Lh() {\n        return this.Wo(), this.Ih;\n    }\n    Ao(t, i) {\n        const n = this.Ih;\n        (i || null === n && null !== t || null !== n && !n.Ch(t)) && (this.bo = null, this.Ih = t);\n    }\n    Ni() {\n        return this.Wo(), 0 === this.ho || !this.Ih || this.Ih.Ni();\n    }\n    jo(t) {\n        return this.Bo() ? t : this.At() - 1 - t;\n    }\n    Rt(t, i) {\n        return this.Mh() ? t = en(t, i) : this.Oo() && (t = hn(t, i)), this.Po(t, i);\n    }\n    te(t, i, n) {\n        this.Wo();\n        const s = this.Fo(), e = b(this.Lh()), r = e.Ph(), h = e.Rh(), l = this.Eo() - 1, a = this.Bo(), o = l / (h - r), _ = void 0 === n ? 0 : n.from, u = void 0 === n ? t.length : n.to, c = this.Ho();\n        for(let n = _; n < u; n++){\n            const e = t[n], h = e._t;\n            if (isNaN(h)) continue;\n            let l = h;\n            null !== c && (l = c(e._t, i));\n            const _ = s + o * (l - r), u = a ? _ : this.ho - 1 - _;\n            e.st = u;\n        }\n    }\n    be(t, i, n) {\n        this.Wo();\n        const s = this.Fo(), e = b(this.Lh()), r = e.Ph(), h = e.Rh(), l = this.Eo() - 1, a = this.Bo(), o = l / (h - r), _ = void 0 === n ? 0 : n.from, u = void 0 === n ? t.length : n.to, c = this.Ho();\n        for(let n = _; n < u; n++){\n            const e = t[n];\n            let h = e.ge, l = e.Me, _ = e.xe, u = e.Se;\n            null !== c && (h = c(e.ge, i), l = c(e.Me, i), _ = c(e.xe, i), u = c(e.Se, i));\n            let d = s + o * (h - r), f = a ? d : this.ho - 1 - d;\n            e.pe = f, d = s + o * (l - r), f = a ? d : this.ho - 1 - d, e.de = f, d = s + o * (_ - r), f = a ? d : this.ho - 1 - d, e.fe = f, d = s + o * (u - r), f = a ? d : this.ho - 1 - d, e.me = f;\n        }\n    }\n    pn(t, i) {\n        const n = this.To(t, i);\n        return this.$o(n, i);\n    }\n    $o(t, i) {\n        let n = t;\n        return this.Mh() ? n = function(t, i) {\n            return i < 0 && (t = -t), t / 100 * i + i;\n        }(n, i) : this.Oo() && (n = function(t, i) {\n            return t -= 100, i < 0 && (t = -t), t / 100 * i + i;\n        }(n, i)), n;\n    }\n    Ba() {\n        return this.po;\n    }\n    Uo() {\n        if (this.mo) return this.mo;\n        let t = [];\n        for(let i = 0; i < this.po.length; i++){\n            const n = this.po[i];\n            null === n.Xi() && n.Ki(i + 1), t.push(n);\n        }\n        return t = vn(t), this.mo = t, this.mo;\n    }\n    qo(t) {\n        -1 === this.po.indexOf(t) && (this.po.push(t), this.Ra(), this.Yo());\n    }\n    Zo(t) {\n        const i = this.po.indexOf(t);\n        if (-1 === i) throw new Error(\"source is not attached to scale\");\n        this.po.splice(i, 1), 0 === this.po.length && (this.Ro({\n            Wn: !0\n        }), this.Ao(null)), this.Ra(), this.Yo();\n    }\n    Ct() {\n        let t = null;\n        for (const i of this.po){\n            const n = i.Ct();\n            null !== n && (null === t || n.la < t.la) && (t = n);\n        }\n        return null === t ? null : t.Vt;\n    }\n    Bo() {\n        return this.cn.invertScale;\n    }\n    Ha() {\n        const t = null === this.Ct();\n        if (null !== this.bo && (t || this.bo.Xo === t)) return this.bo.Ha;\n        this.Co.io();\n        const i = this.Co.Ha();\n        return this.bo = {\n            Ha: i,\n            Xo: t\n        }, this.fo.m(), i;\n    }\n    Ko() {\n        return this.fo;\n    }\n    Go(t) {\n        this.Mh() || this.Oo() || null === this.wo && null === this.ao && (this.Ni() || (this.wo = this.ho - t, this.ao = b(this.Lh()).Th()));\n    }\n    Jo(t) {\n        if (this.Mh() || this.Oo()) return;\n        if (null === this.wo) return;\n        this.Ro({\n            Wn: !1\n        }), (t = this.ho - t) < 0 && (t = 0);\n        let i = (this.wo + .2 * (this.ho - 1)) / (t + .2 * (this.ho - 1));\n        const n = b(this.ao).Th();\n        i = Math.max(i, .1), n.Vh(i), this.Ao(n);\n    }\n    Qo() {\n        this.Mh() || this.Oo() || (this.wo = null, this.ao = null);\n    }\n    t_(t) {\n        this.Vo() || null === this.Mo && null === this.ao && (this.Ni() || (this.Mo = t, this.ao = b(this.Lh()).Th()));\n    }\n    i_(t) {\n        if (this.Vo()) return;\n        if (null === this.Mo) return;\n        const i = b(this.Lh()).Dh() / (this.Eo() - 1);\n        let n = t - this.Mo;\n        this.Bo() && (n *= -1);\n        const s = n * i, e = b(this.ao).Th();\n        e.Oh(s), this.Ao(e, !0), this.bo = null;\n    }\n    n_() {\n        this.Vo() || null !== this.Mo && (this.Mo = null, this.ao = null);\n    }\n    ba() {\n        return this.wa || this.Ra(), this.wa;\n    }\n    Fi(t, i) {\n        switch(this.cn.mode){\n            case 2:\n                return this.s_(en(t, i));\n            case 3:\n                return this.ba().format(hn(t, i));\n            default:\n                return this.Wh(t);\n        }\n    }\n    eo(t) {\n        switch(this.cn.mode){\n            case 2:\n                return this.s_(t);\n            case 3:\n                return this.ba().format(t);\n            default:\n                return this.Wh(t);\n        }\n    }\n    Yl(t) {\n        return this.Wh(t, b(this.e_()).ba());\n    }\n    Zl(t, i) {\n        return t = en(t, i), this.s_(t, mn);\n    }\n    r_() {\n        return this.po;\n    }\n    h_(t) {\n        this.oo = {\n            uo: t,\n            _o: !1\n        };\n    }\n    Vn() {\n        this.po.forEach((t)=>t.Vn());\n    }\n    Ra() {\n        this.bo = null;\n        const t = this.e_();\n        let i = 100;\n        null !== t && (i = Math.round(1 / t.ma())), this.wa = bn, this.Mh() ? (this.wa = mn, i = 100) : this.Oo() ? (this.wa = new ft(100, 1), i = 100) : null !== t && (this.wa = t.ba()), this.Co = new fn(this, i, this.To.bind(this), this.Po.bind(this)), this.Co.io();\n    }\n    Yo() {\n        this.mo = null;\n    }\n    e_() {\n        return this.po[0] || null;\n    }\n    No() {\n        return this.Bo() ? this.cn.scaleMargins.bottom * this.At() + this.do : this.cn.scaleMargins.top * this.At() + this.co;\n    }\n    Fo() {\n        return this.Bo() ? this.cn.scaleMargins.top * this.At() + this.co : this.cn.scaleMargins.bottom * this.At() + this.do;\n    }\n    Wo() {\n        this.oo._o || (this.oo._o = !0, this.l_());\n    }\n    Do() {\n        this.lo = null;\n    }\n    Po(t, i) {\n        if (this.Wo(), this.Ni()) return 0;\n        t = this.ro() && t ? an(t, this.xo) : t;\n        const n = b(this.Lh()), s = this.Fo() + (this.Eo() - 1) * (t - n.Ph()) / n.Dh();\n        return this.jo(s);\n    }\n    To(t, i) {\n        if (this.Wo(), this.Ni()) return 0;\n        const n = this.jo(t), s = b(this.Lh()), e = s.Ph() + s.Dh() * ((n - this.Fo()) / (this.Eo() - 1));\n        return this.ro() ? on(e, this.xo) : e;\n    }\n    Io() {\n        this.bo = null, this.Co.io();\n    }\n    l_() {\n        const t = this.oo.uo;\n        if (null === t) return;\n        let i = null;\n        const n = this.r_();\n        let s = 0, e = 0;\n        for (const r of n){\n            if (!r.yt()) continue;\n            const n = r.Ct();\n            if (null === n) continue;\n            const h = r.Il(t.Os(), t.ui());\n            let l = h && h.Lh();\n            if (null !== l) {\n                switch(this.cn.mode){\n                    case 1:\n                        l = _n(l, this.xo);\n                        break;\n                    case 2:\n                        l = rn(l, n.Vt);\n                        break;\n                    case 3:\n                        l = ln(l, n.Vt);\n                }\n                if (i = null === i ? l : i.ts(b(l)), null !== h) {\n                    const t = h.Eh();\n                    null !== t && (s = Math.max(s, t.above), e = Math.max(e, t.below));\n                }\n            }\n        }\n        if (s === this.co && e === this.do || (this.co = s, this.do = e, this.bo = null, this.Do()), null !== i) {\n            if (i.Ph() === i.Rh()) {\n                const t = this.e_(), n = 5 * (null === t || this.Mh() || this.Oo() ? 1 : t.ma());\n                this.ro() && (i = un(i, this.xo)), i = new Ri(i.Ph() - n, i.Rh() + n), this.ro() && (i = _n(i, this.xo));\n            }\n            if (this.ro()) {\n                const t = un(i, this.xo), n = cn(t);\n                if (r = n, h = this.xo, r.$a !== h.$a || r.Ua !== h.Ua) {\n                    const s = null !== this.ao ? un(this.ao, this.xo) : null;\n                    this.xo = n, i = _n(t, n), null !== s && (this.ao = _n(s, n));\n                }\n            }\n            this.Ao(i);\n        } else null === this.Ih && (this.Ao(new Ri(-.5, .5)), this.xo = cn(null));\n        var r, h;\n        this.oo._o = !0;\n    }\n    Ho() {\n        return this.Mh() ? en : this.Oo() ? hn : this.ro() ? (t)=>an(t, this.xo) : null;\n    }\n    a_(t, i, n) {\n        return void 0 === i ? (void 0 === n && (n = this.ba()), n.format(t)) : i(t);\n    }\n    Wh(t, i) {\n        return this.a_(t, this.yo.priceFormatter, i);\n    }\n    s_(t, i) {\n        return this.a_(t, this.yo.percentageFormatter, i);\n    }\n}\nclass gn {\n    constructor(t, i){\n        this.po = [], this.o_ = new Map, this.ho = 0, this.__ = 0, this.u_ = 1e3, this.mo = null, this.c_ = new D, this.yl = t, this.$i = i, this.d_ = new nn(this);\n        const n = i.W();\n        this.f_ = this.v_(\"left\", n.leftPriceScale), this.p_ = this.v_(\"right\", n.rightPriceScale), this.f_.zo().l(this.m_.bind(this, this.f_), this), this.p_.zo().l(this.m_.bind(this, this.p_), this), this.b_(n);\n    }\n    b_(t) {\n        if (t.leftPriceScale && this.f_.$h(t.leftPriceScale), t.rightPriceScale && this.p_.$h(t.rightPriceScale), t.localization && (this.f_.Ra(), this.p_.Ra()), t.overlayPriceScales) {\n            const i = Array.from(this.o_.values());\n            for (const n of i){\n                const i = b(n[0].Dt());\n                i.$h(t.overlayPriceScales), t.localization && i.Ra();\n            }\n        }\n    }\n    w_(t) {\n        switch(t){\n            case \"left\":\n                return this.f_;\n            case \"right\":\n                return this.p_;\n        }\n        return this.o_.has(t) ? m(this.o_.get(t))[0].Dt() : null;\n    }\n    S() {\n        this.$t().g_().p(this), this.f_.zo().p(this), this.p_.zo().p(this), this.po.forEach((t)=>{\n            t.S && t.S();\n        }), this.c_.m();\n    }\n    M_() {\n        return this.u_;\n    }\n    x_(t) {\n        this.u_ = t;\n    }\n    $t() {\n        return this.$i;\n    }\n    Hi() {\n        return this.__;\n    }\n    At() {\n        return this.ho;\n    }\n    S_(t) {\n        this.__ = t, this.k_();\n    }\n    Lo(t) {\n        this.ho = t, this.f_.Lo(t), this.p_.Lo(t), this.po.forEach((i)=>{\n            if (this.vr(i)) {\n                const n = i.Dt();\n                null !== n && n.Lo(t);\n            }\n        }), this.k_();\n    }\n    Ba() {\n        return this.po;\n    }\n    vr(t) {\n        const i = t.Dt();\n        return null === i || this.f_ !== i && this.p_ !== i;\n    }\n    qo(t, i, n) {\n        const s = void 0 !== n ? n : this.C_().y_ + 1;\n        this.T_(t, i, s);\n    }\n    Zo(t) {\n        const i = this.po.indexOf(t);\n        p(-1 !== i, \"removeDataSource: invalid data source\"), this.po.splice(i, 1);\n        const n = b(t.Dt()).Pa();\n        if (this.o_.has(n)) {\n            const i = m(this.o_.get(n)), s = i.indexOf(t);\n            -1 !== s && (i.splice(s, 1), 0 === i.length && this.o_.delete(n));\n        }\n        const s = t.Dt();\n        s && s.Ba().indexOf(t) >= 0 && s.Zo(t), null !== s && (s.Yo(), this.P_(s)), this.mo = null;\n    }\n    mr(t) {\n        return t === this.f_ ? \"left\" : t === this.p_ ? \"right\" : \"overlay\";\n    }\n    R_() {\n        return this.f_;\n    }\n    D_() {\n        return this.p_;\n    }\n    V_(t, i) {\n        t.Go(i);\n    }\n    O_(t, i) {\n        t.Jo(i), this.k_();\n    }\n    B_(t) {\n        t.Qo();\n    }\n    A_(t, i) {\n        t.t_(i);\n    }\n    I_(t, i) {\n        t.i_(i), this.k_();\n    }\n    z_(t) {\n        t.n_();\n    }\n    k_() {\n        this.po.forEach((t)=>{\n            t.Vn();\n        });\n    }\n    vn() {\n        let t = null;\n        return this.$i.W().rightPriceScale.visible && 0 !== this.p_.Ba().length ? t = this.p_ : this.$i.W().leftPriceScale.visible && 0 !== this.f_.Ba().length ? t = this.f_ : 0 !== this.po.length && (t = this.po[0].Dt()), null === t && (t = this.p_), t;\n    }\n    pr() {\n        let t = null;\n        return this.$i.W().rightPriceScale.visible ? t = this.p_ : this.$i.W().leftPriceScale.visible && (t = this.f_), t;\n    }\n    P_(t) {\n        null !== t && t.Vo() && this.L_(t);\n    }\n    E_(t) {\n        const i = this.yl.Xs();\n        t.Ro({\n            Wn: !0\n        }), null !== i && t.h_(i), this.k_();\n    }\n    N_() {\n        this.L_(this.f_), this.L_(this.p_);\n    }\n    F_() {\n        this.P_(this.f_), this.P_(this.p_), this.po.forEach((t)=>{\n            this.vr(t) && this.P_(t.Dt());\n        }), this.k_(), this.$i.Uh();\n    }\n    Uo() {\n        return null === this.mo && (this.mo = vn(this.po)), this.mo;\n    }\n    W_() {\n        return this.c_;\n    }\n    j_() {\n        return this.d_;\n    }\n    L_(t) {\n        const i = t.r_();\n        if (i && i.length > 0 && !this.yl.Ni()) {\n            const i = this.yl.Xs();\n            null !== i && t.h_(i);\n        }\n        t.Vn();\n    }\n    C_() {\n        const t = this.Uo();\n        if (0 === t.length) return {\n            H_: 0,\n            y_: 0\n        };\n        let i = 0, n = 0;\n        for(let s = 0; s < t.length; s++){\n            const e = t[s].Xi();\n            null !== e && (e < i && (i = e), e > n && (n = e));\n        }\n        return {\n            H_: i,\n            y_: n\n        };\n    }\n    T_(t, i, n) {\n        let s = this.w_(i);\n        if (null === s && (s = this.v_(i, this.$i.W().overlayPriceScales)), this.po.push(t), !_t(i)) {\n            const n = this.o_.get(i) || [];\n            n.push(t), this.o_.set(i, n);\n        }\n        s.qo(t), t.Gi(s), t.Ki(n), this.P_(s), this.mo = null;\n    }\n    m_(t, i, n) {\n        i.Cr !== n.Cr && this.L_(t);\n    }\n    v_(t, i) {\n        const n = Object.assign({\n            visible: !0,\n            autoScale: !0\n        }, z(i)), s = new wn(t, n, this.$i.W().layout, this.$i.W().localization);\n        return s.Lo(this.At()), s;\n    }\n}\nclass Mn {\n    constructor(t, i, n = 50){\n        this.Ke = 0, this.Ge = 1, this.Je = 1, this.tr = new Map, this.Qe = new Map, this.U_ = t, this.q_ = i, this.ir = n;\n    }\n    Y_(t) {\n        const i = t.time, n = this.q_.cacheKey(i), s = this.tr.get(n);\n        if (void 0 !== s) return s.Z_;\n        if (this.Ke === this.ir) {\n            const t = this.Qe.get(this.Je);\n            this.Qe.delete(this.Je), this.tr.delete(m(t)), this.Je++, this.Ke--;\n        }\n        const e = this.U_(t);\n        return this.tr.set(n, {\n            Z_: e,\n            rr: this.Ge\n        }), this.Qe.set(this.Ge, n), this.Ke++, this.Ge++, e;\n    }\n}\nclass xn {\n    constructor(t, i){\n        p(t <= i, \"right should be >= left\"), this.X_ = t, this.K_ = i;\n    }\n    Os() {\n        return this.X_;\n    }\n    ui() {\n        return this.K_;\n    }\n    G_() {\n        return this.K_ - this.X_ + 1;\n    }\n    Kr(t) {\n        return this.X_ <= t && t <= this.K_;\n    }\n    Ch(t) {\n        return this.X_ === t.Os() && this.K_ === t.ui();\n    }\n}\nfunction Sn(t, i) {\n    return null === t || null === i ? t === i : t.Ch(i);\n}\nclass kn {\n    constructor(){\n        this.J_ = new Map, this.tr = null, this.Q_ = !1;\n    }\n    tu(t) {\n        this.Q_ = t, this.tr = null;\n    }\n    iu(t, i) {\n        this.nu(i), this.tr = null;\n        for(let n = i; n < t.length; ++n){\n            const i = t[n];\n            let s = this.J_.get(i.timeWeight);\n            void 0 === s && (s = [], this.J_.set(i.timeWeight, s)), s.push({\n                index: n,\n                time: i.time,\n                weight: i.timeWeight,\n                originalTime: i.originalTime\n            });\n        }\n    }\n    su(t, i) {\n        const n = Math.ceil(i / t);\n        return null !== this.tr && this.tr.eu === n || (this.tr = {\n            Ha: this.ru(n),\n            eu: n\n        }), this.tr.Ha;\n    }\n    nu(t) {\n        if (0 === t) return void this.J_.clear();\n        const i = [];\n        this.J_.forEach((n, s)=>{\n            t <= n[0].index ? i.push(s) : n.splice(Bt(n, t, (i)=>i.index < t), 1 / 0);\n        });\n        for (const t of i)this.J_.delete(t);\n    }\n    ru(t) {\n        let i = [];\n        for (const n of Array.from(this.J_.keys()).sort((t, i)=>i - t)){\n            if (!this.J_.get(n)) continue;\n            const s = i;\n            i = [];\n            const e = s.length;\n            let r = 0;\n            const h = m(this.J_.get(n)), l = h.length;\n            let a = 1 / 0, o = -1 / 0;\n            for(let n = 0; n < l; n++){\n                const l = h[n], _ = l.index;\n                for(; r < e;){\n                    const t = s[r], n = t.index;\n                    if (!(n < _)) {\n                        a = n;\n                        break;\n                    }\n                    r++, i.push(t), o = n, a = 1 / 0;\n                }\n                if (a - _ >= t && _ - o >= t) i.push(l), o = _;\n                else if (this.Q_) return s;\n            }\n            for(; r < e; r++)i.push(s[r]);\n        }\n        return i;\n    }\n}\nclass yn {\n    constructor(t){\n        this.hu = t;\n    }\n    lu() {\n        return null === this.hu ? null : new xn(Math.floor(this.hu.Os()), Math.ceil(this.hu.ui()));\n    }\n    au() {\n        return this.hu;\n    }\n    static ou() {\n        return new yn(null);\n    }\n}\nfunction Cn(t, i) {\n    return t.weight > i.weight ? t : i;\n}\nclass Tn {\n    constructor(t, i, n, s){\n        this.__ = 0, this._u = null, this.uu = [], this.Mo = null, this.wo = null, this.cu = new kn, this.du = new Map, this.fu = yn.ou(), this.vu = !0, this.pu = new D, this.mu = new D, this.bu = new D, this.wu = null, this.gu = null, this.Mu = [], this.cn = i, this.yo = n, this.xu = i.rightOffset, this.Su = i.barSpacing, this.$i = t, this.q_ = s, this.ku(), this.cu.tu(i.uniformDistribution);\n    }\n    W() {\n        return this.cn;\n    }\n    yu(t) {\n        V(this.yo, t), this.Cu(), this.ku();\n    }\n    $h(t, i) {\n        var n;\n        V(this.cn, t), this.cn.fixLeftEdge && this.Tu(), this.cn.fixRightEdge && this.Pu(), void 0 !== t.barSpacing && this.$i.Gn(t.barSpacing), void 0 !== t.rightOffset && this.$i.Jn(t.rightOffset), void 0 !== t.minBarSpacing && this.$i.Gn(null !== (n = t.barSpacing) && void 0 !== n ? n : this.Su), this.Cu(), this.ku(), this.bu.m();\n    }\n    mn(t) {\n        var i, n;\n        return null !== (n = null === (i = this.uu[t]) || void 0 === i ? void 0 : i.time) && void 0 !== n ? n : null;\n    }\n    Ui(t) {\n        var i;\n        return null !== (i = this.uu[t]) && void 0 !== i ? i : null;\n    }\n    Va(t, i) {\n        if (this.uu.length < 1) return null;\n        if (this.q_.key(t) > this.q_.key(this.uu[this.uu.length - 1].time)) return i ? this.uu.length - 1 : null;\n        const n = Bt(this.uu, this.q_.key(t), (t, i)=>this.q_.key(t.time) < i);\n        return this.q_.key(t) < this.q_.key(this.uu[n].time) ? i ? n : null : n;\n    }\n    Ni() {\n        return 0 === this.__ || 0 === this.uu.length || null === this._u;\n    }\n    Da() {\n        return this.uu.length > 0;\n    }\n    Xs() {\n        return this.Ru(), this.fu.lu();\n    }\n    Du() {\n        return this.Ru(), this.fu.au();\n    }\n    Vu() {\n        const t = this.Xs();\n        if (null === t) return null;\n        const i = {\n            from: t.Os(),\n            to: t.ui()\n        };\n        return this.Ou(i);\n    }\n    Ou(t) {\n        const i = Math.round(t.from), n = Math.round(t.to), s = b(this.Bu()), e = b(this.Au());\n        return {\n            from: b(this.Ui(Math.max(s, i))),\n            to: b(this.Ui(Math.min(e, n)))\n        };\n    }\n    Iu(t) {\n        return {\n            from: b(this.Va(t.from, !0)),\n            to: b(this.Va(t.to, !0))\n        };\n    }\n    Hi() {\n        return this.__;\n    }\n    S_(t) {\n        if (!isFinite(t) || t <= 0) return;\n        if (this.__ === t) return;\n        const i = this.Du(), n = this.__;\n        if (this.__ = t, this.vu = !0, this.cn.lockVisibleTimeRangeOnResize && 0 !== n) {\n            const i = this.Su * t / n;\n            this.Su = i;\n        }\n        if (this.cn.fixLeftEdge && null !== i && i.Os() <= 0) {\n            const i = n - t;\n            this.xu -= Math.round(i / this.Su) + 1, this.vu = !0;\n        }\n        this.zu(), this.Lu();\n    }\n    It(t) {\n        if (this.Ni() || !B(t)) return 0;\n        const i = this.Eu() + this.xu - t;\n        return this.__ - (i + .5) * this.Su - 1;\n    }\n    Qs(t, i) {\n        const n = this.Eu(), s = void 0 === i ? 0 : i.from, e = void 0 === i ? t.length : i.to;\n        for(let i = s; i < e; i++){\n            const s = t[i].ot, e = n + this.xu - s, r = this.__ - (e + .5) * this.Su - 1;\n            t[i].nt = r;\n        }\n    }\n    Nu(t) {\n        return Math.ceil(this.Fu(t));\n    }\n    Jn(t) {\n        this.vu = !0, this.xu = t, this.Lu(), this.$i.Wu(), this.$i.Uh();\n    }\n    le() {\n        return this.Su;\n    }\n    Gn(t) {\n        this.ju(t), this.Lu(), this.$i.Wu(), this.$i.Uh();\n    }\n    Hu() {\n        return this.xu;\n    }\n    Ha() {\n        if (this.Ni()) return null;\n        if (null !== this.gu) return this.gu;\n        const t = this.Su, i = 5 * (this.$i.W().layout.fontSize + 4) / 8 * (this.cn.tickMarkMaxCharacterLength || 8), n = Math.round(i / t), s = b(this.Xs()), e = Math.max(s.Os(), s.Os() - n), r = Math.max(s.ui(), s.ui() - n), h = this.cu.su(t, i), l = this.Bu() + n, a = this.Au() - n, o = this.$u(), _ = this.cn.fixLeftEdge || o, u = this.cn.fixRightEdge || o;\n        let c = 0;\n        for (const t of h){\n            if (!(e <= t.index && t.index <= r)) continue;\n            let n;\n            c < this.Mu.length ? (n = this.Mu[c], n.coord = this.It(t.index), n.label = this.Uu(t), n.weight = t.weight) : (n = {\n                needAlignCoordinate: !1,\n                coord: this.It(t.index),\n                label: this.Uu(t),\n                weight: t.weight\n            }, this.Mu.push(n)), this.Su > i / 2 && !o ? n.needAlignCoordinate = !1 : n.needAlignCoordinate = _ && t.index <= l || u && t.index >= a, c++;\n        }\n        return this.Mu.length = c, this.gu = this.Mu, this.Mu;\n    }\n    qu() {\n        this.vu = !0, this.Gn(this.cn.barSpacing), this.Jn(this.cn.rightOffset);\n    }\n    Yu(t) {\n        this.vu = !0, this._u = t, this.Lu(), this.Tu();\n    }\n    Zu(t, i) {\n        const n = this.Fu(t), s = this.le(), e = s + i * (s / 10);\n        this.Gn(e), this.cn.rightBarStaysOnScroll || this.Jn(this.Hu() + (n - this.Fu(t)));\n    }\n    Go(t) {\n        this.Mo && this.n_(), null === this.wo && null === this.wu && (this.Ni() || (this.wo = t, this.Xu()));\n    }\n    Jo(t) {\n        if (null === this.wu) return;\n        const i = kt(this.__ - t, 0, this.__), n = kt(this.__ - b(this.wo), 0, this.__);\n        0 !== i && 0 !== n && this.Gn(this.wu.le * i / n);\n    }\n    Qo() {\n        null !== this.wo && (this.wo = null, this.Ku());\n    }\n    t_(t) {\n        null === this.Mo && null === this.wu && (this.Ni() || (this.Mo = t, this.Xu()));\n    }\n    i_(t) {\n        if (null === this.Mo) return;\n        const i = (this.Mo - t) / this.le();\n        this.xu = b(this.wu).Hu + i, this.vu = !0, this.Lu();\n    }\n    n_() {\n        null !== this.Mo && (this.Mo = null, this.Ku());\n    }\n    Gu() {\n        this.Ju(this.cn.rightOffset);\n    }\n    Ju(t, i = 400) {\n        if (!isFinite(t)) throw new RangeError(\"offset is required and must be finite number\");\n        if (!isFinite(i) || i <= 0) throw new RangeError(\"animationDuration (optional) must be finite positive number\");\n        const n = this.xu, s = performance.now();\n        this.$i.Zn({\n            Qu: (t)=>(t - s) / i >= 1,\n            tc: (e)=>{\n                const r = (e - s) / i;\n                return r >= 1 ? t : n + (t - n) * r;\n            }\n        });\n    }\n    bt(t, i) {\n        this.vu = !0, this.uu = t, this.cu.iu(t, i), this.Lu();\n    }\n    nc() {\n        return this.pu;\n    }\n    sc() {\n        return this.mu;\n    }\n    ec() {\n        return this.bu;\n    }\n    Eu() {\n        return this._u || 0;\n    }\n    rc(t) {\n        const i = t.G_();\n        this.ju(this.__ / i), this.xu = t.ui() - this.Eu(), this.Lu(), this.vu = !0, this.$i.Wu(), this.$i.Uh();\n    }\n    hc() {\n        const t = this.Bu(), i = this.Au();\n        null !== t && null !== i && this.rc(new xn(t, i + this.cn.rightOffset));\n    }\n    lc(t) {\n        const i = new xn(t.from, t.to);\n        this.rc(i);\n    }\n    qi(t) {\n        return void 0 !== this.yo.timeFormatter ? this.yo.timeFormatter(t.originalTime) : this.q_.formatHorzItem(t.time);\n    }\n    $u() {\n        const { handleScroll: t, handleScale: i } = this.$i.W();\n        return !(t.horzTouchDrag || t.mouseWheel || t.pressedMouseMove || t.vertTouchDrag || i.axisDoubleClickReset.time || i.axisPressedMouseMove.time || i.mouseWheel || i.pinch);\n    }\n    Bu() {\n        return 0 === this.uu.length ? null : 0;\n    }\n    Au() {\n        return 0 === this.uu.length ? null : this.uu.length - 1;\n    }\n    ac(t) {\n        return (this.__ - 1 - t) / this.Su;\n    }\n    Fu(t) {\n        const i = this.ac(t), n = this.Eu() + this.xu - i;\n        return Math.round(1e6 * n) / 1e6;\n    }\n    ju(t) {\n        const i = this.Su;\n        this.Su = t, this.zu(), i !== this.Su && (this.vu = !0, this.oc());\n    }\n    Ru() {\n        if (!this.vu) return;\n        if (this.vu = !1, this.Ni()) return void this._c(yn.ou());\n        const t = this.Eu(), i = this.__ / this.Su, n = this.xu + t, s = new xn(n - i + 1, n);\n        this._c(new yn(s));\n    }\n    zu() {\n        const t = this.uc();\n        if (this.Su < t && (this.Su = t, this.vu = !0), 0 !== this.__) {\n            const t = .5 * this.__;\n            this.Su > t && (this.Su = t, this.vu = !0);\n        }\n    }\n    uc() {\n        return this.cn.fixLeftEdge && this.cn.fixRightEdge && 0 !== this.uu.length ? this.__ / this.uu.length : this.cn.minBarSpacing;\n    }\n    Lu() {\n        const t = this.cc();\n        null !== t && this.xu < t && (this.xu = t, this.vu = !0);\n        const i = this.dc();\n        this.xu > i && (this.xu = i, this.vu = !0);\n    }\n    cc() {\n        const t = this.Bu(), i = this._u;\n        if (null === t || null === i) return null;\n        return t - i - 1 + (this.cn.fixLeftEdge ? this.__ / this.Su : Math.min(2, this.uu.length));\n    }\n    dc() {\n        return this.cn.fixRightEdge ? 0 : this.__ / this.Su - Math.min(2, this.uu.length);\n    }\n    Xu() {\n        this.wu = {\n            le: this.le(),\n            Hu: this.Hu()\n        };\n    }\n    Ku() {\n        this.wu = null;\n    }\n    Uu(t) {\n        let i = this.du.get(t.weight);\n        return void 0 === i && (i = new Mn((t)=>this.fc(t), this.q_), this.du.set(t.weight, i)), i.Y_(t);\n    }\n    fc(t) {\n        return this.q_.formatTickmark(t, this.yo);\n    }\n    _c(t) {\n        const i = this.fu;\n        this.fu = t, Sn(i.lu(), this.fu.lu()) || this.pu.m(), Sn(i.au(), this.fu.au()) || this.mu.m(), this.oc();\n    }\n    oc() {\n        this.gu = null;\n    }\n    Cu() {\n        this.oc(), this.du.clear();\n    }\n    ku() {\n        this.q_.updateFormatter(this.yo);\n    }\n    Tu() {\n        if (!this.cn.fixLeftEdge) return;\n        const t = this.Bu();\n        if (null === t) return;\n        const i = this.Xs();\n        if (null === i) return;\n        const n = i.Os() - t;\n        if (n < 0) {\n            const t = this.xu - n - 1;\n            this.Jn(t);\n        }\n        this.zu();\n    }\n    Pu() {\n        this.Lu(), this.zu();\n    }\n}\nclass Pn {\n    X(t, i, n) {\n        t.useMediaCoordinateSpace((t)=>this.K(t, i, n));\n    }\n    gl(t, i, n) {\n        t.useMediaCoordinateSpace((t)=>this.vc(t, i, n));\n    }\n    vc(t, i, n) {}\n}\nclass Rn extends Pn {\n    constructor(t){\n        super(), this.mc = new Map, this.zt = t;\n    }\n    K(t) {}\n    vc(t) {\n        if (!this.zt.yt) return;\n        const { context: i, mediaSize: n } = t;\n        let s = 0;\n        for (const t of this.zt.bc){\n            if (0 === t.Kt.length) continue;\n            i.font = t.R;\n            const e = this.wc(i, t.Kt);\n            e > n.width ? t.Zu = n.width / e : t.Zu = 1, s += t.gc * t.Zu;\n        }\n        let e = 0;\n        switch(this.zt.Mc){\n            case \"top\":\n                e = 0;\n                break;\n            case \"center\":\n                e = Math.max((n.height - s) / 2, 0);\n                break;\n            case \"bottom\":\n                e = Math.max(n.height - s, 0);\n        }\n        i.fillStyle = this.zt.V;\n        for (const t of this.zt.bc){\n            i.save();\n            let s = 0;\n            switch(this.zt.xc){\n                case \"left\":\n                    i.textAlign = \"left\", s = t.gc / 2;\n                    break;\n                case \"center\":\n                    i.textAlign = \"center\", s = n.width / 2;\n                    break;\n                case \"right\":\n                    i.textAlign = \"right\", s = n.width - 1 - t.gc / 2;\n            }\n            i.translate(s, e), i.textBaseline = \"top\", i.font = t.R, i.scale(t.Zu, t.Zu), i.fillText(t.Kt, 0, t.Sc), i.restore(), e += t.gc * t.Zu;\n        }\n    }\n    wc(t, i) {\n        const n = this.kc(t.font);\n        let s = n.get(i);\n        return void 0 === s && (s = t.measureText(i).width, n.set(i, s)), s;\n    }\n    kc(t) {\n        let i = this.mc.get(t);\n        return void 0 === i && (i = new Map, this.mc.set(t, i)), i;\n    }\n}\nclass Dn {\n    constructor(t){\n        this.ft = !0, this.Ft = {\n            yt: !1,\n            V: \"\",\n            bc: [],\n            Mc: \"center\",\n            xc: \"center\"\n        }, this.Wt = new Rn(this.Ft), this.jt = t;\n    }\n    bt() {\n        this.ft = !0;\n    }\n    gt() {\n        return this.ft && (this.Mt(), this.ft = !1), this.Wt;\n    }\n    Mt() {\n        const t = this.jt.W(), i = this.Ft;\n        i.yt = t.visible, i.yt && (i.V = t.color, i.xc = t.horzAlign, i.Mc = t.vertAlign, i.bc = [\n            {\n                Kt: t.text,\n                R: F(t.fontSize, t.fontFamily, t.fontStyle),\n                gc: 1.2 * t.fontSize,\n                Sc: 0,\n                Zu: 0\n            }\n        ]);\n    }\n}\nclass Vn extends lt {\n    constructor(t, i){\n        super(), this.cn = i, this.wn = new Dn(this);\n    }\n    Rn() {\n        return [];\n    }\n    Pn() {\n        return [\n            this.wn\n        ];\n    }\n    W() {\n        return this.cn;\n    }\n    Vn() {\n        this.wn.bt();\n    }\n}\nvar On, Bn, An, In, zn;\n!function(t) {\n    t[t.OnTouchEnd = 0] = \"OnTouchEnd\", t[t.OnNextTap = 1] = \"OnNextTap\";\n}(On || (On = {}));\nclass Ln {\n    constructor(t, i, n){\n        this.yc = [], this.Cc = [], this.__ = 0, this.Tc = null, this.Pc = new D, this.Rc = new D, this.Dc = null, this.Vc = t, this.cn = i, this.q_ = n, this.Oc = new W(this), this.yl = new Tn(this, i.timeScale, this.cn.localization, n), this.vt = new ot(this, i.crosshair), this.Bc = new Ji(i.crosshair), this.Ac = new Vn(this, i.watermark), this.Ic(), this.yc[0].x_(2e3), this.zc = this.Lc(0), this.Ec = this.Lc(1);\n    }\n    Kl() {\n        this.Nc(ut.es());\n    }\n    Uh() {\n        this.Nc(ut.ss());\n    }\n    oa() {\n        this.Nc(new ut(1));\n    }\n    Gl(t) {\n        const i = this.Fc(t);\n        this.Nc(i);\n    }\n    Wc() {\n        return this.Tc;\n    }\n    jc(t) {\n        const i = this.Tc;\n        this.Tc = t, null !== i && this.Gl(i.Hc), null !== t && this.Gl(t.Hc);\n    }\n    W() {\n        return this.cn;\n    }\n    $h(t) {\n        V(this.cn, t), this.yc.forEach((i)=>i.b_(t)), void 0 !== t.timeScale && this.yl.$h(t.timeScale), void 0 !== t.localization && this.yl.yu(t.localization), (t.leftPriceScale || t.rightPriceScale) && this.Pc.m(), this.zc = this.Lc(0), this.Ec = this.Lc(1), this.Kl();\n    }\n    $c(t, i) {\n        if (\"left\" === t) return void this.$h({\n            leftPriceScale: i\n        });\n        if (\"right\" === t) return void this.$h({\n            rightPriceScale: i\n        });\n        const n = this.Uc(t);\n        null !== n && (n.Dt.$h(i), this.Pc.m());\n    }\n    Uc(t) {\n        for (const i of this.yc){\n            const n = i.w_(t);\n            if (null !== n) return {\n                Ht: i,\n                Dt: n\n            };\n        }\n        return null;\n    }\n    St() {\n        return this.yl;\n    }\n    qc() {\n        return this.yc;\n    }\n    Yc() {\n        return this.Ac;\n    }\n    Zc() {\n        return this.vt;\n    }\n    Xc() {\n        return this.Rc;\n    }\n    Kc(t, i) {\n        t.Lo(i), this.Wu();\n    }\n    S_(t) {\n        this.__ = t, this.yl.S_(this.__), this.yc.forEach((i)=>i.S_(t)), this.Wu();\n    }\n    Ic(t) {\n        const i = new gn(this.yl, this);\n        void 0 !== t ? this.yc.splice(t, 0, i) : this.yc.push(i);\n        const n = void 0 === t ? this.yc.length - 1 : t, s = ut.es();\n        return s.Nn(n, {\n            Fn: 0,\n            Wn: !0\n        }), this.Nc(s), i;\n    }\n    V_(t, i, n) {\n        t.V_(i, n);\n    }\n    O_(t, i, n) {\n        t.O_(i, n), this.Jl(), this.Nc(this.Gc(t, 2));\n    }\n    B_(t, i) {\n        t.B_(i), this.Nc(this.Gc(t, 2));\n    }\n    A_(t, i, n) {\n        i.Vo() || t.A_(i, n);\n    }\n    I_(t, i, n) {\n        i.Vo() || (t.I_(i, n), this.Jl(), this.Nc(this.Gc(t, 2)));\n    }\n    z_(t, i) {\n        i.Vo() || (t.z_(i), this.Nc(this.Gc(t, 2)));\n    }\n    E_(t, i) {\n        t.E_(i), this.Nc(this.Gc(t, 2));\n    }\n    Jc(t) {\n        this.yl.Go(t);\n    }\n    Qc(t, i) {\n        const n = this.St();\n        if (n.Ni() || 0 === i) return;\n        const s = n.Hi();\n        t = Math.max(1, Math.min(t, s)), n.Zu(t, i), this.Wu();\n    }\n    td(t) {\n        this.nd(0), this.sd(t), this.ed();\n    }\n    rd(t) {\n        this.yl.Jo(t), this.Wu();\n    }\n    hd() {\n        this.yl.Qo(), this.Uh();\n    }\n    nd(t) {\n        this.yl.t_(t);\n    }\n    sd(t) {\n        this.yl.i_(t), this.Wu();\n    }\n    ed() {\n        this.yl.n_(), this.Uh();\n    }\n    wt() {\n        return this.Cc;\n    }\n    ld(t, i, n, s, e) {\n        this.vt.gn(t, i);\n        let r = NaN, h = this.yl.Nu(t);\n        const l = this.yl.Xs();\n        null !== l && (h = Math.min(Math.max(l.Os(), h), l.ui()));\n        const a = s.vn(), o = a.Ct();\n        null !== o && (r = a.pn(i, o)), r = this.Bc.Oa(r, h, s), this.vt.kn(h, r, s), this.oa(), e || this.Rc.m(this.vt.xt(), {\n            x: t,\n            y: i\n        }, n);\n    }\n    ad(t, i, n) {\n        const s = n.vn(), e = s.Ct(), r = s.Rt(t, b(e)), h = this.yl.Va(i, !0), l = this.yl.It(b(h));\n        this.ld(l, r, null, n, !0);\n    }\n    od(t) {\n        this.Zc().Cn(), this.oa(), t || this.Rc.m(null, null, null);\n    }\n    Jl() {\n        const t = this.vt.Ht();\n        if (null !== t) {\n            const i = this.vt.xn(), n = this.vt.Sn();\n            this.ld(i, n, null, t);\n        }\n        this.vt.Vn();\n    }\n    _d(t, i, n) {\n        const s = this.yl.mn(0);\n        void 0 !== i && void 0 !== n && this.yl.bt(i, n);\n        const e = this.yl.mn(0), r = this.yl.Eu(), h = this.yl.Xs();\n        if (null !== h && null !== s && null !== e) {\n            const i = h.Kr(r), l = this.q_.key(s) > this.q_.key(e), a = null !== t && t > r && !l, o = this.yl.W().allowShiftVisibleRangeOnWhitespaceReplacement, _ = i && (!(void 0 === n) || o) && this.yl.W().shiftVisibleRangeOnNewBar;\n            if (a && !_) {\n                const i = t - r;\n                this.yl.Jn(this.yl.Hu() - i);\n            }\n        }\n        this.yl.Yu(t);\n    }\n    ia(t) {\n        null !== t && t.F_();\n    }\n    dr(t) {\n        const i = this.yc.find((i)=>i.Uo().includes(t));\n        return void 0 === i ? null : i;\n    }\n    Wu() {\n        this.Ac.Vn(), this.yc.forEach((t)=>t.F_()), this.Jl();\n    }\n    S() {\n        this.yc.forEach((t)=>t.S()), this.yc.length = 0, this.cn.localization.priceFormatter = void 0, this.cn.localization.percentageFormatter = void 0, this.cn.localization.timeFormatter = void 0;\n    }\n    ud() {\n        return this.Oc;\n    }\n    br() {\n        return this.Oc.W();\n    }\n    g_() {\n        return this.Pc;\n    }\n    dd(t, i, n) {\n        const s = this.yc[0], e = this.fd(i, t, s, n);\n        return this.Cc.push(e), 1 === this.Cc.length ? this.Kl() : this.Uh(), e;\n    }\n    vd(t) {\n        const i = this.dr(t), n = this.Cc.indexOf(t);\n        p(-1 !== n, \"Series not found\"), this.Cc.splice(n, 1), b(i).Zo(t), t.S && t.S();\n    }\n    Xl(t, i) {\n        const n = b(this.dr(t));\n        n.Zo(t);\n        const s = this.Uc(i);\n        if (null === s) {\n            const s = t.Xi();\n            n.qo(t, i, s);\n        } else {\n            const e = s.Ht === n ? t.Xi() : void 0;\n            s.Ht.qo(t, i, e);\n        }\n    }\n    hc() {\n        const t = ut.ss();\n        t.$n(), this.Nc(t);\n    }\n    pd(t) {\n        const i = ut.ss();\n        i.Yn(t), this.Nc(i);\n    }\n    Kn() {\n        const t = ut.ss();\n        t.Kn(), this.Nc(t);\n    }\n    Gn(t) {\n        const i = ut.ss();\n        i.Gn(t), this.Nc(i);\n    }\n    Jn(t) {\n        const i = ut.ss();\n        i.Jn(t), this.Nc(i);\n    }\n    Zn(t) {\n        const i = ut.ss();\n        i.Zn(t), this.Nc(i);\n    }\n    Un() {\n        const t = ut.ss();\n        t.Un(), this.Nc(t);\n    }\n    md() {\n        return this.cn.rightPriceScale.visible ? \"right\" : \"left\";\n    }\n    bd() {\n        return this.Ec;\n    }\n    q() {\n        return this.zc;\n    }\n    Bt(t) {\n        const i = this.Ec, n = this.zc;\n        if (i === n) return i;\n        if (t = Math.max(0, Math.min(100, Math.round(100 * t))), null === this.Dc || this.Dc.Ps !== n || this.Dc.Rs !== i) this.Dc = {\n            Ps: n,\n            Rs: i,\n            wd: new Map\n        };\n        else {\n            const i = this.Dc.wd.get(t);\n            if (void 0 !== i) return i;\n        }\n        const s = function(t, i, n) {\n            const [s, e, r, h] = T(t), [l, a, o, _] = T(i), u = [\n                M(s + n * (l - s)),\n                M(e + n * (a - e)),\n                M(r + n * (o - r)),\n                x(h + n * (_ - h))\n            ];\n            return `rgba(${u[0]}, ${u[1]}, ${u[2]}, ${u[3]})`;\n        }(n, i, t / 100);\n        return this.Dc.wd.set(t, s), s;\n    }\n    Gc(t, i) {\n        const n = new ut(i);\n        if (null !== t) {\n            const s = this.yc.indexOf(t);\n            n.Nn(s, {\n                Fn: i\n            });\n        }\n        return n;\n    }\n    Fc(t, i) {\n        return void 0 === i && (i = 2), this.Gc(this.dr(t), i);\n    }\n    Nc(t) {\n        this.Vc && this.Vc(t), this.yc.forEach((t)=>t.j_().qh().bt());\n    }\n    fd(t, i, n, s) {\n        const e = new Gi(this, t, i, n, s), r = void 0 !== t.priceScaleId ? t.priceScaleId : this.md();\n        return n.qo(e, r), _t(r) || e.$h(t), e;\n    }\n    Lc(t) {\n        const i = this.cn.layout;\n        return \"gradient\" === i.background.type ? 0 === t ? i.background.topColor : i.background.bottomColor : i.background.color;\n    }\n}\nfunction En(t) {\n    return !O(t) && !A(t);\n}\nfunction Nn(t) {\n    return O(t);\n}\n!function(t) {\n    t[t.Disabled = 0] = \"Disabled\", t[t.Continuous = 1] = \"Continuous\", t[t.OnDataUpdate = 2] = \"OnDataUpdate\";\n}(Bn || (Bn = {})), function(t) {\n    t[t.LastBar = 0] = \"LastBar\", t[t.LastVisible = 1] = \"LastVisible\";\n}(An || (An = {})), function(t) {\n    t.Solid = \"solid\", t.VerticalGradient = \"gradient\";\n}(In || (In = {})), function(t) {\n    t[t.Year = 0] = \"Year\", t[t.Month = 1] = \"Month\", t[t.DayOfMonth = 2] = \"DayOfMonth\", t[t.Time = 3] = \"Time\", t[t.TimeWithSeconds = 4] = \"TimeWithSeconds\";\n}(zn || (zn = {}));\nconst Fn = (t)=>t.getUTCFullYear();\nfunction Wn(t, i, n) {\n    return i.replace(/yyyy/g, ((t)=>dt(Fn(t), 4))(t)).replace(/yy/g, ((t)=>dt(Fn(t) % 100, 2))(t)).replace(/MMMM/g, ((t, i)=>new Date(t.getUTCFullYear(), t.getUTCMonth(), 1).toLocaleString(i, {\n            month: \"long\"\n        }))(t, n)).replace(/MMM/g, ((t, i)=>new Date(t.getUTCFullYear(), t.getUTCMonth(), 1).toLocaleString(i, {\n            month: \"short\"\n        }))(t, n)).replace(/MM/g, ((t)=>dt(((t)=>t.getUTCMonth() + 1)(t), 2))(t)).replace(/dd/g, ((t)=>dt(((t)=>t.getUTCDate())(t), 2))(t));\n}\nclass jn {\n    constructor(t = \"yyyy-MM-dd\", i = \"default\"){\n        this.gd = t, this.Md = i;\n    }\n    Y_(t) {\n        return Wn(t, this.gd, this.Md);\n    }\n}\nclass Hn {\n    constructor(t){\n        this.xd = t || \"%h:%m:%s\";\n    }\n    Y_(t) {\n        return this.xd.replace(\"%h\", dt(t.getUTCHours(), 2)).replace(\"%m\", dt(t.getUTCMinutes(), 2)).replace(\"%s\", dt(t.getUTCSeconds(), 2));\n    }\n}\nconst $n = {\n    Sd: \"yyyy-MM-dd\",\n    kd: \"%h:%m:%s\",\n    yd: \" \",\n    Cd: \"default\"\n};\nclass Un {\n    constructor(t = {}){\n        const i = Object.assign(Object.assign({}, $n), t);\n        this.Td = new jn(i.Sd, i.Cd), this.Pd = new Hn(i.kd), this.Rd = i.yd;\n    }\n    Y_(t) {\n        return `${this.Td.Y_(t)}${this.Rd}${this.Pd.Y_(t)}`;\n    }\n}\nfunction qn(t) {\n    return 60 * t * 60 * 1e3;\n}\nfunction Yn(t) {\n    return 60 * t * 1e3;\n}\nconst Zn = [\n    {\n        Dd: (Xn = 1, 1e3 * Xn),\n        Vd: 10\n    },\n    {\n        Dd: Yn(1),\n        Vd: 20\n    },\n    {\n        Dd: Yn(5),\n        Vd: 21\n    },\n    {\n        Dd: Yn(30),\n        Vd: 22\n    },\n    {\n        Dd: qn(1),\n        Vd: 30\n    },\n    {\n        Dd: qn(3),\n        Vd: 31\n    },\n    {\n        Dd: qn(6),\n        Vd: 32\n    },\n    {\n        Dd: qn(12),\n        Vd: 33\n    }\n];\nvar Xn;\nfunction Kn(t, i) {\n    if (t.getUTCFullYear() !== i.getUTCFullYear()) return 70;\n    if (t.getUTCMonth() !== i.getUTCMonth()) return 60;\n    if (t.getUTCDate() !== i.getUTCDate()) return 50;\n    for(let n = Zn.length - 1; n >= 0; --n)if (Math.floor(i.getTime() / Zn[n].Dd) !== Math.floor(t.getTime() / Zn[n].Dd)) return Zn[n].Vd;\n    return 0;\n}\nfunction Gn(t) {\n    let i = t;\n    if (A(t) && (i = Qn(t)), !En(i)) throw new Error(\"time must be of type BusinessDay\");\n    const n = new Date(Date.UTC(i.year, i.month - 1, i.day, 0, 0, 0, 0));\n    return {\n        Od: Math.round(n.getTime() / 1e3),\n        Bd: i\n    };\n}\nfunction Jn(t) {\n    if (!Nn(t)) throw new Error(\"time must be of type isUTCTimestamp\");\n    return {\n        Od: t\n    };\n}\nfunction Qn(t) {\n    const i = new Date(t);\n    if (isNaN(i.getTime())) throw new Error(`Invalid date string=${t}, expected format=yyyy-mm-dd`);\n    return {\n        day: i.getUTCDate(),\n        month: i.getUTCMonth() + 1,\n        year: i.getUTCFullYear()\n    };\n}\nfunction ts(t) {\n    A(t.time) && (t.time = Qn(t.time));\n}\nclass is {\n    options() {\n        return this.cn;\n    }\n    setOptions(t) {\n        this.cn = t, this.updateFormatter(t.localization);\n    }\n    preprocessData(t) {\n        Array.isArray(t) ? function(t) {\n            t.forEach(ts);\n        }(t) : ts(t);\n    }\n    createConverterToInternalObj(t) {\n        return b(function(t) {\n            return 0 === t.length ? null : En(t[0].time) || A(t[0].time) ? Gn : Jn;\n        }(t));\n    }\n    key(t) {\n        return \"object\" == typeof t && \"Od\" in t ? t.Od : this.key(this.convertHorzItemToInternal(t));\n    }\n    cacheKey(t) {\n        const i = t;\n        return void 0 === i.Bd ? new Date(1e3 * i.Od).getTime() : new Date(Date.UTC(i.Bd.year, i.Bd.month - 1, i.Bd.day)).getTime();\n    }\n    convertHorzItemToInternal(t) {\n        return Nn(i = t) ? Jn(i) : En(i) ? Gn(i) : Gn(Qn(i));\n        var i;\n    }\n    updateFormatter(t) {\n        if (!this.cn) return;\n        const i = t.dateFormat;\n        this.cn.timeScale.timeVisible ? this.Ad = new Un({\n            Sd: i,\n            kd: this.cn.timeScale.secondsVisible ? \"%h:%m:%s\" : \"%h:%m\",\n            yd: \"   \",\n            Cd: t.locale\n        }) : this.Ad = new jn(i, t.locale);\n    }\n    formatHorzItem(t) {\n        const i = t;\n        return this.Ad.Y_(new Date(1e3 * i.Od));\n    }\n    formatTickmark(t, i) {\n        const n = function(t, i, n) {\n            switch(t){\n                case 0:\n                case 10:\n                    return i ? n ? 4 : 3 : 2;\n                case 20:\n                case 21:\n                case 22:\n                case 30:\n                case 31:\n                case 32:\n                case 33:\n                    return i ? 3 : 2;\n                case 50:\n                    return 2;\n                case 60:\n                    return 1;\n                case 70:\n                    return 0;\n            }\n        }(t.weight, this.cn.timeScale.timeVisible, this.cn.timeScale.secondsVisible), s = this.cn.timeScale;\n        if (void 0 !== s.tickMarkFormatter) {\n            const e = s.tickMarkFormatter(t.originalTime, n, i.locale);\n            if (null !== e) return e;\n        }\n        return function(t, i, n) {\n            const s = {};\n            switch(i){\n                case 0:\n                    s.year = \"numeric\";\n                    break;\n                case 1:\n                    s.month = \"short\";\n                    break;\n                case 2:\n                    s.day = \"numeric\";\n                    break;\n                case 3:\n                    s.hour12 = !1, s.hour = \"2-digit\", s.minute = \"2-digit\";\n                    break;\n                case 4:\n                    s.hour12 = !1, s.hour = \"2-digit\", s.minute = \"2-digit\", s.second = \"2-digit\";\n            }\n            const e = void 0 === t.Bd ? new Date(1e3 * t.Od) : new Date(Date.UTC(t.Bd.year, t.Bd.month - 1, t.Bd.day));\n            return new Date(e.getUTCFullYear(), e.getUTCMonth(), e.getUTCDate(), e.getUTCHours(), e.getUTCMinutes(), e.getUTCSeconds(), e.getUTCMilliseconds()).toLocaleString(n, s);\n        }(t.time, n, i.locale);\n    }\n    maxTickMarkWeight(t) {\n        let i = t.reduce(Cn, t[0]).weight;\n        return i > 30 && i < 50 && (i = 30), i;\n    }\n    fillWeightsForPoints(t, i) {\n        !function(t, i = 0) {\n            if (0 === t.length) return;\n            let n = 0 === i ? null : t[i - 1].time.Od, s = null !== n ? new Date(1e3 * n) : null, e = 0;\n            for(let r = i; r < t.length; ++r){\n                const i = t[r], h = new Date(1e3 * i.time.Od);\n                null !== s && (i.timeWeight = Kn(h, s)), e += i.time.Od - (n || i.time.Od), n = i.time.Od, s = h;\n            }\n            if (0 === i && t.length > 1) {\n                const i = Math.ceil(e / (t.length - 1)), n = new Date(1e3 * (t[0].time.Od - i));\n                t[0].timeWeight = Kn(new Date(1e3 * t[0].time.Od), n);\n            }\n        }(t, i);\n    }\n    static Id(t) {\n        return V({\n            localization: {\n                dateFormat: \"dd MMM 'yy\"\n            }\n        }, null != t ? t : {});\n    }\n}\nconst ns = \"undefined\" != \"undefined\";\nfunction ss() {\n    return !!ns && window.navigator.userAgent.toLowerCase().indexOf(\"firefox\") > -1;\n}\nfunction es() {\n    return !!ns && /iPhone|iPad|iPod/.test(window.navigator.platform);\n}\nfunction rs(t) {\n    return t + t % 2;\n}\nfunction hs(t, i) {\n    return t.zd - i.zd;\n}\nfunction ls(t, i, n) {\n    const s = (t.zd - i.zd) / (t.ot - i.ot);\n    return Math.sign(s) * Math.min(Math.abs(s), n);\n}\nclass as {\n    constructor(t, i, n, s){\n        this.Ld = null, this.Ed = null, this.Nd = null, this.Fd = null, this.Wd = null, this.jd = 0, this.Hd = 0, this.$d = t, this.Ud = i, this.qd = n, this.rs = s;\n    }\n    Yd(t, i) {\n        if (null !== this.Ld) {\n            if (this.Ld.ot === i) return void (this.Ld.zd = t);\n            if (Math.abs(this.Ld.zd - t) < this.rs) return;\n        }\n        this.Fd = this.Nd, this.Nd = this.Ed, this.Ed = this.Ld, this.Ld = {\n            ot: i,\n            zd: t\n        };\n    }\n    Vr(t, i) {\n        if (null === this.Ld || null === this.Ed) return;\n        if (i - this.Ld.ot > 50) return;\n        let n = 0;\n        const s = ls(this.Ld, this.Ed, this.Ud), e = hs(this.Ld, this.Ed), r = [\n            s\n        ], h = [\n            e\n        ];\n        if (n += e, null !== this.Nd) {\n            const t = ls(this.Ed, this.Nd, this.Ud);\n            if (Math.sign(t) === Math.sign(s)) {\n                const i = hs(this.Ed, this.Nd);\n                if (r.push(t), h.push(i), n += i, null !== this.Fd) {\n                    const t = ls(this.Nd, this.Fd, this.Ud);\n                    if (Math.sign(t) === Math.sign(s)) {\n                        const i = hs(this.Nd, this.Fd);\n                        r.push(t), h.push(i), n += i;\n                    }\n                }\n            }\n        }\n        let l = 0;\n        for(let t = 0; t < r.length; ++t)l += h[t] / n * r[t];\n        Math.abs(l) < this.$d || (this.Wd = {\n            zd: t,\n            ot: i\n        }, this.Hd = l, this.jd = function(t, i) {\n            const n = Math.log(i);\n            return Math.log(1 * n / -t) / n;\n        }(Math.abs(l), this.qd));\n    }\n    tc(t) {\n        const i = b(this.Wd), n = t - i.ot;\n        return i.zd + this.Hd * (Math.pow(this.qd, n) - 1) / Math.log(this.qd);\n    }\n    Qu(t) {\n        return null === this.Wd || this.Zd(t) === this.jd;\n    }\n    Zd(t) {\n        const i = t - b(this.Wd).ot;\n        return Math.min(i, this.jd);\n    }\n}\nclass os {\n    constructor(t, i){\n        this.Xd = void 0, this.Kd = void 0, this.Gd = void 0, this.en = !1, this.Jd = t, this.Qd = i, this.tf();\n    }\n    bt() {\n        this.tf();\n    }\n    if() {\n        this.Xd && this.Jd.removeChild(this.Xd), this.Kd && this.Jd.removeChild(this.Kd), this.Xd = void 0, this.Kd = void 0;\n    }\n    nf() {\n        return this.en !== this.sf() || this.Gd !== this.ef();\n    }\n    ef() {\n        return P(T(this.Qd.W().layout.textColor)) > 160 ? \"dark\" : \"light\";\n    }\n    sf() {\n        return this.Qd.W().layout.attributionLogo;\n    }\n    rf() {\n        const t = new URL(location.href);\n        return t.hostname ? \"&utm_source=\" + t.hostname + t.pathname : \"\";\n    }\n    tf() {\n        this.nf() && (this.if(), this.en = this.sf(), this.en && (this.Gd = this.ef(), this.Kd = document.createElement(\"style\"), this.Kd.innerText = \"a#tv-attr-logo{--fill:#131722;--stroke:#fff;position:absolute;left:10px;bottom:10px;height:19px;width:35px;margin:0;padding:0;border:0;z-index:3;}a#tv-attr-logo[data-dark]{--fill:#D1D4DC;--stroke:#131722;}\", this.Xd = document.createElement(\"a\"), this.Xd.href = `https://www.tradingview.com/?utm_medium=lwc-link&utm_campaign=lwc-chart${this.rf()}`, this.Xd.title = \"Charting by TradingView\", this.Xd.id = \"tv-attr-logo\", this.Xd.target = \"_blank\", this.Xd.innerHTML = '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 35 19\" width=\"35\" height=\"19\" fill=\"none\"><g fill-rule=\"evenodd\" clip-path=\"url(#a)\" clip-rule=\"evenodd\"><path fill=\"var(--stroke)\" d=\"M2 0H0v10h6v9h21.4l.5-1.3 6-15 1-2.7H23.7l-.5 1.3-.2.6a5 5 0 0 0-7-.9V0H2Zm20 17h4l5.2-13 .8-2h-7l-1 2.5-.2.5-1.5 3.8-.3.7V17Zm-.8-10a3 3 0 0 0 .7-2.7A3 3 0 1 0 16.8 7h4.4ZM14 7V2H2v6h6v9h4V7h2Z\"/><path fill=\"var(--fill)\" d=\"M14 2H2v6h6v9h6V2Zm12 15h-7l6-15h7l-6 15Zm-7-9a3 3 0 1 0 0-6 3 3 0 0 0 0 6Z\"/></g><defs><clipPath id=\"a\"><path fill=\"var(--stroke)\" d=\"M0 0h35v19H0z\"/></clipPath></defs></svg>', this.Xd.toggleAttribute(\"data-dark\", \"dark\" === this.Gd), this.Jd.appendChild(this.Kd), this.Jd.appendChild(this.Xd)));\n    }\n}\nfunction _s(t, n) {\n    const s = b(t.ownerDocument).createElement(\"canvas\");\n    t.appendChild(s);\n    const e = (0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.bindCanvasElementBitmapSizeTo)(s, {\n        type: \"device-pixel-content-box\",\n        options: {\n            allowResizeObserver: !1\n        },\n        transform: (t, i)=>({\n                width: Math.max(t.width, i.width),\n                height: Math.max(t.height, i.height)\n            })\n    });\n    return e.resizeCanvasElement(n), e;\n}\nfunction us(t) {\n    var i;\n    t.width = 1, t.height = 1, null === (i = t.getContext(\"2d\")) || void 0 === i || i.clearRect(0, 0, 1, 1);\n}\nfunction cs(t, i, n, s) {\n    t.gl && t.gl(i, n, s);\n}\nfunction ds(t, i, n, s) {\n    t.X(i, n, s);\n}\nfunction fs(t, i, n, s) {\n    const e = t(n, s);\n    for (const t of e){\n        const n = t.gt();\n        null !== n && i(n);\n    }\n}\nfunction vs(t) {\n    ns && void 0 !== window.chrome && t.addEventListener(\"mousedown\", (t)=>{\n        if (1 === t.button) return t.preventDefault(), !1;\n    });\n}\nclass ps {\n    constructor(t, i, n){\n        this.hf = 0, this.lf = null, this.af = {\n            nt: Number.NEGATIVE_INFINITY,\n            st: Number.POSITIVE_INFINITY\n        }, this._f = 0, this.uf = null, this.cf = {\n            nt: Number.NEGATIVE_INFINITY,\n            st: Number.POSITIVE_INFINITY\n        }, this.df = null, this.ff = !1, this.vf = null, this.pf = null, this.mf = !1, this.bf = !1, this.wf = !1, this.gf = null, this.Mf = null, this.xf = null, this.Sf = null, this.kf = null, this.yf = null, this.Cf = null, this.Tf = 0, this.Pf = !1, this.Rf = !1, this.Df = !1, this.Vf = 0, this.Of = null, this.Bf = !es(), this.Af = (t)=>{\n            this.If(t);\n        }, this.zf = (t)=>{\n            if (this.Lf(t)) {\n                const i = this.Ef(t);\n                if (++this._f, this.uf && this._f > 1) {\n                    const { Nf: n } = this.Ff(ws(t), this.cf);\n                    n < 30 && !this.wf && this.Wf(i, this.Hf.jf), this.$f();\n                }\n            } else {\n                const i = this.Ef(t);\n                if (++this.hf, this.lf && this.hf > 1) {\n                    const { Nf: n } = this.Ff(ws(t), this.af);\n                    n < 5 && !this.bf && this.Uf(i, this.Hf.qf), this.Yf();\n                }\n            }\n        }, this.Zf = t, this.Hf = i, this.cn = n, this.Xf();\n    }\n    S() {\n        null !== this.gf && (this.gf(), this.gf = null), null !== this.Mf && (this.Mf(), this.Mf = null), null !== this.Sf && (this.Sf(), this.Sf = null), null !== this.kf && (this.kf(), this.kf = null), null !== this.yf && (this.yf(), this.yf = null), null !== this.xf && (this.xf(), this.xf = null), this.Kf(), this.Yf();\n    }\n    Gf(t) {\n        this.Sf && this.Sf();\n        const i = this.Jf.bind(this);\n        if (this.Sf = ()=>{\n            this.Zf.removeEventListener(\"mousemove\", i);\n        }, this.Zf.addEventListener(\"mousemove\", i), this.Lf(t)) return;\n        const n = this.Ef(t);\n        this.Uf(n, this.Hf.Qf), this.Bf = !0;\n    }\n    Yf() {\n        null !== this.lf && clearTimeout(this.lf), this.hf = 0, this.lf = null, this.af = {\n            nt: Number.NEGATIVE_INFINITY,\n            st: Number.POSITIVE_INFINITY\n        };\n    }\n    $f() {\n        null !== this.uf && clearTimeout(this.uf), this._f = 0, this.uf = null, this.cf = {\n            nt: Number.NEGATIVE_INFINITY,\n            st: Number.POSITIVE_INFINITY\n        };\n    }\n    Jf(t) {\n        if (this.Df || null !== this.pf) return;\n        if (this.Lf(t)) return;\n        const i = this.Ef(t);\n        this.Uf(i, this.Hf.tv), this.Bf = !0;\n    }\n    iv(t) {\n        const i = Ms(t.changedTouches, b(this.Of));\n        if (null === i) return;\n        if (this.Vf = gs(t), null !== this.Cf) return;\n        if (this.Rf) return;\n        this.Pf = !0;\n        const n = this.Ff(ws(i), b(this.pf)), { nv: s, sv: e, Nf: r } = n;\n        if (this.mf || !(r < 5)) {\n            if (!this.mf) {\n                const t = .5 * s, i = e >= t && !this.cn.ev(), n = t > e && !this.cn.rv();\n                i || n || (this.Rf = !0), this.mf = !0, this.wf = !0, this.Kf(), this.$f();\n            }\n            if (!this.Rf) {\n                const n = this.Ef(t, i);\n                this.Wf(n, this.Hf.hv), bs(t);\n            }\n        }\n    }\n    lv(t) {\n        if (0 !== t.button) return;\n        const i = this.Ff(ws(t), b(this.vf)), { Nf: n } = i;\n        if (n >= 5 && (this.bf = !0, this.Yf()), this.bf) {\n            const i = this.Ef(t);\n            this.Uf(i, this.Hf.av);\n        }\n    }\n    Ff(t, i) {\n        const n = Math.abs(i.nt - t.nt), s = Math.abs(i.st - t.st);\n        return {\n            nv: n,\n            sv: s,\n            Nf: n + s\n        };\n    }\n    ov(t) {\n        let i = Ms(t.changedTouches, b(this.Of));\n        if (null === i && 0 === t.touches.length && (i = t.changedTouches[0]), null === i) return;\n        this.Of = null, this.Vf = gs(t), this.Kf(), this.pf = null, this.yf && (this.yf(), this.yf = null);\n        const n = this.Ef(t, i);\n        if (this.Wf(n, this.Hf._v), ++this._f, this.uf && this._f > 1) {\n            const { Nf: t } = this.Ff(ws(i), this.cf);\n            t < 30 && !this.wf && this.Wf(n, this.Hf.jf), this.$f();\n        } else this.wf || (this.Wf(n, this.Hf.uv), this.Hf.uv && bs(t));\n        0 === this._f && bs(t), 0 === t.touches.length && this.ff && (this.ff = !1, bs(t));\n    }\n    If(t) {\n        if (0 !== t.button) return;\n        const i = this.Ef(t);\n        if (this.vf = null, this.Df = !1, this.kf && (this.kf(), this.kf = null), ss()) {\n            this.Zf.ownerDocument.documentElement.removeEventListener(\"mouseleave\", this.Af);\n        }\n        if (!this.Lf(t)) if (this.Uf(i, this.Hf.cv), ++this.hf, this.lf && this.hf > 1) {\n            const { Nf: n } = this.Ff(ws(t), this.af);\n            n < 5 && !this.bf && this.Uf(i, this.Hf.qf), this.Yf();\n        } else this.bf || this.Uf(i, this.Hf.dv);\n    }\n    Kf() {\n        null !== this.df && (clearTimeout(this.df), this.df = null);\n    }\n    fv(t) {\n        if (null !== this.Of) return;\n        const i = t.changedTouches[0];\n        this.Of = i.identifier, this.Vf = gs(t);\n        const n = this.Zf.ownerDocument.documentElement;\n        this.wf = !1, this.mf = !1, this.Rf = !1, this.pf = ws(i), this.yf && (this.yf(), this.yf = null);\n        {\n            const i = this.iv.bind(this), s = this.ov.bind(this);\n            this.yf = ()=>{\n                n.removeEventListener(\"touchmove\", i), n.removeEventListener(\"touchend\", s);\n            }, n.addEventListener(\"touchmove\", i, {\n                passive: !1\n            }), n.addEventListener(\"touchend\", s, {\n                passive: !1\n            }), this.Kf(), this.df = setTimeout(this.vv.bind(this, t), 240);\n        }\n        const s = this.Ef(t, i);\n        this.Wf(s, this.Hf.pv), this.uf || (this._f = 0, this.uf = setTimeout(this.$f.bind(this), 500), this.cf = ws(i));\n    }\n    mv(t) {\n        if (0 !== t.button) return;\n        const i = this.Zf.ownerDocument.documentElement;\n        ss() && i.addEventListener(\"mouseleave\", this.Af), this.bf = !1, this.vf = ws(t), this.kf && (this.kf(), this.kf = null);\n        {\n            const t = this.lv.bind(this), n = this.If.bind(this);\n            this.kf = ()=>{\n                i.removeEventListener(\"mousemove\", t), i.removeEventListener(\"mouseup\", n);\n            }, i.addEventListener(\"mousemove\", t), i.addEventListener(\"mouseup\", n);\n        }\n        if (this.Df = !0, this.Lf(t)) return;\n        const n = this.Ef(t);\n        this.Uf(n, this.Hf.bv), this.lf || (this.hf = 0, this.lf = setTimeout(this.Yf.bind(this), 500), this.af = ws(t));\n    }\n    Xf() {\n        this.Zf.addEventListener(\"mouseenter\", this.Gf.bind(this)), this.Zf.addEventListener(\"touchcancel\", this.Kf.bind(this));\n        {\n            const t = this.Zf.ownerDocument, i = (t)=>{\n                this.Hf.wv && (t.composed && this.Zf.contains(t.composedPath()[0]) || t.target && this.Zf.contains(t.target) || this.Hf.wv());\n            };\n            this.Mf = ()=>{\n                t.removeEventListener(\"touchstart\", i);\n            }, this.gf = ()=>{\n                t.removeEventListener(\"mousedown\", i);\n            }, t.addEventListener(\"mousedown\", i), t.addEventListener(\"touchstart\", i, {\n                passive: !0\n            });\n        }\n        es() && (this.xf = ()=>{\n            this.Zf.removeEventListener(\"dblclick\", this.zf);\n        }, this.Zf.addEventListener(\"dblclick\", this.zf)), this.Zf.addEventListener(\"mouseleave\", this.gv.bind(this)), this.Zf.addEventListener(\"touchstart\", this.fv.bind(this), {\n            passive: !0\n        }), vs(this.Zf), this.Zf.addEventListener(\"mousedown\", this.mv.bind(this)), this.Mv(), this.Zf.addEventListener(\"touchmove\", ()=>{}, {\n            passive: !1\n        });\n    }\n    Mv() {\n        void 0 === this.Hf.xv && void 0 === this.Hf.Sv && void 0 === this.Hf.kv || (this.Zf.addEventListener(\"touchstart\", (t)=>this.yv(t.touches), {\n            passive: !0\n        }), this.Zf.addEventListener(\"touchmove\", (t)=>{\n            if (2 === t.touches.length && null !== this.Cf && void 0 !== this.Hf.Sv) {\n                const i = ms(t.touches[0], t.touches[1]) / this.Tf;\n                this.Hf.Sv(this.Cf, i), bs(t);\n            }\n        }, {\n            passive: !1\n        }), this.Zf.addEventListener(\"touchend\", (t)=>{\n            this.yv(t.touches);\n        }));\n    }\n    yv(t) {\n        1 === t.length && (this.Pf = !1), 2 !== t.length || this.Pf || this.ff ? this.Cv() : this.Tv(t);\n    }\n    Tv(t) {\n        const i = this.Zf.getBoundingClientRect() || {\n            left: 0,\n            top: 0\n        };\n        this.Cf = {\n            nt: (t[0].clientX - i.left + (t[1].clientX - i.left)) / 2,\n            st: (t[0].clientY - i.top + (t[1].clientY - i.top)) / 2\n        }, this.Tf = ms(t[0], t[1]), void 0 !== this.Hf.xv && this.Hf.xv(), this.Kf();\n    }\n    Cv() {\n        null !== this.Cf && (this.Cf = null, void 0 !== this.Hf.kv && this.Hf.kv());\n    }\n    gv(t) {\n        if (this.Sf && this.Sf(), this.Lf(t)) return;\n        if (!this.Bf) return;\n        const i = this.Ef(t);\n        this.Uf(i, this.Hf.Pv), this.Bf = !es();\n    }\n    vv(t) {\n        const i = Ms(t.touches, b(this.Of));\n        if (null === i) return;\n        const n = this.Ef(t, i);\n        this.Wf(n, this.Hf.Rv), this.wf = !0, this.ff = !0;\n    }\n    Lf(t) {\n        return t.sourceCapabilities && void 0 !== t.sourceCapabilities.firesTouchEvents ? t.sourceCapabilities.firesTouchEvents : gs(t) < this.Vf + 500;\n    }\n    Wf(t, i) {\n        i && i.call(this.Hf, t);\n    }\n    Uf(t, i) {\n        i && i.call(this.Hf, t);\n    }\n    Ef(t, i) {\n        const n = i || t, s = this.Zf.getBoundingClientRect() || {\n            left: 0,\n            top: 0\n        };\n        return {\n            clientX: n.clientX,\n            clientY: n.clientY,\n            pageX: n.pageX,\n            pageY: n.pageY,\n            screenX: n.screenX,\n            screenY: n.screenY,\n            localX: n.clientX - s.left,\n            localY: n.clientY - s.top,\n            ctrlKey: t.ctrlKey,\n            altKey: t.altKey,\n            shiftKey: t.shiftKey,\n            metaKey: t.metaKey,\n            Dv: !t.type.startsWith(\"mouse\") && \"contextmenu\" !== t.type && \"click\" !== t.type,\n            Vv: t.type,\n            Ov: n.target,\n            Bv: t.view,\n            Av: ()=>{\n                \"touchstart\" !== t.type && bs(t);\n            }\n        };\n    }\n}\nfunction ms(t, i) {\n    const n = t.clientX - i.clientX, s = t.clientY - i.clientY;\n    return Math.sqrt(n * n + s * s);\n}\nfunction bs(t) {\n    t.cancelable && t.preventDefault();\n}\nfunction ws(t) {\n    return {\n        nt: t.pageX,\n        st: t.pageY\n    };\n}\nfunction gs(t) {\n    return t.timeStamp || performance.now();\n}\nfunction Ms(t, i) {\n    for(let n = 0; n < t.length; ++n)if (t[n].identifier === i) return t[n];\n    return null;\n}\nfunction xs(t) {\n    return {\n        Hc: t.Hc,\n        Iv: {\n            gr: t.zv.externalId\n        },\n        Lv: t.zv.cursorStyle\n    };\n}\nfunction Ss(t, i, n) {\n    for (const s of t){\n        const t = s.gt();\n        if (null !== t && t.wr) {\n            const e = t.wr(i, n);\n            if (null !== e) return {\n                Bv: s,\n                Iv: e\n            };\n        }\n    }\n    return null;\n}\nfunction ks(t, i) {\n    return (n)=>{\n        var s, e, r, h;\n        return (null !== (e = null === (s = n.Dt()) || void 0 === s ? void 0 : s.Pa()) && void 0 !== e ? e : \"\") !== i ? [] : null !== (h = null === (r = n.da) || void 0 === r ? void 0 : r.call(n, t)) && void 0 !== h ? h : [];\n    };\n}\nfunction ys(t, i, n, s) {\n    if (!t.length) return;\n    let e = 0;\n    const r = n / 2, h = t[0].At(s, !0);\n    let l = 1 === i ? r - (t[0].Vi() - h / 2) : t[0].Vi() - h / 2 - r;\n    l = Math.max(0, l);\n    for(let r = 1; r < t.length; r++){\n        const h = t[r], a = t[r - 1], o = a.At(s, !1), _ = h.Vi(), u = a.Vi();\n        if (1 === i ? _ > u - o : _ < u + o) {\n            const s = u - o * i;\n            h.Oi(s);\n            const r = s - i * o / 2;\n            if ((1 === i ? r < 0 : r > n) && l > 0) {\n                const s = 1 === i ? -1 - r : r - n, h = Math.min(s, l);\n                for(let n = e; n < t.length; n++)t[n].Oi(t[n].Vi() + i * h);\n                l -= h;\n            }\n        } else e = r, l = 1 === i ? u - o - _ : _ - (u + o);\n    }\n}\nclass Cs {\n    constructor(i, n, s, e){\n        this.Li = null, this.Ev = null, this.Nv = !1, this.Fv = new ni(200), this.Qr = null, this.Wv = 0, this.jv = !1, this.Hv = ()=>{\n            this.jv || this.tn.$v().$t().Uh();\n        }, this.Uv = ()=>{\n            this.jv || this.tn.$v().$t().Uh();\n        }, this.tn = i, this.cn = n, this.ko = n.layout, this.Oc = s, this.qv = \"left\" === e, this.Yv = ks(\"normal\", e), this.Zv = ks(\"top\", e), this.Xv = ks(\"bottom\", e), this.Kv = document.createElement(\"div\"), this.Kv.style.height = \"100%\", this.Kv.style.overflow = \"hidden\", this.Kv.style.width = \"25px\", this.Kv.style.left = \"0\", this.Kv.style.position = \"relative\", this.Gv = _s(this.Kv, (0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.size)({\n            width: 16,\n            height: 16\n        })), this.Gv.subscribeSuggestedBitmapSizeChanged(this.Hv);\n        const r = this.Gv.canvasElement;\n        r.style.position = \"absolute\", r.style.zIndex = \"1\", r.style.left = \"0\", r.style.top = \"0\", this.Jv = _s(this.Kv, (0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.size)({\n            width: 16,\n            height: 16\n        })), this.Jv.subscribeSuggestedBitmapSizeChanged(this.Uv);\n        const h = this.Jv.canvasElement;\n        h.style.position = \"absolute\", h.style.zIndex = \"2\", h.style.left = \"0\", h.style.top = \"0\";\n        const l = {\n            bv: this.Qv.bind(this),\n            pv: this.Qv.bind(this),\n            av: this.tp.bind(this),\n            hv: this.tp.bind(this),\n            wv: this.ip.bind(this),\n            cv: this.np.bind(this),\n            _v: this.np.bind(this),\n            qf: this.sp.bind(this),\n            jf: this.sp.bind(this),\n            Qf: this.ep.bind(this),\n            Pv: this.rp.bind(this)\n        };\n        this.hp = new ps(this.Jv.canvasElement, l, {\n            ev: ()=>!this.cn.handleScroll.vertTouchDrag,\n            rv: ()=>!0\n        });\n    }\n    S() {\n        this.hp.S(), this.Jv.unsubscribeSuggestedBitmapSizeChanged(this.Uv), us(this.Jv.canvasElement), this.Jv.dispose(), this.Gv.unsubscribeSuggestedBitmapSizeChanged(this.Hv), us(this.Gv.canvasElement), this.Gv.dispose(), null !== this.Li && this.Li.Ko().p(this), this.Li = null;\n    }\n    lp() {\n        return this.Kv;\n    }\n    P() {\n        return this.ko.fontSize;\n    }\n    ap() {\n        const t = this.Oc.W();\n        return this.Qr !== t.R && (this.Fv.nr(), this.Qr = t.R), t;\n    }\n    op() {\n        if (null === this.Li) return 0;\n        let t = 0;\n        const i = this.ap(), n = b(this.Gv.canvasElement.getContext(\"2d\"));\n        n.save();\n        const s = this.Li.Ha();\n        n.font = this._p(), s.length > 0 && (t = Math.max(this.Fv.xi(n, s[0].so), this.Fv.xi(n, s[s.length - 1].so)));\n        const e = this.up();\n        for(let i = e.length; i--;){\n            const s = this.Fv.xi(n, e[i].Kt());\n            s > t && (t = s);\n        }\n        const r = this.Li.Ct();\n        if (null !== r && null !== this.Ev && 2 !== (h = this.cn.crosshair).mode && h.horzLine.visible && h.horzLine.labelVisible) {\n            const i = this.Li.pn(1, r), s = this.Li.pn(this.Ev.height - 2, r);\n            t = Math.max(t, this.Fv.xi(n, this.Li.Fi(Math.floor(Math.min(i, s)) + .11111111111111, r)), this.Fv.xi(n, this.Li.Fi(Math.ceil(Math.max(i, s)) - .11111111111111, r)));\n        }\n        var h;\n        n.restore();\n        const l = t || 34;\n        return rs(Math.ceil(i.C + i.T + i.A + i.I + 5 + l));\n    }\n    cp(t) {\n        null !== this.Ev && (0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.equalSizes)(this.Ev, t) || (this.Ev = t, this.jv = !0, this.Gv.resizeCanvasElement(t), this.Jv.resizeCanvasElement(t), this.jv = !1, this.Kv.style.width = `${t.width}px`, this.Kv.style.height = `${t.height}px`);\n    }\n    dp() {\n        return b(this.Ev).width;\n    }\n    Gi(t) {\n        this.Li !== t && (null !== this.Li && this.Li.Ko().p(this), this.Li = t, t.Ko().l(this.fo.bind(this), this));\n    }\n    Dt() {\n        return this.Li;\n    }\n    nr() {\n        const t = this.tn.fp();\n        this.tn.$v().$t().E_(t, b(this.Dt()));\n    }\n    vp(t) {\n        if (null === this.Ev) return;\n        if (1 !== t) {\n            this.pp(), this.Gv.applySuggestedBitmapSize();\n            const t = (0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.tryCreateCanvasRenderingTarget2D)(this.Gv);\n            null !== t && (t.useBitmapCoordinateSpace((t)=>{\n                this.mp(t), this.Ie(t);\n            }), this.tn.bp(t, this.Xv), this.wp(t), this.tn.bp(t, this.Yv), this.gp(t));\n        }\n        this.Jv.applySuggestedBitmapSize();\n        const i = (0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.tryCreateCanvasRenderingTarget2D)(this.Jv);\n        null !== i && (i.useBitmapCoordinateSpace(({ context: t, bitmapSize: i })=>{\n            t.clearRect(0, 0, i.width, i.height);\n        }), this.Mp(i), this.tn.bp(i, this.Zv));\n    }\n    xp() {\n        return this.Gv.bitmapSize;\n    }\n    Sp(t, i, n) {\n        const s = this.xp();\n        s.width > 0 && s.height > 0 && t.drawImage(this.Gv.canvasElement, i, n);\n    }\n    bt() {\n        var t;\n        null === (t = this.Li) || void 0 === t || t.Ha();\n    }\n    Qv(t) {\n        if (null === this.Li || this.Li.Ni() || !this.cn.handleScale.axisPressedMouseMove.price) return;\n        const i = this.tn.$v().$t(), n = this.tn.fp();\n        this.Nv = !0, i.V_(n, this.Li, t.localY);\n    }\n    tp(t) {\n        if (null === this.Li || !this.cn.handleScale.axisPressedMouseMove.price) return;\n        const i = this.tn.$v().$t(), n = this.tn.fp(), s = this.Li;\n        i.O_(n, s, t.localY);\n    }\n    ip() {\n        if (null === this.Li || !this.cn.handleScale.axisPressedMouseMove.price) return;\n        const t = this.tn.$v().$t(), i = this.tn.fp(), n = this.Li;\n        this.Nv && (this.Nv = !1, t.B_(i, n));\n    }\n    np(t) {\n        if (null === this.Li || !this.cn.handleScale.axisPressedMouseMove.price) return;\n        const i = this.tn.$v().$t(), n = this.tn.fp();\n        this.Nv = !1, i.B_(n, this.Li);\n    }\n    sp(t) {\n        this.cn.handleScale.axisDoubleClickReset.price && this.nr();\n    }\n    ep(t) {\n        if (null === this.Li) return;\n        !this.tn.$v().$t().W().handleScale.axisPressedMouseMove.price || this.Li.Mh() || this.Li.Oo() || this.kp(1);\n    }\n    rp(t) {\n        this.kp(0);\n    }\n    up() {\n        const t = [], i = null === this.Li ? void 0 : this.Li;\n        return ((n)=>{\n            for(let s = 0; s < n.length; ++s){\n                const e = n[s].Rn(this.tn.fp(), i);\n                for(let i = 0; i < e.length; i++)t.push(e[i]);\n            }\n        })(this.tn.fp().Uo()), t;\n    }\n    mp({ context: t, bitmapSize: i }) {\n        const { width: n, height: s } = i, e = this.tn.fp().$t(), r = e.q(), h = e.bd();\n        r === h ? G(t, 0, 0, n, s, r) : tt(t, 0, 0, n, s, r, h);\n    }\n    Ie({ context: t, bitmapSize: i, horizontalPixelRatio: n }) {\n        if (null === this.Ev || null === this.Li || !this.Li.W().borderVisible) return;\n        t.fillStyle = this.Li.W().borderColor;\n        const s = Math.max(1, Math.floor(this.ap().C * n));\n        let e;\n        e = this.qv ? i.width - s : 0, t.fillRect(e, 0, s, i.height);\n    }\n    wp(t) {\n        if (null === this.Ev || null === this.Li) return;\n        const i = this.Li.Ha(), n = this.Li.W(), s = this.ap(), e = this.qv ? this.Ev.width - s.T : 0;\n        n.borderVisible && n.ticksVisible && t.useBitmapCoordinateSpace(({ context: t, horizontalPixelRatio: r, verticalPixelRatio: h })=>{\n            t.fillStyle = n.borderColor;\n            const l = Math.max(1, Math.floor(h)), a = Math.floor(.5 * h), o = Math.round(s.T * r);\n            t.beginPath();\n            for (const n of i)t.rect(Math.floor(e * r), Math.round(n.Ea * h) - a, o, l);\n            t.fill();\n        }), t.useMediaCoordinateSpace(({ context: t })=>{\n            var r;\n            t.font = this._p(), t.fillStyle = null !== (r = n.textColor) && void 0 !== r ? r : this.ko.textColor, t.textAlign = this.qv ? \"right\" : \"left\", t.textBaseline = \"middle\";\n            const h = this.qv ? Math.round(e - s.A) : Math.round(e + s.T + s.A), l = i.map((i)=>this.Fv.Mi(t, i.so));\n            for(let n = i.length; n--;){\n                const s = i[n];\n                t.fillText(s.so, h, s.Ea + l[n]);\n            }\n        });\n    }\n    pp() {\n        if (null === this.Ev || null === this.Li) return;\n        const t = [], i = this.Li.Uo().slice(), n = this.tn.fp(), s = this.ap();\n        this.Li === n.pr() && this.tn.fp().Uo().forEach((t)=>{\n            n.vr(t) && i.push(t);\n        });\n        const e = this.Li;\n        i.forEach((i)=>{\n            i.Rn(n, e).forEach((i)=>{\n                i.Oi(null), i.Bi() && t.push(i);\n            });\n        }), t.forEach((t)=>t.Oi(t.ki()));\n        this.Li.W().alignLabels && this.yp(t, s);\n    }\n    yp(t, i) {\n        if (null === this.Ev) return;\n        const n = this.Ev.height / 2, s = t.filter((t)=>t.ki() <= n), e = t.filter((t)=>t.ki() > n);\n        s.sort((t, i)=>i.ki() - t.ki()), e.sort((t, i)=>t.ki() - i.ki());\n        for (const n of t){\n            const t = Math.floor(n.At(i) / 2), s = n.ki();\n            s > -t && s < t && n.Oi(t), s > this.Ev.height - t && s < this.Ev.height + t && n.Oi(this.Ev.height - t);\n        }\n        ys(s, 1, this.Ev.height, i), ys(e, -1, this.Ev.height, i);\n    }\n    gp(t) {\n        if (null === this.Ev) return;\n        const i = this.up(), n = this.ap(), s = this.qv ? \"right\" : \"left\";\n        i.forEach((i)=>{\n            if (i.Ai()) {\n                i.gt(b(this.Li)).X(t, n, this.Fv, s);\n            }\n        });\n    }\n    Mp(t) {\n        if (null === this.Ev || null === this.Li) return;\n        const i = this.tn.$v().$t(), n = [], s = this.tn.fp(), e = i.Zc().Rn(s, this.Li);\n        e.length && n.push(e);\n        const r = this.ap(), h = this.qv ? \"right\" : \"left\";\n        n.forEach((i)=>{\n            i.forEach((i)=>{\n                i.gt(b(this.Li)).X(t, r, this.Fv, h);\n            });\n        });\n    }\n    kp(t) {\n        this.Kv.style.cursor = 1 === t ? \"ns-resize\" : \"default\";\n    }\n    fo() {\n        const t = this.op();\n        this.Wv < t && this.tn.$v().$t().Kl(), this.Wv = t;\n    }\n    _p() {\n        return F(this.ko.fontSize, this.ko.fontFamily);\n    }\n}\nfunction Ts(t, i) {\n    var n, s;\n    return null !== (s = null === (n = t.ua) || void 0 === n ? void 0 : n.call(t, i)) && void 0 !== s ? s : [];\n}\nfunction Ps(t, i) {\n    var n, s;\n    return null !== (s = null === (n = t.Pn) || void 0 === n ? void 0 : n.call(t, i)) && void 0 !== s ? s : [];\n}\nfunction Rs(t, i) {\n    var n, s;\n    return null !== (s = null === (n = t.Ji) || void 0 === n ? void 0 : n.call(t, i)) && void 0 !== s ? s : [];\n}\nfunction Ds(t, i) {\n    var n, s;\n    return null !== (s = null === (n = t.aa) || void 0 === n ? void 0 : n.call(t, i)) && void 0 !== s ? s : [];\n}\nclass Vs {\n    constructor(i, n){\n        this.Ev = (0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.size)({\n            width: 0,\n            height: 0\n        }), this.Cp = null, this.Tp = null, this.Pp = null, this.Rp = null, this.Dp = !1, this.Vp = new D, this.Op = new D, this.Bp = 0, this.Ap = !1, this.Ip = null, this.zp = !1, this.Lp = null, this.Ep = null, this.jv = !1, this.Hv = ()=>{\n            this.jv || null === this.Np || this.$i().Uh();\n        }, this.Uv = ()=>{\n            this.jv || null === this.Np || this.$i().Uh();\n        }, this.Qd = i, this.Np = n, this.Np.W_().l(this.Fp.bind(this), this, !0), this.Wp = document.createElement(\"td\"), this.Wp.style.padding = \"0\", this.Wp.style.position = \"relative\";\n        const s = document.createElement(\"div\");\n        s.style.width = \"100%\", s.style.height = \"100%\", s.style.position = \"relative\", s.style.overflow = \"hidden\", this.jp = document.createElement(\"td\"), this.jp.style.padding = \"0\", this.Hp = document.createElement(\"td\"), this.Hp.style.padding = \"0\", this.Wp.appendChild(s), this.Gv = _s(s, (0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.size)({\n            width: 16,\n            height: 16\n        })), this.Gv.subscribeSuggestedBitmapSizeChanged(this.Hv);\n        const e = this.Gv.canvasElement;\n        e.style.position = \"absolute\", e.style.zIndex = \"1\", e.style.left = \"0\", e.style.top = \"0\", this.Jv = _s(s, (0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.size)({\n            width: 16,\n            height: 16\n        })), this.Jv.subscribeSuggestedBitmapSizeChanged(this.Uv);\n        const r = this.Jv.canvasElement;\n        r.style.position = \"absolute\", r.style.zIndex = \"2\", r.style.left = \"0\", r.style.top = \"0\", this.$p = document.createElement(\"tr\"), this.$p.appendChild(this.jp), this.$p.appendChild(this.Wp), this.$p.appendChild(this.Hp), this.Up(), this.hp = new ps(this.Jv.canvasElement, this, {\n            ev: ()=>null === this.Ip && !this.Qd.W().handleScroll.vertTouchDrag,\n            rv: ()=>null === this.Ip && !this.Qd.W().handleScroll.horzTouchDrag\n        });\n    }\n    S() {\n        null !== this.Cp && this.Cp.S(), null !== this.Tp && this.Tp.S(), this.Pp = null, this.Jv.unsubscribeSuggestedBitmapSizeChanged(this.Uv), us(this.Jv.canvasElement), this.Jv.dispose(), this.Gv.unsubscribeSuggestedBitmapSizeChanged(this.Hv), us(this.Gv.canvasElement), this.Gv.dispose(), null !== this.Np && this.Np.W_().p(this), this.hp.S();\n    }\n    fp() {\n        return b(this.Np);\n    }\n    qp(t) {\n        var i, n;\n        null !== this.Np && this.Np.W_().p(this), this.Np = t, null !== this.Np && this.Np.W_().l(Vs.prototype.Fp.bind(this), this, !0), this.Up(), this.Qd.Yp().indexOf(this) === this.Qd.Yp().length - 1 ? (this.Pp = null !== (i = this.Pp) && void 0 !== i ? i : new os(this.Wp, this.Qd), this.Pp.bt()) : (null === (n = this.Pp) || void 0 === n || n.if(), this.Pp = null);\n    }\n    $v() {\n        return this.Qd;\n    }\n    lp() {\n        return this.$p;\n    }\n    Up() {\n        if (null !== this.Np && (this.Zp(), 0 !== this.$i().wt().length)) {\n            if (null !== this.Cp) {\n                const t = this.Np.R_();\n                this.Cp.Gi(b(t));\n            }\n            if (null !== this.Tp) {\n                const t = this.Np.D_();\n                this.Tp.Gi(b(t));\n            }\n        }\n    }\n    Xp() {\n        null !== this.Cp && this.Cp.bt(), null !== this.Tp && this.Tp.bt();\n    }\n    M_() {\n        return null !== this.Np ? this.Np.M_() : 0;\n    }\n    x_(t) {\n        this.Np && this.Np.x_(t);\n    }\n    Qf(t) {\n        if (!this.Np) return;\n        this.Kp();\n        const i = t.localX, n = t.localY;\n        this.Gp(i, n, t);\n    }\n    bv(t) {\n        this.Kp(), this.Jp(), this.Gp(t.localX, t.localY, t);\n    }\n    tv(t) {\n        var i;\n        if (!this.Np) return;\n        this.Kp();\n        const n = t.localX, s = t.localY;\n        this.Gp(n, s, t);\n        const e = this.wr(n, s);\n        this.Qd.Qp(null !== (i = null == e ? void 0 : e.Lv) && void 0 !== i ? i : null), this.$i().jc(e && {\n            Hc: e.Hc,\n            Iv: e.Iv\n        });\n    }\n    dv(t) {\n        null !== this.Np && (this.Kp(), this.tm(t));\n    }\n    qf(t) {\n        null !== this.Np && this.im(this.Op, t);\n    }\n    jf(t) {\n        this.qf(t);\n    }\n    av(t) {\n        this.Kp(), this.nm(t), this.Gp(t.localX, t.localY, t);\n    }\n    cv(t) {\n        null !== this.Np && (this.Kp(), this.Ap = !1, this.sm(t));\n    }\n    uv(t) {\n        null !== this.Np && this.tm(t);\n    }\n    Rv(t) {\n        if (this.Ap = !0, null === this.Ip) {\n            const i = {\n                x: t.localX,\n                y: t.localY\n            };\n            this.rm(i, i, t);\n        }\n    }\n    Pv(t) {\n        null !== this.Np && (this.Kp(), this.Np.$t().jc(null), this.hm());\n    }\n    lm() {\n        return this.Vp;\n    }\n    am() {\n        return this.Op;\n    }\n    xv() {\n        this.Bp = 1, this.$i().Un();\n    }\n    Sv(t, i) {\n        if (!this.Qd.W().handleScale.pinch) return;\n        const n = 5 * (i - this.Bp);\n        this.Bp = i, this.$i().Qc(t.nt, n);\n    }\n    pv(t) {\n        this.Ap = !1, this.zp = null !== this.Ip, this.Jp();\n        const i = this.$i().Zc();\n        null !== this.Ip && i.yt() && (this.Lp = {\n            x: i.Yt(),\n            y: i.Zt()\n        }, this.Ip = {\n            x: t.localX,\n            y: t.localY\n        });\n    }\n    hv(t) {\n        if (null === this.Np) return;\n        const i = t.localX, n = t.localY;\n        if (null === this.Ip) this.nm(t);\n        else {\n            this.zp = !1;\n            const s = b(this.Lp), e = s.x + (i - this.Ip.x), r = s.y + (n - this.Ip.y);\n            this.Gp(e, r, t);\n        }\n    }\n    _v(t) {\n        0 === this.$v().W().trackingMode.exitMode && (this.zp = !0), this.om(), this.sm(t);\n    }\n    wr(t, i) {\n        const n = this.Np;\n        return null === n ? null : function(t, i, n) {\n            const s = t.Uo(), e = function(t, i, n) {\n                var s, e;\n                let r, h;\n                for (const o of t){\n                    const t = null !== (e = null === (s = o.va) || void 0 === s ? void 0 : s.call(o, i, n)) && void 0 !== e ? e : [];\n                    for (const i of t)l = i.zOrder, (!(a = null == r ? void 0 : r.zOrder) || \"top\" === l && \"top\" !== a || \"normal\" === l && \"bottom\" === a) && (r = i, h = o);\n                }\n                var l, a;\n                return r && h ? {\n                    zv: r,\n                    Hc: h\n                } : null;\n            }(s, i, n);\n            if (\"top\" === (null == e ? void 0 : e.zv.zOrder)) return xs(e);\n            for (const r of s){\n                if (e && e.Hc === r && \"bottom\" !== e.zv.zOrder && !e.zv.isBackground) return xs(e);\n                const s = Ss(r.Pn(t), i, n);\n                if (null !== s) return {\n                    Hc: r,\n                    Bv: s.Bv,\n                    Iv: s.Iv\n                };\n                if (e && e.Hc === r && \"bottom\" !== e.zv.zOrder && e.zv.isBackground) return xs(e);\n            }\n            return (null == e ? void 0 : e.zv) ? xs(e) : null;\n        }(n, t, i);\n    }\n    _m(i, n) {\n        b(\"left\" === n ? this.Cp : this.Tp).cp((0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.size)({\n            width: i,\n            height: this.Ev.height\n        }));\n    }\n    um() {\n        return this.Ev;\n    }\n    cp(t) {\n        (0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.equalSizes)(this.Ev, t) || (this.Ev = t, this.jv = !0, this.Gv.resizeCanvasElement(t), this.Jv.resizeCanvasElement(t), this.jv = !1, this.Wp.style.width = t.width + \"px\", this.Wp.style.height = t.height + \"px\");\n    }\n    dm() {\n        const t = b(this.Np);\n        t.P_(t.R_()), t.P_(t.D_());\n        for (const i of t.Ba())if (t.vr(i)) {\n            const n = i.Dt();\n            null !== n && t.P_(n), i.Vn();\n        }\n    }\n    xp() {\n        return this.Gv.bitmapSize;\n    }\n    Sp(t, i, n) {\n        const s = this.xp();\n        s.width > 0 && s.height > 0 && t.drawImage(this.Gv.canvasElement, i, n);\n    }\n    vp(t) {\n        if (0 === t) return;\n        if (null === this.Np) return;\n        if (t > 1 && this.dm(), null !== this.Cp && this.Cp.vp(t), null !== this.Tp && this.Tp.vp(t), 1 !== t) {\n            this.Gv.applySuggestedBitmapSize();\n            const t = (0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.tryCreateCanvasRenderingTarget2D)(this.Gv);\n            null !== t && (t.useBitmapCoordinateSpace((t)=>{\n                this.mp(t);\n            }), this.Np && (this.fm(t, Ts), this.vm(t), this.pm(t), this.fm(t, Ps), this.fm(t, Rs)));\n        }\n        this.Jv.applySuggestedBitmapSize();\n        const i = (0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.tryCreateCanvasRenderingTarget2D)(this.Jv);\n        null !== i && (i.useBitmapCoordinateSpace(({ context: t, bitmapSize: i })=>{\n            t.clearRect(0, 0, i.width, i.height);\n        }), this.bm(i), this.fm(i, Ds));\n    }\n    wm() {\n        return this.Cp;\n    }\n    gm() {\n        return this.Tp;\n    }\n    bp(t, i) {\n        this.fm(t, i);\n    }\n    Fp() {\n        null !== this.Np && this.Np.W_().p(this), this.Np = null;\n    }\n    tm(t) {\n        this.im(this.Vp, t);\n    }\n    im(t, i) {\n        const n = i.localX, s = i.localY;\n        t.M() && t.m(this.$i().St().Nu(n), {\n            x: n,\n            y: s\n        }, i);\n    }\n    mp({ context: t, bitmapSize: i }) {\n        const { width: n, height: s } = i, e = this.$i(), r = e.q(), h = e.bd();\n        r === h ? G(t, 0, 0, n, s, h) : tt(t, 0, 0, n, s, r, h);\n    }\n    vm(t) {\n        const i = b(this.Np).j_().qh().gt();\n        null !== i && i.X(t, !1);\n    }\n    pm(t) {\n        const i = this.$i().Yc();\n        this.Mm(t, Ps, cs, i), this.Mm(t, Ps, ds, i);\n    }\n    bm(t) {\n        this.Mm(t, Ps, ds, this.$i().Zc());\n    }\n    fm(t, i) {\n        const n = b(this.Np).Uo();\n        for (const s of n)this.Mm(t, i, cs, s);\n        for (const s of n)this.Mm(t, i, ds, s);\n    }\n    Mm(t, i, n, s) {\n        const e = b(this.Np), r = e.$t().Wc(), h = null !== r && r.Hc === s, l = null !== r && h && void 0 !== r.Iv ? r.Iv.Mr : void 0;\n        fs(i, (i)=>n(i, t, h, l), s, e);\n    }\n    Zp() {\n        if (null === this.Np) return;\n        const t = this.Qd, i = this.Np.R_().W().visible, n = this.Np.D_().W().visible;\n        i || null === this.Cp || (this.jp.removeChild(this.Cp.lp()), this.Cp.S(), this.Cp = null), n || null === this.Tp || (this.Hp.removeChild(this.Tp.lp()), this.Tp.S(), this.Tp = null);\n        const s = t.$t().ud();\n        i && null === this.Cp && (this.Cp = new Cs(this, t.W(), s, \"left\"), this.jp.appendChild(this.Cp.lp())), n && null === this.Tp && (this.Tp = new Cs(this, t.W(), s, \"right\"), this.Hp.appendChild(this.Tp.lp()));\n    }\n    xm(t) {\n        return t.Dv && this.Ap || null !== this.Ip;\n    }\n    Sm(t) {\n        return Math.max(0, Math.min(t, this.Ev.width - 1));\n    }\n    km(t) {\n        return Math.max(0, Math.min(t, this.Ev.height - 1));\n    }\n    Gp(t, i, n) {\n        this.$i().ld(this.Sm(t), this.km(i), n, b(this.Np));\n    }\n    hm() {\n        this.$i().od();\n    }\n    om() {\n        this.zp && (this.Ip = null, this.hm());\n    }\n    rm(t, i, n) {\n        this.Ip = t, this.zp = !1, this.Gp(i.x, i.y, n);\n        const s = this.$i().Zc();\n        this.Lp = {\n            x: s.Yt(),\n            y: s.Zt()\n        };\n    }\n    $i() {\n        return this.Qd.$t();\n    }\n    sm(t) {\n        if (!this.Dp) return;\n        const i = this.$i(), n = this.fp();\n        if (i.z_(n, n.vn()), this.Rp = null, this.Dp = !1, i.ed(), null !== this.Ep) {\n            const t = performance.now(), n = i.St();\n            this.Ep.Vr(n.Hu(), t), this.Ep.Qu(t) || i.Zn(this.Ep);\n        }\n    }\n    Kp() {\n        this.Ip = null;\n    }\n    Jp() {\n        if (!this.Np) return;\n        if (this.$i().Un(), document.activeElement !== document.body && document.activeElement !== document.documentElement) b(document.activeElement).blur();\n        else {\n            const t = document.getSelection();\n            null !== t && t.removeAllRanges();\n        }\n        !this.Np.vn().Ni() && this.$i().St().Ni();\n    }\n    nm(t) {\n        if (null === this.Np) return;\n        const i = this.$i(), n = i.St();\n        if (n.Ni()) return;\n        const s = this.Qd.W(), e = s.handleScroll, r = s.kineticScroll;\n        if ((!e.pressedMouseMove || t.Dv) && (!e.horzTouchDrag && !e.vertTouchDrag || !t.Dv)) return;\n        const h = this.Np.vn(), l = performance.now();\n        if (null !== this.Rp || this.xm(t) || (this.Rp = {\n            x: t.clientX,\n            y: t.clientY,\n            Od: l,\n            ym: t.localX,\n            Cm: t.localY\n        }), null !== this.Rp && !this.Dp && (this.Rp.x !== t.clientX || this.Rp.y !== t.clientY)) {\n            if (t.Dv && r.touch || !t.Dv && r.mouse) {\n                const t = n.le();\n                this.Ep = new as(.2 / t, 7 / t, .997, 15 / t), this.Ep.Yd(n.Hu(), this.Rp.Od);\n            } else this.Ep = null;\n            h.Ni() || i.A_(this.Np, h, t.localY), i.nd(t.localX), this.Dp = !0;\n        }\n        this.Dp && (h.Ni() || i.I_(this.Np, h, t.localY), i.sd(t.localX), null !== this.Ep && this.Ep.Yd(n.Hu(), l));\n    }\n}\nclass Os {\n    constructor(i, n, s, e, r){\n        this.ft = !0, this.Ev = (0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.size)({\n            width: 0,\n            height: 0\n        }), this.Hv = ()=>this.vp(3), this.qv = \"left\" === i, this.Oc = s.ud, this.cn = n, this.Tm = e, this.Pm = r, this.Kv = document.createElement(\"div\"), this.Kv.style.width = \"25px\", this.Kv.style.height = \"100%\", this.Kv.style.overflow = \"hidden\", this.Gv = _s(this.Kv, (0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.size)({\n            width: 16,\n            height: 16\n        })), this.Gv.subscribeSuggestedBitmapSizeChanged(this.Hv);\n    }\n    S() {\n        this.Gv.unsubscribeSuggestedBitmapSizeChanged(this.Hv), us(this.Gv.canvasElement), this.Gv.dispose();\n    }\n    lp() {\n        return this.Kv;\n    }\n    um() {\n        return this.Ev;\n    }\n    cp(t) {\n        (0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.equalSizes)(this.Ev, t) || (this.Ev = t, this.Gv.resizeCanvasElement(t), this.Kv.style.width = `${t.width}px`, this.Kv.style.height = `${t.height}px`, this.ft = !0);\n    }\n    vp(t) {\n        if (t < 3 && !this.ft) return;\n        if (0 === this.Ev.width || 0 === this.Ev.height) return;\n        this.ft = !1, this.Gv.applySuggestedBitmapSize();\n        const i = (0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.tryCreateCanvasRenderingTarget2D)(this.Gv);\n        null !== i && i.useBitmapCoordinateSpace((t)=>{\n            this.mp(t), this.Ie(t);\n        });\n    }\n    xp() {\n        return this.Gv.bitmapSize;\n    }\n    Sp(t, i, n) {\n        const s = this.xp();\n        s.width > 0 && s.height > 0 && t.drawImage(this.Gv.canvasElement, i, n);\n    }\n    Ie({ context: t, bitmapSize: i, horizontalPixelRatio: n, verticalPixelRatio: s }) {\n        if (!this.Tm()) return;\n        t.fillStyle = this.cn.timeScale.borderColor;\n        const e = Math.floor(this.Oc.W().C * n), r = Math.floor(this.Oc.W().C * s), h = this.qv ? i.width - e : 0;\n        t.fillRect(h, 0, e, r);\n    }\n    mp({ context: t, bitmapSize: i }) {\n        G(t, 0, 0, i.width, i.height, this.Pm());\n    }\n}\nfunction Bs(t) {\n    return (i)=>{\n        var n, s;\n        return null !== (s = null === (n = i.fa) || void 0 === n ? void 0 : n.call(i, t)) && void 0 !== s ? s : [];\n    };\n}\nconst As = Bs(\"normal\"), Is = Bs(\"top\"), zs = Bs(\"bottom\");\nclass Ls {\n    constructor(i, n){\n        this.Rm = null, this.Dm = null, this.k = null, this.Vm = !1, this.Ev = (0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.size)({\n            width: 0,\n            height: 0\n        }), this.Om = new D, this.Fv = new ni(5), this.jv = !1, this.Hv = ()=>{\n            this.jv || this.Qd.$t().Uh();\n        }, this.Uv = ()=>{\n            this.jv || this.Qd.$t().Uh();\n        }, this.Qd = i, this.q_ = n, this.cn = i.W().layout, this.Xd = document.createElement(\"tr\"), this.Bm = document.createElement(\"td\"), this.Bm.style.padding = \"0\", this.Am = document.createElement(\"td\"), this.Am.style.padding = \"0\", this.Kv = document.createElement(\"td\"), this.Kv.style.height = \"25px\", this.Kv.style.padding = \"0\", this.Im = document.createElement(\"div\"), this.Im.style.width = \"100%\", this.Im.style.height = \"100%\", this.Im.style.position = \"relative\", this.Im.style.overflow = \"hidden\", this.Kv.appendChild(this.Im), this.Gv = _s(this.Im, (0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.size)({\n            width: 16,\n            height: 16\n        })), this.Gv.subscribeSuggestedBitmapSizeChanged(this.Hv);\n        const s = this.Gv.canvasElement;\n        s.style.position = \"absolute\", s.style.zIndex = \"1\", s.style.left = \"0\", s.style.top = \"0\", this.Jv = _s(this.Im, (0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.size)({\n            width: 16,\n            height: 16\n        })), this.Jv.subscribeSuggestedBitmapSizeChanged(this.Uv);\n        const e = this.Jv.canvasElement;\n        e.style.position = \"absolute\", e.style.zIndex = \"2\", e.style.left = \"0\", e.style.top = \"0\", this.Xd.appendChild(this.Bm), this.Xd.appendChild(this.Kv), this.Xd.appendChild(this.Am), this.zm(), this.Qd.$t().g_().l(this.zm.bind(this), this), this.hp = new ps(this.Jv.canvasElement, this, {\n            ev: ()=>!0,\n            rv: ()=>!this.Qd.W().handleScroll.horzTouchDrag\n        });\n    }\n    S() {\n        this.hp.S(), null !== this.Rm && this.Rm.S(), null !== this.Dm && this.Dm.S(), this.Jv.unsubscribeSuggestedBitmapSizeChanged(this.Uv), us(this.Jv.canvasElement), this.Jv.dispose(), this.Gv.unsubscribeSuggestedBitmapSizeChanged(this.Hv), us(this.Gv.canvasElement), this.Gv.dispose();\n    }\n    lp() {\n        return this.Xd;\n    }\n    Lm() {\n        return this.Rm;\n    }\n    Em() {\n        return this.Dm;\n    }\n    bv(t) {\n        if (this.Vm) return;\n        this.Vm = !0;\n        const i = this.Qd.$t();\n        !i.St().Ni() && this.Qd.W().handleScale.axisPressedMouseMove.time && i.Jc(t.localX);\n    }\n    pv(t) {\n        this.bv(t);\n    }\n    wv() {\n        const t = this.Qd.$t();\n        !t.St().Ni() && this.Vm && (this.Vm = !1, this.Qd.W().handleScale.axisPressedMouseMove.time && t.hd());\n    }\n    av(t) {\n        const i = this.Qd.$t();\n        !i.St().Ni() && this.Qd.W().handleScale.axisPressedMouseMove.time && i.rd(t.localX);\n    }\n    hv(t) {\n        this.av(t);\n    }\n    cv() {\n        this.Vm = !1;\n        const t = this.Qd.$t();\n        t.St().Ni() && !this.Qd.W().handleScale.axisPressedMouseMove.time || t.hd();\n    }\n    _v() {\n        this.cv();\n    }\n    qf() {\n        this.Qd.W().handleScale.axisDoubleClickReset.time && this.Qd.$t().Kn();\n    }\n    jf() {\n        this.qf();\n    }\n    Qf() {\n        this.Qd.$t().W().handleScale.axisPressedMouseMove.time && this.kp(1);\n    }\n    Pv() {\n        this.kp(0);\n    }\n    um() {\n        return this.Ev;\n    }\n    Nm() {\n        return this.Om;\n    }\n    Fm(i, s, e) {\n        (0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.equalSizes)(this.Ev, i) || (this.Ev = i, this.jv = !0, this.Gv.resizeCanvasElement(i), this.Jv.resizeCanvasElement(i), this.jv = !1, this.Kv.style.width = `${i.width}px`, this.Kv.style.height = `${i.height}px`, this.Om.m(i)), null !== this.Rm && this.Rm.cp((0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.size)({\n            width: s,\n            height: i.height\n        })), null !== this.Dm && this.Dm.cp((0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.size)({\n            width: e,\n            height: i.height\n        }));\n    }\n    Wm() {\n        const t = this.jm();\n        return Math.ceil(t.C + t.T + t.P + t.L + t.B + t.Hm);\n    }\n    bt() {\n        this.Qd.$t().St().Ha();\n    }\n    xp() {\n        return this.Gv.bitmapSize;\n    }\n    Sp(t, i, n) {\n        const s = this.xp();\n        s.width > 0 && s.height > 0 && t.drawImage(this.Gv.canvasElement, i, n);\n    }\n    vp(t) {\n        if (0 === t) return;\n        if (1 !== t) {\n            this.Gv.applySuggestedBitmapSize();\n            const i = (0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.tryCreateCanvasRenderingTarget2D)(this.Gv);\n            null !== i && (i.useBitmapCoordinateSpace((t)=>{\n                this.mp(t), this.Ie(t), this.$m(i, zs);\n            }), this.wp(i), this.$m(i, As)), null !== this.Rm && this.Rm.vp(t), null !== this.Dm && this.Dm.vp(t);\n        }\n        this.Jv.applySuggestedBitmapSize();\n        const i = (0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.tryCreateCanvasRenderingTarget2D)(this.Jv);\n        null !== i && (i.useBitmapCoordinateSpace(({ context: t, bitmapSize: i })=>{\n            t.clearRect(0, 0, i.width, i.height);\n        }), this.Um([\n            ...this.Qd.$t().wt(),\n            this.Qd.$t().Zc()\n        ], i), this.$m(i, Is));\n    }\n    $m(t, i) {\n        const n = this.Qd.$t().wt();\n        for (const s of n)fs(i, (i)=>cs(i, t, !1, void 0), s, void 0);\n        for (const s of n)fs(i, (i)=>ds(i, t, !1, void 0), s, void 0);\n    }\n    mp({ context: t, bitmapSize: i }) {\n        G(t, 0, 0, i.width, i.height, this.Qd.$t().bd());\n    }\n    Ie({ context: t, bitmapSize: i, verticalPixelRatio: n }) {\n        if (this.Qd.W().timeScale.borderVisible) {\n            t.fillStyle = this.qm();\n            const s = Math.max(1, Math.floor(this.jm().C * n));\n            t.fillRect(0, 0, i.width, s);\n        }\n    }\n    wp(t) {\n        const i = this.Qd.$t().St(), n = i.Ha();\n        if (!n || 0 === n.length) return;\n        const s = this.q_.maxTickMarkWeight(n), e = this.jm(), r = i.W();\n        r.borderVisible && r.ticksVisible && t.useBitmapCoordinateSpace(({ context: t, horizontalPixelRatio: i, verticalPixelRatio: s })=>{\n            t.strokeStyle = this.qm(), t.fillStyle = this.qm();\n            const r = Math.max(1, Math.floor(i)), h = Math.floor(.5 * i);\n            t.beginPath();\n            const l = Math.round(e.T * s);\n            for(let s = n.length; s--;){\n                const e = Math.round(n[s].coord * i);\n                t.rect(e - h, 0, r, l);\n            }\n            t.fill();\n        }), t.useMediaCoordinateSpace(({ context: t })=>{\n            const i = e.C + e.T + e.L + e.P / 2;\n            t.textAlign = \"center\", t.textBaseline = \"middle\", t.fillStyle = this.$(), t.font = this._p();\n            for (const e of n)if (e.weight < s) {\n                const n = e.needAlignCoordinate ? this.Ym(t, e.coord, e.label) : e.coord;\n                t.fillText(e.label, n, i);\n            }\n            this.Qd.W().timeScale.allowBoldLabels && (t.font = this.Zm());\n            for (const e of n)if (e.weight >= s) {\n                const n = e.needAlignCoordinate ? this.Ym(t, e.coord, e.label) : e.coord;\n                t.fillText(e.label, n, i);\n            }\n        });\n    }\n    Ym(t, i, n) {\n        const s = this.Fv.xi(t, n), e = s / 2, r = Math.floor(i - e) + .5;\n        return r < 0 ? i += Math.abs(0 - r) : r + s > this.Ev.width && (i -= Math.abs(this.Ev.width - (r + s))), i;\n    }\n    Um(t, i) {\n        const n = this.jm();\n        for (const s of t)for (const t of s.Qi())t.gt().X(i, n);\n    }\n    qm() {\n        return this.Qd.W().timeScale.borderColor;\n    }\n    $() {\n        return this.cn.textColor;\n    }\n    j() {\n        return this.cn.fontSize;\n    }\n    _p() {\n        return F(this.j(), this.cn.fontFamily);\n    }\n    Zm() {\n        return F(this.j(), this.cn.fontFamily, \"bold\");\n    }\n    jm() {\n        null === this.k && (this.k = {\n            C: 1,\n            N: NaN,\n            L: NaN,\n            B: NaN,\n            ji: NaN,\n            T: 5,\n            P: NaN,\n            R: \"\",\n            Wi: new ni,\n            Hm: 0\n        });\n        const t = this.k, i = this._p();\n        if (t.R !== i) {\n            const n = this.j();\n            t.P = n, t.R = i, t.L = 3 * n / 12, t.B = 3 * n / 12, t.ji = 9 * n / 12, t.N = 0, t.Hm = 4 * n / 12, t.Wi.nr();\n        }\n        return this.k;\n    }\n    kp(t) {\n        this.Kv.style.cursor = 1 === t ? \"ew-resize\" : \"default\";\n    }\n    zm() {\n        const t = this.Qd.$t(), i = t.W();\n        i.leftPriceScale.visible || null === this.Rm || (this.Bm.removeChild(this.Rm.lp()), this.Rm.S(), this.Rm = null), i.rightPriceScale.visible || null === this.Dm || (this.Am.removeChild(this.Dm.lp()), this.Dm.S(), this.Dm = null);\n        const n = {\n            ud: this.Qd.$t().ud()\n        }, s = ()=>i.leftPriceScale.borderVisible && t.St().W().borderVisible, e = ()=>t.bd();\n        i.leftPriceScale.visible && null === this.Rm && (this.Rm = new Os(\"left\", i, n, s, e), this.Bm.appendChild(this.Rm.lp())), i.rightPriceScale.visible && null === this.Dm && (this.Dm = new Os(\"right\", i, n, s, e), this.Am.appendChild(this.Dm.lp()));\n    }\n}\nconst Es = !!ns && !!navigator.userAgentData && navigator.userAgentData.brands.some((t)=>t.brand.includes(\"Chromium\")) && !!ns && ((null === (Ns = null === navigator || void 0 === navigator ? void 0 : navigator.userAgentData) || void 0 === Ns ? void 0 : Ns.platform) ? \"Windows\" === navigator.userAgentData.platform : navigator.userAgent.toLowerCase().indexOf(\"win\") >= 0);\nvar Ns;\nclass Fs {\n    constructor(t, i, n){\n        var s;\n        this.Xm = [], this.Km = 0, this.ho = 0, this.__ = 0, this.Gm = 0, this.Jm = 0, this.Qm = null, this.tb = !1, this.Vp = new D, this.Op = new D, this.Rc = new D, this.ib = null, this.nb = null, this.Jd = t, this.cn = i, this.q_ = n, this.Xd = document.createElement(\"div\"), this.Xd.classList.add(\"tv-lightweight-charts\"), this.Xd.style.overflow = \"hidden\", this.Xd.style.direction = \"ltr\", this.Xd.style.width = \"100%\", this.Xd.style.height = \"100%\", (s = this.Xd).style.userSelect = \"none\", s.style.webkitUserSelect = \"none\", s.style.msUserSelect = \"none\", s.style.MozUserSelect = \"none\", s.style.webkitTapHighlightColor = \"transparent\", this.sb = document.createElement(\"table\"), this.sb.setAttribute(\"cellspacing\", \"0\"), this.Xd.appendChild(this.sb), this.eb = this.rb.bind(this), Ws(this.cn) && this.hb(!0), this.$i = new Ln(this.Vc.bind(this), this.cn, n), this.$t().Xc().l(this.lb.bind(this), this), this.ab = new Ls(this, this.q_), this.sb.appendChild(this.ab.lp());\n        const e = i.autoSize && this.ob();\n        let r = this.cn.width, h = this.cn.height;\n        if (e || 0 === r || 0 === h) {\n            const i = t.getBoundingClientRect();\n            r = r || i.width, h = h || i.height;\n        }\n        this._b(r, h), this.ub(), t.appendChild(this.Xd), this.cb(), this.$i.St().ec().l(this.$i.Kl.bind(this.$i), this), this.$i.g_().l(this.$i.Kl.bind(this.$i), this);\n    }\n    $t() {\n        return this.$i;\n    }\n    W() {\n        return this.cn;\n    }\n    Yp() {\n        return this.Xm;\n    }\n    fb() {\n        return this.ab;\n    }\n    S() {\n        this.hb(!1), 0 !== this.Km && window.cancelAnimationFrame(this.Km), this.$i.Xc().p(this), this.$i.St().ec().p(this), this.$i.g_().p(this), this.$i.S();\n        for (const t of this.Xm)this.sb.removeChild(t.lp()), t.lm().p(this), t.am().p(this), t.S();\n        this.Xm = [], b(this.ab).S(), null !== this.Xd.parentElement && this.Xd.parentElement.removeChild(this.Xd), this.Rc.S(), this.Vp.S(), this.Op.S(), this.pb();\n    }\n    _b(i, n, s = !1) {\n        if (this.ho === n && this.__ === i) return;\n        const e = function(i) {\n            const n = Math.floor(i.width), s = Math.floor(i.height);\n            return (0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.size)({\n                width: n - n % 2,\n                height: s - s % 2\n            });\n        }((0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.size)({\n            width: i,\n            height: n\n        }));\n        this.ho = e.height, this.__ = e.width;\n        const r = this.ho + \"px\", h = this.__ + \"px\";\n        b(this.Xd).style.height = r, b(this.Xd).style.width = h, this.sb.style.height = r, this.sb.style.width = h, s ? this.mb(ut.es(), performance.now()) : this.$i.Kl();\n    }\n    vp(t) {\n        void 0 === t && (t = ut.es());\n        for(let i = 0; i < this.Xm.length; i++)this.Xm[i].vp(t.Hn(i).Fn);\n        this.cn.timeScale.visible && this.ab.vp(t.jn());\n    }\n    $h(t) {\n        const i = Ws(this.cn);\n        this.$i.$h(t);\n        const n = Ws(this.cn);\n        n !== i && this.hb(n), this.cb(), this.bb(t);\n    }\n    lm() {\n        return this.Vp;\n    }\n    am() {\n        return this.Op;\n    }\n    Xc() {\n        return this.Rc;\n    }\n    wb() {\n        null !== this.Qm && (this.mb(this.Qm, performance.now()), this.Qm = null);\n        const t = this.gb(null), i = document.createElement(\"canvas\");\n        i.width = t.width, i.height = t.height;\n        const n = b(i.getContext(\"2d\"));\n        return this.gb(n), i;\n    }\n    Mb(t) {\n        if (\"left\" === t && !this.xb()) return 0;\n        if (\"right\" === t && !this.Sb()) return 0;\n        if (0 === this.Xm.length) return 0;\n        return b(\"left\" === t ? this.Xm[0].wm() : this.Xm[0].gm()).dp();\n    }\n    kb() {\n        return this.cn.autoSize && null !== this.ib;\n    }\n    yb() {\n        return this.Xd;\n    }\n    Qp(t) {\n        this.nb = t, this.nb ? this.yb().style.setProperty(\"cursor\", t) : this.yb().style.removeProperty(\"cursor\");\n    }\n    Cb() {\n        return this.nb;\n    }\n    Tb() {\n        return m(this.Xm[0]).um();\n    }\n    bb(t) {\n        (void 0 !== t.autoSize || !this.ib || void 0 === t.width && void 0 === t.height) && (t.autoSize && !this.ib && this.ob(), !1 === t.autoSize && null !== this.ib && this.pb(), t.autoSize || void 0 === t.width && void 0 === t.height || this._b(t.width || this.__, t.height || this.ho));\n    }\n    gb(i) {\n        let n = 0, s = 0;\n        const e = this.Xm[0], r = (t, n)=>{\n            let s = 0;\n            for(let e = 0; e < this.Xm.length; e++){\n                const r = this.Xm[e], h = b(\"left\" === t ? r.wm() : r.gm()), l = h.xp();\n                null !== i && h.Sp(i, n, s), s += l.height;\n            }\n        };\n        if (this.xb()) {\n            r(\"left\", 0);\n            n += b(e.wm()).xp().width;\n        }\n        for(let t = 0; t < this.Xm.length; t++){\n            const e = this.Xm[t], r = e.xp();\n            null !== i && e.Sp(i, n, s), s += r.height;\n        }\n        if (n += e.xp().width, this.Sb()) {\n            r(\"right\", n);\n            n += b(e.gm()).xp().width;\n        }\n        const h = (t, n, s)=>{\n            b(\"left\" === t ? this.ab.Lm() : this.ab.Em()).Sp(b(i), n, s);\n        };\n        if (this.cn.timeScale.visible) {\n            const t = this.ab.xp();\n            if (null !== i) {\n                let n = 0;\n                this.xb() && (h(\"left\", n, s), n = b(e.wm()).xp().width), this.ab.Sp(i, n, s), n += t.width, this.Sb() && h(\"right\", n, s);\n            }\n            s += t.height;\n        }\n        return (0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.size)({\n            width: n,\n            height: s\n        });\n    }\n    Pb() {\n        let i = 0, n = 0, s = 0;\n        for (const t of this.Xm)this.xb() && (n = Math.max(n, b(t.wm()).op(), this.cn.leftPriceScale.minimumWidth)), this.Sb() && (s = Math.max(s, b(t.gm()).op(), this.cn.rightPriceScale.minimumWidth)), i += t.M_();\n        n = rs(n), s = rs(s);\n        const e = this.__, r = this.ho, h = Math.max(e - n - s, 0), l = this.cn.timeScale.visible;\n        let a = l ? Math.max(this.ab.Wm(), this.cn.timeScale.minimumHeight) : 0;\n        var o;\n        a = (o = a) + o % 2;\n        const _ = 0 + a, u = r < _ ? 0 : r - _, c = u / i;\n        let d = 0;\n        for(let i = 0; i < this.Xm.length; ++i){\n            const e = this.Xm[i];\n            e.qp(this.$i.qc()[i]);\n            let r = 0, l = 0;\n            l = i === this.Xm.length - 1 ? u - d : Math.round(e.M_() * c), r = Math.max(l, 2), d += r, e.cp((0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.size)({\n                width: h,\n                height: r\n            })), this.xb() && e._m(n, \"left\"), this.Sb() && e._m(s, \"right\"), e.fp() && this.$i.Kc(e.fp(), r);\n        }\n        this.ab.Fm((0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.size)({\n            width: l ? h : 0,\n            height: a\n        }), l ? n : 0, l ? s : 0), this.$i.S_(h), this.Gm !== n && (this.Gm = n), this.Jm !== s && (this.Jm = s);\n    }\n    hb(t) {\n        t ? this.Xd.addEventListener(\"wheel\", this.eb, {\n            passive: !1\n        }) : this.Xd.removeEventListener(\"wheel\", this.eb);\n    }\n    Rb(t) {\n        switch(t.deltaMode){\n            case t.DOM_DELTA_PAGE:\n                return 120;\n            case t.DOM_DELTA_LINE:\n                return 32;\n        }\n        return Es ? 1 / window.devicePixelRatio : 1;\n    }\n    rb(t) {\n        if (!(0 !== t.deltaX && this.cn.handleScroll.mouseWheel || 0 !== t.deltaY && this.cn.handleScale.mouseWheel)) return;\n        const i = this.Rb(t), n = i * t.deltaX / 100, s = -i * t.deltaY / 100;\n        if (t.cancelable && t.preventDefault(), 0 !== s && this.cn.handleScale.mouseWheel) {\n            const i = Math.sign(s) * Math.min(1, Math.abs(s)), n = t.clientX - this.Xd.getBoundingClientRect().left;\n            this.$t().Qc(n, i);\n        }\n        0 !== n && this.cn.handleScroll.mouseWheel && this.$t().td(-80 * n);\n    }\n    mb(t, i) {\n        var n;\n        const s = t.jn();\n        3 === s && this.Db(), 3 !== s && 2 !== s || (this.Vb(t), this.Ob(t, i), this.ab.bt(), this.Xm.forEach((t)=>{\n            t.Xp();\n        }), 3 === (null === (n = this.Qm) || void 0 === n ? void 0 : n.jn()) && (this.Qm.ts(t), this.Db(), this.Vb(this.Qm), this.Ob(this.Qm, i), t = this.Qm, this.Qm = null)), this.vp(t);\n    }\n    Ob(t, i) {\n        for (const n of t.Qn())this.ns(n, i);\n    }\n    Vb(t) {\n        const i = this.$i.qc();\n        for(let n = 0; n < i.length; n++)t.Hn(n).Wn && i[n].N_();\n    }\n    ns(t, i) {\n        const n = this.$i.St();\n        switch(t.qn){\n            case 0:\n                n.hc();\n                break;\n            case 1:\n                n.lc(t.Vt);\n                break;\n            case 2:\n                n.Gn(t.Vt);\n                break;\n            case 3:\n                n.Jn(t.Vt);\n                break;\n            case 4:\n                n.qu();\n                break;\n            case 5:\n                t.Vt.Qu(i) || n.Jn(t.Vt.tc(i));\n        }\n    }\n    Vc(t) {\n        null !== this.Qm ? this.Qm.ts(t) : this.Qm = t, this.tb || (this.tb = !0, this.Km = window.requestAnimationFrame((t)=>{\n            if (this.tb = !1, this.Km = 0, null !== this.Qm) {\n                const i = this.Qm;\n                this.Qm = null, this.mb(i, t);\n                for (const n of i.Qn())if (5 === n.qn && !n.Vt.Qu(t)) {\n                    this.$t().Zn(n.Vt);\n                    break;\n                }\n            }\n        }));\n    }\n    Db() {\n        this.ub();\n    }\n    ub() {\n        const t = this.$i.qc(), i = t.length, n = this.Xm.length;\n        for(let t = i; t < n; t++){\n            const t = m(this.Xm.pop());\n            this.sb.removeChild(t.lp()), t.lm().p(this), t.am().p(this), t.S();\n        }\n        for(let s = n; s < i; s++){\n            const i = new Vs(this, t[s]);\n            i.lm().l(this.Bb.bind(this), this), i.am().l(this.Ab.bind(this), this), this.Xm.push(i), this.sb.insertBefore(i.lp(), this.ab.lp());\n        }\n        for(let n = 0; n < i; n++){\n            const i = t[n], s = this.Xm[n];\n            s.fp() !== i ? s.qp(i) : s.Up();\n        }\n        this.cb(), this.Pb();\n    }\n    Ib(t, i, n) {\n        var s;\n        const e = new Map;\n        if (null !== t) {\n            this.$i.wt().forEach((i)=>{\n                const n = i.In().ll(t);\n                null !== n && e.set(i, n);\n            });\n        }\n        let r;\n        if (null !== t) {\n            const i = null === (s = this.$i.St().Ui(t)) || void 0 === s ? void 0 : s.originalTime;\n            void 0 !== i && (r = i);\n        }\n        const h = this.$t().Wc(), l = null !== h && h.Hc instanceof Gi ? h.Hc : void 0, a = null !== h && void 0 !== h.Iv ? h.Iv.gr : void 0;\n        return {\n            zb: r,\n            ee: null != t ? t : void 0,\n            Lb: null != i ? i : void 0,\n            Eb: l,\n            Nb: e,\n            Fb: a,\n            Wb: null != n ? n : void 0\n        };\n    }\n    Bb(t, i, n) {\n        this.Vp.m(()=>this.Ib(t, i, n));\n    }\n    Ab(t, i, n) {\n        this.Op.m(()=>this.Ib(t, i, n));\n    }\n    lb(t, i, n) {\n        this.Rc.m(()=>this.Ib(t, i, n));\n    }\n    cb() {\n        const t = this.cn.timeScale.visible ? \"\" : \"none\";\n        this.ab.lp().style.display = t;\n    }\n    xb() {\n        return this.Xm[0].fp().R_().W().visible;\n    }\n    Sb() {\n        return this.Xm[0].fp().D_().W().visible;\n    }\n    ob() {\n        return \"ResizeObserver\" in window && (this.ib = new ResizeObserver((t)=>{\n            const i = t.find((t)=>t.target === this.Jd);\n            i && this._b(i.contentRect.width, i.contentRect.height);\n        }), this.ib.observe(this.Jd, {\n            box: \"border-box\"\n        }), !0);\n    }\n    pb() {\n        null !== this.ib && this.ib.disconnect(), this.ib = null;\n    }\n}\nfunction Ws(t) {\n    return Boolean(t.handleScroll.mouseWheel || t.handleScale.mouseWheel);\n}\nfunction js(t) {\n    return function(t) {\n        return void 0 !== t.open;\n    }(t) || function(t) {\n        return void 0 !== t.value;\n    }(t);\n}\nfunction Hs(t, i) {\n    var n = {};\n    for(var s in t)Object.prototype.hasOwnProperty.call(t, s) && i.indexOf(s) < 0 && (n[s] = t[s]);\n    if (null != t && \"function\" == typeof Object.getOwnPropertySymbols) {\n        var e = 0;\n        for(s = Object.getOwnPropertySymbols(t); e < s.length; e++)i.indexOf(s[e]) < 0 && Object.prototype.propertyIsEnumerable.call(t, s[e]) && (n[s[e]] = t[s[e]]);\n    }\n    return n;\n}\nfunction $s(t, i, n, s) {\n    const e = n.value, r = {\n        ee: i,\n        ot: t,\n        Vt: [\n            e,\n            e,\n            e,\n            e\n        ],\n        zb: s\n    };\n    return void 0 !== n.color && (r.V = n.color), r;\n}\nfunction Us(t, i, n, s) {\n    const e = n.value, r = {\n        ee: i,\n        ot: t,\n        Vt: [\n            e,\n            e,\n            e,\n            e\n        ],\n        zb: s\n    };\n    return void 0 !== n.lineColor && (r.lt = n.lineColor), void 0 !== n.topColor && (r.Ps = n.topColor), void 0 !== n.bottomColor && (r.Rs = n.bottomColor), r;\n}\nfunction qs(t, i, n, s) {\n    const e = n.value, r = {\n        ee: i,\n        ot: t,\n        Vt: [\n            e,\n            e,\n            e,\n            e\n        ],\n        zb: s\n    };\n    return void 0 !== n.topLineColor && (r.Re = n.topLineColor), void 0 !== n.bottomLineColor && (r.De = n.bottomLineColor), void 0 !== n.topFillColor1 && (r.ke = n.topFillColor1), void 0 !== n.topFillColor2 && (r.ye = n.topFillColor2), void 0 !== n.bottomFillColor1 && (r.Ce = n.bottomFillColor1), void 0 !== n.bottomFillColor2 && (r.Te = n.bottomFillColor2), r;\n}\nfunction Ys(t, i, n, s) {\n    const e = {\n        ee: i,\n        ot: t,\n        Vt: [\n            n.open,\n            n.high,\n            n.low,\n            n.close\n        ],\n        zb: s\n    };\n    return void 0 !== n.color && (e.V = n.color), e;\n}\nfunction Zs(t, i, n, s) {\n    const e = {\n        ee: i,\n        ot: t,\n        Vt: [\n            n.open,\n            n.high,\n            n.low,\n            n.close\n        ],\n        zb: s\n    };\n    return void 0 !== n.color && (e.V = n.color), void 0 !== n.borderColor && (e.Ot = n.borderColor), void 0 !== n.wickColor && (e.Xh = n.wickColor), e;\n}\nfunction Xs(t, i, n, s, e) {\n    const r = m(e)(n), h = Math.max(...r), l = Math.min(...r), a = r[r.length - 1], o = [\n        a,\n        h,\n        l,\n        a\n    ], _ = n, { time: u, color: c } = _;\n    return {\n        ee: i,\n        ot: t,\n        Vt: o,\n        zb: s,\n        $e: Hs(_, [\n            \"time\",\n            \"color\"\n        ]),\n        V: c\n    };\n}\nfunction Ks(t) {\n    return void 0 !== t.Vt;\n}\nfunction Gs(t, i) {\n    return void 0 !== i.customValues && (t.jb = i.customValues), t;\n}\nfunction Js(t) {\n    return (i, n, s, e, r, h)=>(function(t, i) {\n            return i ? i(t) : void 0 === (n = t).open && void 0 === n.value;\n            var n;\n        })(s, h) ? Gs({\n            ot: i,\n            ee: n,\n            zb: e\n        }, s) : Gs(t(i, n, s, e, r), s);\n}\nfunction Qs(t) {\n    return ({\n        Candlestick: Js(Zs),\n        Bar: Js(Ys),\n        Area: Js(Us),\n        Baseline: Js(qs),\n        Histogram: Js($s),\n        Line: Js($s),\n        Custom: Js(Xs)\n    })[t];\n}\nfunction te(t) {\n    return {\n        ee: 0,\n        Hb: new Map,\n        la: t\n    };\n}\nfunction ie(t, i) {\n    if (void 0 !== t && 0 !== t.length) return {\n        $b: i.key(t[0].ot),\n        Ub: i.key(t[t.length - 1].ot)\n    };\n}\nfunction ne(t) {\n    let i;\n    return t.forEach((t)=>{\n        void 0 === i && (i = t.zb);\n    }), m(i);\n}\nclass se {\n    constructor(t){\n        this.qb = new Map, this.Yb = new Map, this.Zb = new Map, this.Xb = [], this.q_ = t;\n    }\n    S() {\n        this.qb.clear(), this.Yb.clear(), this.Zb.clear(), this.Xb = [];\n    }\n    Kb(t, i) {\n        let n = 0 !== this.qb.size, s = !1;\n        const e = this.Yb.get(t);\n        if (void 0 !== e) if (1 === this.Yb.size) n = !1, s = !0, this.qb.clear();\n        else for (const i of this.Xb)i.pointData.Hb.delete(t) && (s = !0);\n        let r = [];\n        if (0 !== i.length) {\n            const n = i.map((t)=>t.time), e = this.q_.createConverterToInternalObj(i), h = Qs(t.Qh()), l = t.Ca(), a = t.Ta();\n            r = i.map((i, r)=>{\n                const o = e(i.time), _ = this.q_.key(o);\n                let u = this.qb.get(_);\n                void 0 === u && (u = te(o), this.qb.set(_, u), s = !0);\n                const c = h(o, u.ee, i, n[r], l, a);\n                return u.Hb.set(t, c), c;\n            });\n        }\n        n && this.Gb(), this.Jb(t, r);\n        let h = -1;\n        if (s) {\n            const t = [];\n            this.qb.forEach((i)=>{\n                t.push({\n                    timeWeight: 0,\n                    time: i.la,\n                    pointData: i,\n                    originalTime: ne(i.Hb)\n                });\n            }), t.sort((t, i)=>this.q_.key(t.time) - this.q_.key(i.time)), h = this.Qb(t);\n        }\n        return this.tw(t, h, function(t, i, n) {\n            const s = ie(t, n), e = ie(i, n);\n            if (void 0 !== s && void 0 !== e) return {\n                ta: s.Ub >= e.Ub && s.$b >= e.$b\n            };\n        }(this.Yb.get(t), e, this.q_));\n    }\n    vd(t) {\n        return this.Kb(t, []);\n    }\n    iw(t, i) {\n        const n = i;\n        !function(t) {\n            void 0 === t.zb && (t.zb = t.time);\n        }(n), this.q_.preprocessData(i);\n        const s = this.q_.createConverterToInternalObj([\n            i\n        ])(i.time), e = this.Zb.get(t);\n        if (void 0 !== e && this.q_.key(s) < this.q_.key(e)) throw new Error(`Cannot update oldest data, last time=${e}, new time=${s}`);\n        let r = this.qb.get(this.q_.key(s));\n        const h = void 0 === r;\n        void 0 === r && (r = te(s), this.qb.set(this.q_.key(s), r));\n        const l = Qs(t.Qh()), a = t.Ca(), o = t.Ta(), _ = l(s, r.ee, i, n.zb, a, o);\n        r.Hb.set(t, _), this.nw(t, _);\n        const u = {\n            ta: Ks(_)\n        };\n        if (!h) return this.tw(t, -1, u);\n        const c = {\n            timeWeight: 0,\n            time: r.la,\n            pointData: r,\n            originalTime: ne(r.Hb)\n        }, d = Bt(this.Xb, this.q_.key(c.time), (t, i)=>this.q_.key(t.time) < i);\n        this.Xb.splice(d, 0, c);\n        for(let t = d; t < this.Xb.length; ++t)ee(this.Xb[t].pointData, t);\n        return this.q_.fillWeightsForPoints(this.Xb, d), this.tw(t, d, u);\n    }\n    nw(t, i) {\n        let n = this.Yb.get(t);\n        void 0 === n && (n = [], this.Yb.set(t, n));\n        const s = 0 !== n.length ? n[n.length - 1] : null;\n        null === s || this.q_.key(i.ot) > this.q_.key(s.ot) ? Ks(i) && n.push(i) : Ks(i) ? n[n.length - 1] = i : n.splice(-1, 1), this.Zb.set(t, i.ot);\n    }\n    Jb(t, i) {\n        0 !== i.length ? (this.Yb.set(t, i.filter(Ks)), this.Zb.set(t, i[i.length - 1].ot)) : (this.Yb.delete(t), this.Zb.delete(t));\n    }\n    Gb() {\n        for (const t of this.Xb)0 === t.pointData.Hb.size && this.qb.delete(this.q_.key(t.time));\n    }\n    Qb(t) {\n        let i = -1;\n        for(let n = 0; n < this.Xb.length && n < t.length; ++n){\n            const s = this.Xb[n], e = t[n];\n            if (this.q_.key(s.time) !== this.q_.key(e.time)) {\n                i = n;\n                break;\n            }\n            e.timeWeight = s.timeWeight, ee(e.pointData, n);\n        }\n        if (-1 === i && this.Xb.length !== t.length && (i = Math.min(this.Xb.length, t.length)), -1 === i) return -1;\n        for(let n = i; n < t.length; ++n)ee(t[n].pointData, n);\n        return this.q_.fillWeightsForPoints(t, i), this.Xb = t, i;\n    }\n    sw() {\n        if (0 === this.Yb.size) return null;\n        let t = 0;\n        return this.Yb.forEach((i)=>{\n            0 !== i.length && (t = Math.max(t, i[i.length - 1].ee));\n        }), t;\n    }\n    tw(t, i, n) {\n        const s = {\n            ew: new Map,\n            St: {\n                Eu: this.sw()\n            }\n        };\n        if (-1 !== i) this.Yb.forEach((i, e)=>{\n            s.ew.set(e, {\n                $e: i,\n                rw: e === t ? n : void 0\n            });\n        }), this.Yb.has(t) || s.ew.set(t, {\n            $e: [],\n            rw: n\n        }), s.St.hw = this.Xb, s.St.lw = i;\n        else {\n            const i = this.Yb.get(t);\n            s.ew.set(t, {\n                $e: i || [],\n                rw: n\n            });\n        }\n        return s;\n    }\n}\nfunction ee(t, i) {\n    t.ee = i, t.Hb.forEach((t)=>{\n        t.ee = i;\n    });\n}\nfunction re(t) {\n    const i = {\n        value: t.Vt[3],\n        time: t.zb\n    };\n    return void 0 !== t.jb && (i.customValues = t.jb), i;\n}\nfunction he(t) {\n    const i = re(t);\n    return void 0 !== t.V && (i.color = t.V), i;\n}\nfunction le(t) {\n    const i = re(t);\n    return void 0 !== t.lt && (i.lineColor = t.lt), void 0 !== t.Ps && (i.topColor = t.Ps), void 0 !== t.Rs && (i.bottomColor = t.Rs), i;\n}\nfunction ae(t) {\n    const i = re(t);\n    return void 0 !== t.Re && (i.topLineColor = t.Re), void 0 !== t.De && (i.bottomLineColor = t.De), void 0 !== t.ke && (i.topFillColor1 = t.ke), void 0 !== t.ye && (i.topFillColor2 = t.ye), void 0 !== t.Ce && (i.bottomFillColor1 = t.Ce), void 0 !== t.Te && (i.bottomFillColor2 = t.Te), i;\n}\nfunction oe(t) {\n    const i = {\n        open: t.Vt[0],\n        high: t.Vt[1],\n        low: t.Vt[2],\n        close: t.Vt[3],\n        time: t.zb\n    };\n    return void 0 !== t.jb && (i.customValues = t.jb), i;\n}\nfunction _e(t) {\n    const i = oe(t);\n    return void 0 !== t.V && (i.color = t.V), i;\n}\nfunction ue(t) {\n    const i = oe(t), { V: n, Ot: s, Xh: e } = t;\n    return void 0 !== n && (i.color = n), void 0 !== s && (i.borderColor = s), void 0 !== e && (i.wickColor = e), i;\n}\nfunction ce(t) {\n    return ({\n        Area: le,\n        Line: he,\n        Baseline: ae,\n        Histogram: he,\n        Bar: _e,\n        Candlestick: ue,\n        Custom: de\n    })[t];\n}\nfunction de(t) {\n    const i = t.zb;\n    return Object.assign(Object.assign({}, t.$e), {\n        time: i\n    });\n}\nconst fe = {\n    vertLine: {\n        color: \"#9598A1\",\n        width: 1,\n        style: 3,\n        visible: !0,\n        labelVisible: !0,\n        labelBackgroundColor: \"#131722\"\n    },\n    horzLine: {\n        color: \"#9598A1\",\n        width: 1,\n        style: 3,\n        visible: !0,\n        labelVisible: !0,\n        labelBackgroundColor: \"#131722\"\n    },\n    mode: 1\n}, ve = {\n    vertLines: {\n        color: \"#D6DCDE\",\n        style: 0,\n        visible: !0\n    },\n    horzLines: {\n        color: \"#D6DCDE\",\n        style: 0,\n        visible: !0\n    }\n}, pe = {\n    background: {\n        type: \"solid\",\n        color: \"#FFFFFF\"\n    },\n    textColor: \"#191919\",\n    fontSize: 12,\n    fontFamily: N,\n    attributionLogo: !0\n}, me = {\n    autoScale: !0,\n    mode: 0,\n    invertScale: !1,\n    alignLabels: !0,\n    borderVisible: !0,\n    borderColor: \"#2B2B43\",\n    entireTextOnly: !1,\n    visible: !1,\n    ticksVisible: !1,\n    scaleMargins: {\n        bottom: .1,\n        top: .2\n    },\n    minimumWidth: 0\n}, be = {\n    rightOffset: 0,\n    barSpacing: 6,\n    minBarSpacing: .5,\n    fixLeftEdge: !1,\n    fixRightEdge: !1,\n    lockVisibleTimeRangeOnResize: !1,\n    rightBarStaysOnScroll: !1,\n    borderVisible: !0,\n    borderColor: \"#2B2B43\",\n    visible: !0,\n    timeVisible: !1,\n    secondsVisible: !0,\n    shiftVisibleRangeOnNewBar: !0,\n    allowShiftVisibleRangeOnWhitespaceReplacement: !1,\n    ticksVisible: !1,\n    uniformDistribution: !1,\n    minimumHeight: 0,\n    allowBoldLabels: !0\n}, we = {\n    color: \"rgba(0, 0, 0, 0)\",\n    visible: !1,\n    fontSize: 48,\n    fontFamily: N,\n    fontStyle: \"\",\n    text: \"\",\n    horzAlign: \"center\",\n    vertAlign: \"center\"\n};\nfunction ge() {\n    return {\n        width: 0,\n        height: 0,\n        autoSize: !1,\n        layout: pe,\n        crosshair: fe,\n        grid: ve,\n        overlayPriceScales: Object.assign({}, me),\n        leftPriceScale: Object.assign(Object.assign({}, me), {\n            visible: !1\n        }),\n        rightPriceScale: Object.assign(Object.assign({}, me), {\n            visible: !0\n        }),\n        timeScale: be,\n        watermark: we,\n        localization: {\n            locale: ns ? navigator.language : \"\",\n            dateFormat: \"dd MMM 'yy\"\n        },\n        handleScroll: {\n            mouseWheel: !0,\n            pressedMouseMove: !0,\n            horzTouchDrag: !0,\n            vertTouchDrag: !0\n        },\n        handleScale: {\n            axisPressedMouseMove: {\n                time: !0,\n                price: !0\n            },\n            axisDoubleClickReset: {\n                time: !0,\n                price: !0\n            },\n            mouseWheel: !0,\n            pinch: !0\n        },\n        kineticScroll: {\n            mouse: !1,\n            touch: !0\n        },\n        trackingMode: {\n            exitMode: 1\n        }\n    };\n}\nclass Me {\n    constructor(t, i){\n        this.aw = t, this.ow = i;\n    }\n    applyOptions(t) {\n        this.aw.$t().$c(this.ow, t);\n    }\n    options() {\n        return this.Li().W();\n    }\n    width() {\n        return _t(this.ow) ? this.aw.Mb(this.ow) : 0;\n    }\n    Li() {\n        return b(this.aw.$t().Uc(this.ow)).Dt;\n    }\n}\nfunction xe(t, i, n) {\n    const s = Hs(t, [\n        \"time\",\n        \"originalTime\"\n    ]), e = Object.assign({\n        time: i\n    }, s);\n    return void 0 !== n && (e.originalTime = n), e;\n}\nconst Se = {\n    color: \"#FF0000\",\n    price: 0,\n    lineStyle: 2,\n    lineWidth: 1,\n    lineVisible: !0,\n    axisLabelVisible: !0,\n    title: \"\",\n    axisLabelColor: \"\",\n    axisLabelTextColor: \"\"\n};\nclass ke {\n    constructor(t){\n        this.Nh = t;\n    }\n    applyOptions(t) {\n        this.Nh.$h(t);\n    }\n    options() {\n        return this.Nh.W();\n    }\n    _w() {\n        return this.Nh;\n    }\n}\nclass ye {\n    constructor(t, i, n, s, e){\n        this.uw = new D, this.Es = t, this.cw = i, this.dw = n, this.q_ = e, this.fw = s;\n    }\n    S() {\n        this.uw.S();\n    }\n    priceFormatter() {\n        return this.Es.ba();\n    }\n    priceToCoordinate(t) {\n        const i = this.Es.Ct();\n        return null === i ? null : this.Es.Dt().Rt(t, i.Vt);\n    }\n    coordinateToPrice(t) {\n        const i = this.Es.Ct();\n        return null === i ? null : this.Es.Dt().pn(t, i.Vt);\n    }\n    barsInLogicalRange(t) {\n        if (null === t) return null;\n        const i = new yn(new xn(t.from, t.to)).lu(), n = this.Es.In();\n        if (n.Ni()) return null;\n        const s = n.ll(i.Os(), 1), e = n.ll(i.ui(), -1), r = b(n.el()), h = b(n.An());\n        if (null !== s && null !== e && s.ee > e.ee) return {\n            barsBefore: t.from - r,\n            barsAfter: h - t.to\n        };\n        const l = {\n            barsBefore: null === s || s.ee === r ? t.from - r : s.ee - r,\n            barsAfter: null === e || e.ee === h ? h - t.to : h - e.ee\n        };\n        return null !== s && null !== e && (l.from = s.zb, l.to = e.zb), l;\n    }\n    setData(t) {\n        this.q_, this.Es.Qh(), this.cw.pw(this.Es, t), this.mw(\"full\");\n    }\n    update(t) {\n        this.Es.Qh(), this.cw.bw(this.Es, t), this.mw(\"update\");\n    }\n    dataByIndex(t, i) {\n        const n = this.Es.In().ll(t, i);\n        if (null === n) return null;\n        return ce(this.seriesType())(n);\n    }\n    data() {\n        const t = ce(this.seriesType());\n        return this.Es.In().ne().map((i)=>t(i));\n    }\n    subscribeDataChanged(t) {\n        this.uw.l(t);\n    }\n    unsubscribeDataChanged(t) {\n        this.uw.v(t);\n    }\n    setMarkers(t) {\n        this.q_;\n        const i = t.map((t)=>xe(t, this.q_.convertHorzItemToInternal(t.time), t.time));\n        this.Es.na(i);\n    }\n    markers() {\n        return this.Es.sa().map((t)=>xe(t, t.originalTime, void 0));\n    }\n    applyOptions(t) {\n        this.Es.$h(t);\n    }\n    options() {\n        return z(this.Es.W());\n    }\n    priceScale() {\n        return this.dw.priceScale(this.Es.Dt().Pa());\n    }\n    createPriceLine(t) {\n        const i = V(z(Se), t), n = this.Es.ea(i);\n        return new ke(n);\n    }\n    removePriceLine(t) {\n        this.Es.ra(t._w());\n    }\n    seriesType() {\n        return this.Es.Qh();\n    }\n    attachPrimitive(t) {\n        this.Es.ka(t), t.attached && t.attached({\n            chart: this.fw,\n            series: this,\n            requestUpdate: ()=>this.Es.$t().Kl()\n        });\n    }\n    detachPrimitive(t) {\n        this.Es.ya(t), t.detached && t.detached();\n    }\n    mw(t) {\n        this.uw.M() && this.uw.m(t);\n    }\n}\nclass Ce {\n    constructor(t, i, n){\n        this.ww = new D, this.mu = new D, this.Om = new D, this.$i = t, this.yl = t.St(), this.ab = i, this.yl.nc().l(this.gw.bind(this)), this.yl.sc().l(this.Mw.bind(this)), this.ab.Nm().l(this.xw.bind(this)), this.q_ = n;\n    }\n    S() {\n        this.yl.nc().p(this), this.yl.sc().p(this), this.ab.Nm().p(this), this.ww.S(), this.mu.S(), this.Om.S();\n    }\n    scrollPosition() {\n        return this.yl.Hu();\n    }\n    scrollToPosition(t, i) {\n        i ? this.yl.Ju(t, 1e3) : this.$i.Jn(t);\n    }\n    scrollToRealTime() {\n        this.yl.Gu();\n    }\n    getVisibleRange() {\n        const t = this.yl.Vu();\n        return null === t ? null : {\n            from: t.from.originalTime,\n            to: t.to.originalTime\n        };\n    }\n    setVisibleRange(t) {\n        const i = {\n            from: this.q_.convertHorzItemToInternal(t.from),\n            to: this.q_.convertHorzItemToInternal(t.to)\n        }, n = this.yl.Iu(i);\n        this.$i.pd(n);\n    }\n    getVisibleLogicalRange() {\n        const t = this.yl.Du();\n        return null === t ? null : {\n            from: t.Os(),\n            to: t.ui()\n        };\n    }\n    setVisibleLogicalRange(t) {\n        p(t.from <= t.to, \"The from index cannot be after the to index.\"), this.$i.pd(t);\n    }\n    resetTimeScale() {\n        this.$i.Kn();\n    }\n    fitContent() {\n        this.$i.hc();\n    }\n    logicalToCoordinate(t) {\n        const i = this.$i.St();\n        return i.Ni() ? null : i.It(t);\n    }\n    coordinateToLogical(t) {\n        return this.yl.Ni() ? null : this.yl.Nu(t);\n    }\n    timeToCoordinate(t) {\n        const i = this.q_.convertHorzItemToInternal(t), n = this.yl.Va(i, !1);\n        return null === n ? null : this.yl.It(n);\n    }\n    coordinateToTime(t) {\n        const i = this.$i.St(), n = i.Nu(t), s = i.Ui(n);\n        return null === s ? null : s.originalTime;\n    }\n    width() {\n        return this.ab.um().width;\n    }\n    height() {\n        return this.ab.um().height;\n    }\n    subscribeVisibleTimeRangeChange(t) {\n        this.ww.l(t);\n    }\n    unsubscribeVisibleTimeRangeChange(t) {\n        this.ww.v(t);\n    }\n    subscribeVisibleLogicalRangeChange(t) {\n        this.mu.l(t);\n    }\n    unsubscribeVisibleLogicalRangeChange(t) {\n        this.mu.v(t);\n    }\n    subscribeSizeChange(t) {\n        this.Om.l(t);\n    }\n    unsubscribeSizeChange(t) {\n        this.Om.v(t);\n    }\n    applyOptions(t) {\n        this.yl.$h(t);\n    }\n    options() {\n        return Object.assign(Object.assign({}, z(this.yl.W())), {\n            barSpacing: this.yl.le()\n        });\n    }\n    gw() {\n        this.ww.M() && this.ww.m(this.getVisibleRange());\n    }\n    Mw() {\n        this.mu.M() && this.mu.m(this.getVisibleLogicalRange());\n    }\n    xw(t) {\n        this.Om.m(t.width, t.height);\n    }\n}\nfunction Te(t) {\n    if (void 0 === t || \"custom\" === t.type) return;\n    const i = t;\n    void 0 !== i.minMove && void 0 === i.precision && (i.precision = function(t) {\n        if (t >= 1) return 0;\n        let i = 0;\n        for(; i < 8; i++){\n            const n = Math.round(t);\n            if (Math.abs(n - t) < 1e-8) return i;\n            t *= 10;\n        }\n        return i;\n    }(i.minMove));\n}\nfunction Pe(t) {\n    return function(t) {\n        if (I(t.handleScale)) {\n            const i = t.handleScale;\n            t.handleScale = {\n                axisDoubleClickReset: {\n                    time: i,\n                    price: i\n                },\n                axisPressedMouseMove: {\n                    time: i,\n                    price: i\n                },\n                mouseWheel: i,\n                pinch: i\n            };\n        } else if (void 0 !== t.handleScale) {\n            const { axisPressedMouseMove: i, axisDoubleClickReset: n } = t.handleScale;\n            I(i) && (t.handleScale.axisPressedMouseMove = {\n                time: i,\n                price: i\n            }), I(n) && (t.handleScale.axisDoubleClickReset = {\n                time: n,\n                price: n\n            });\n        }\n        const i = t.handleScroll;\n        I(i) && (t.handleScroll = {\n            horzTouchDrag: i,\n            vertTouchDrag: i,\n            mouseWheel: i,\n            pressedMouseMove: i\n        });\n    }(t), t;\n}\nclass Re {\n    constructor(t, i, n){\n        this.Sw = new Map, this.kw = new Map, this.yw = new D, this.Cw = new D, this.Tw = new D, this.Pw = new se(i);\n        const s = void 0 === n ? z(ge()) : V(z(ge()), Pe(n));\n        this.q_ = i, this.aw = new Fs(t, s, i), this.aw.lm().l((t)=>{\n            this.yw.M() && this.yw.m(this.Rw(t()));\n        }, this), this.aw.am().l((t)=>{\n            this.Cw.M() && this.Cw.m(this.Rw(t()));\n        }, this), this.aw.Xc().l((t)=>{\n            this.Tw.M() && this.Tw.m(this.Rw(t()));\n        }, this);\n        const e = this.aw.$t();\n        this.Dw = new Ce(e, this.aw.fb(), this.q_);\n    }\n    remove() {\n        this.aw.lm().p(this), this.aw.am().p(this), this.aw.Xc().p(this), this.Dw.S(), this.aw.S(), this.Sw.clear(), this.kw.clear(), this.yw.S(), this.Cw.S(), this.Tw.S(), this.Pw.S();\n    }\n    resize(t, i, n) {\n        this.autoSizeActive() || this.aw._b(t, i, n);\n    }\n    addCustomSeries(t, i) {\n        const n = w(t), s = Object.assign(Object.assign({}, _), n.defaultOptions());\n        return this.Vw(\"Custom\", s, i, n);\n    }\n    addAreaSeries(t) {\n        return this.Vw(\"Area\", l, t);\n    }\n    addBaselineSeries(t) {\n        return this.Vw(\"Baseline\", a, t);\n    }\n    addBarSeries(t) {\n        return this.Vw(\"Bar\", r, t);\n    }\n    addCandlestickSeries(t = {}) {\n        return function(t) {\n            void 0 !== t.borderColor && (t.borderUpColor = t.borderColor, t.borderDownColor = t.borderColor), void 0 !== t.wickColor && (t.wickUpColor = t.wickColor, t.wickDownColor = t.wickColor);\n        }(t), this.Vw(\"Candlestick\", e, t);\n    }\n    addHistogramSeries(t) {\n        return this.Vw(\"Histogram\", o, t);\n    }\n    addLineSeries(t) {\n        return this.Vw(\"Line\", h, t);\n    }\n    removeSeries(t) {\n        const i = m(this.Sw.get(t)), n = this.Pw.vd(i);\n        this.aw.$t().vd(i), this.Ow(n), this.Sw.delete(t), this.kw.delete(i);\n    }\n    pw(t, i) {\n        this.Ow(this.Pw.Kb(t, i));\n    }\n    bw(t, i) {\n        this.Ow(this.Pw.iw(t, i));\n    }\n    subscribeClick(t) {\n        this.yw.l(t);\n    }\n    unsubscribeClick(t) {\n        this.yw.v(t);\n    }\n    subscribeCrosshairMove(t) {\n        this.Tw.l(t);\n    }\n    unsubscribeCrosshairMove(t) {\n        this.Tw.v(t);\n    }\n    subscribeDblClick(t) {\n        this.Cw.l(t);\n    }\n    unsubscribeDblClick(t) {\n        this.Cw.v(t);\n    }\n    priceScale(t) {\n        return new Me(this.aw, t);\n    }\n    timeScale() {\n        return this.Dw;\n    }\n    applyOptions(t) {\n        this.aw.$h(Pe(t));\n    }\n    options() {\n        return this.aw.W();\n    }\n    takeScreenshot() {\n        return this.aw.wb();\n    }\n    autoSizeActive() {\n        return this.aw.kb();\n    }\n    chartElement() {\n        return this.aw.yb();\n    }\n    paneSize() {\n        const t = this.aw.Tb();\n        return {\n            height: t.height,\n            width: t.width\n        };\n    }\n    setCrosshairPosition(t, i, n) {\n        const s = this.Sw.get(n);\n        if (void 0 === s) return;\n        const e = this.aw.$t().dr(s);\n        null !== e && this.aw.$t().ad(t, i, e);\n    }\n    clearCrosshairPosition() {\n        this.aw.$t().od(!0);\n    }\n    Vw(t, i, n = {}, s) {\n        Te(n.priceFormat);\n        const e = V(z(u), z(i), n), r = this.aw.$t().dd(t, e, s), h = new ye(r, this, this, this, this.q_);\n        return this.Sw.set(h, r), this.kw.set(r, h), h;\n    }\n    Ow(t) {\n        const i = this.aw.$t();\n        i._d(t.St.Eu, t.St.hw, t.St.lw), t.ew.forEach((t, i)=>i.J(t.$e, t.rw)), i.Wu();\n    }\n    Bw(t) {\n        return m(this.kw.get(t));\n    }\n    Rw(t) {\n        const i = new Map;\n        t.Nb.forEach((t, n)=>{\n            const s = n.Qh(), e = ce(s)(t);\n            if (\"Custom\" !== s) p(js(e));\n            else {\n                const t = n.Ta();\n                p(!t || !1 === t(e));\n            }\n            i.set(this.Bw(n), e);\n        });\n        const n = void 0 !== t.Eb && this.kw.has(t.Eb) ? this.Bw(t.Eb) : void 0;\n        return {\n            time: t.zb,\n            logical: t.ee,\n            point: t.Lb,\n            hoveredSeries: n,\n            hoveredObjectId: t.Fb,\n            seriesData: i,\n            sourceEvent: t.Wb\n        };\n    }\n}\nfunction De(t, i, n) {\n    let s;\n    if (A(t)) {\n        const i = document.getElementById(t);\n        p(null !== i, `Cannot find element in DOM with id=${t}`), s = i;\n    } else s = t;\n    const e = new Re(s, i, n);\n    return i.setOptions(e.options()), e;\n}\nfunction Ve(t, i) {\n    return De(t, new is, is.Id(i));\n}\nfunction Oe() {\n    return is;\n}\nconst Be = Object.assign(Object.assign({}, u), _);\nfunction Ae() {\n    return \"4.2.3\";\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/lightweight-charts/dist/lightweight-charts.production.mjs\n");

/***/ })

};
;