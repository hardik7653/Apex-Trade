version: "3.9"
services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      NEXT_PUBLIC_API_URL: "http://localhost:8001"
      NODE_ENV: "production"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - apextrader-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  backend:
    build:
      context: ./backend_fastapi
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    environment:
      DATABASE_URL: "postgresql://postgres:postgres@db:5432/apex"
      MODEL_DIR: "./models"
      SEED_DB: "true"
      LOG_LEVEL: "INFO"
      API_HOST: "0.0.0.0"
      API_PORT: "8001"
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./backend_fastapi/models:/app/models
      - ./backend_fastapi/logs:/app/logs
    networks:
      - apextrader-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: apex
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - apextrader-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d apex"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

networks:
  apextrader-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
